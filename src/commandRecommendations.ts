import * as vscode from 'vscode';
import RepoStepRecommender from './RepoStepRecommender';
import { ConstantsRecommender } from './ConstantsRecommender';
import {removeLinebreaks,cutUntilCaret, removeComments} from './utils/codeUtils';
 // Careful: This file is automatically generated by the backend in the class:
 // ExtensionCommandsService.java, or, more precisley, in 
 // XmlCommandFileCreator::XmlCommands::createCommandCode().
export const commandRecommendations = vscode.languages.registerCompletionItemProvider(
    'mateo',
    {
       async provideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {
            let items: vscode.CompletionItem[] = [];
            let preprocessedSubdocument: string = removeComments(
              removeLinebreaks(cutUntilCaret(document, position))
            )
            let repoBuffer: RepoStepRecommender =
              RepoStepRecommender.getInstance();
            let repoRecommendations: vscode.CompletionItem[] =
              await repoBuffer.provideRecommendation(
                preprocessedSubdocument,
                document.uri.fsPath
              );
            for (
              let recommendationIndex = 0;
              recommendationIndex < repoRecommendations.length;
              recommendationIndex++
            ) {
              items.push(repoRecommendations[recommendationIndex]);
            }

            let variableRecommender: ConstantsRecommender =
              new ConstantsRecommender();
            let variableRecommendations: vscode.CompletionItem[] =
              await variableRecommender.provideRecommendation(
                preprocessedSubdocument,
                document.uri.fsPath
              );
            for (
              let recommendationIndex = 0;
              recommendationIndex < variableRecommendations.length;
              recommendationIndex++
            ) {
              items.push(variableRecommendations[recommendationIndex]);
            }
            let line = document.lineAt(position);
            let beginIndex = line.firstNonWhitespaceCharacterIndex;
            let indexOfBrace = line.text.indexOf("(");
            let linePrefix = line.text.substr(beginIndex, indexOfBrace + 1);

            console.log("\n");
            console.log("Line: " + line.text);
            console.log("begin index: " + beginIndex + " linePrefix: " + linePrefix);

            console.log("Position: " + position.character);
            console.log("Index of brace: " + line.text.indexOf('('));

            if (/^\s+(?!case|step|process|testcase)\w+/.test(line.text) && position.character <= (indexOfBrace > 0 ? indexOfBrace : position.character)) {

                const addToTextCommandCompletion = new vscode.CompletionItem('addToText');
                addToTextCommandCompletion.kind = vscode.CompletionItemKind.Function;
                addToTextCommandCompletion.insertText = new vscode.SnippetString('addToText(EXISTING_TEXT = "$1", TEXT_TO_ADD = "$2")');
                addToTextCommandCompletion.documentation = new vscode.MarkdownString('Hängt einen Text einem bestimmtes Wort oder einen festen Teilbereich in einem Text an.Das Kommando sucht nach EXISTING_TEXT im Text und hängt bei jedem Vorkommen TEXT_TO_ADD an.Das bedeutet, dass bei mehreren Mal TEXT_TO_ADD angehängt wird.');
                items.push(addToTextCommandCompletion);

                const agentCallJavaCommandCompletion = new vscode.CompletionItem('agentCallJava');
                agentCallJavaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                agentCallJavaCommandCompletion.insertText = new vscode.SnippetString('agentCallJava(METHOD = "$1")');
                agentCallJavaCommandCompletion.documentation = new vscode.MarkdownString('Basiskommando zur direkten Ansprache des Java Treibers. Dieses Kommando sollte im Regelfall nicht verwendet werden müssen.');
                items.push(agentCallJavaCommandCompletion);

                const attachJavaCommandCompletion = new vscode.CompletionItem('attachJava');
                attachJavaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                attachJavaCommandCompletion.insertText = new vscode.SnippetString('attachJava(NAME = "$1")');
                attachJavaCommandCompletion.documentation = new vscode.MarkdownString('Wird verwendet den Agenten an eine bestimmte Java Anwendung anzudocken. Dies ist notwendig bevor alle weiteren Kommandos verwendet werden können.');
                items.push(attachJavaCommandCompletion);

                const backupCommandCompletion = new vscode.CompletionItem('backup');
                backupCommandCompletion.kind = vscode.CompletionItemKind.Function;
                backupCommandCompletion.insertText = new vscode.SnippetString('backup(RESULT_LEVEL = "$1")');
                backupCommandCompletion.documentation = new vscode.MarkdownString('Hilfskommando, das eingesetzt werden kann, um ein bestimmtes Ergebnis zu simulieren. Über die Parameter können direkt die entsprechenden Result-Level (Ergebnisstatus) bzw. Ergebnisnachrichten gesetzt werden. Das Kommando führt ansonsten keine Aktionen aus.');
                items.push(backupCommandCompletion);

                const basicAutoItCommandCommandCompletion = new vscode.CompletionItem('basicAutoItCommand');
                basicAutoItCommandCommandCompletion.kind = vscode.CompletionItemKind.Function;
                basicAutoItCommandCommandCompletion.insertText = new vscode.SnippetString('basicAutoItCommand(PARAM0 = "$1")');
                basicAutoItCommandCommandCompletion.documentation = new vscode.MarkdownString('Basiskommando zur direkten Ansprache des AutoIT Treibers. Dieses Kommando sollte im Regelfall nicht verwendet werden müssen.');
                items.push(basicAutoItCommandCommandCompletion);

                const basicSapCommandCommandCompletion = new vscode.CompletionItem('basicSapCommand');
                basicSapCommandCommandCompletion.kind = vscode.CompletionItemKind.Function;
                basicSapCommandCommandCompletion.insertText = new vscode.SnippetString('basicSapCommand(PARAM0 = "$1")');
                basicSapCommandCommandCompletion.documentation = new vscode.MarkdownString('Generisches Kommando für Aufrufe zum SAP Treiber. Dieses Kommando ist im Regelfall nur für "on-the-fly" Implementierungen von konkreten SAP Aufrufen zu verwenden.');
                items.push(basicSapCommandCommandCompletion);

                const breakCommandCompletion = new vscode.CompletionItem('break');
                breakCommandCompletion.kind = vscode.CompletionItemKind.Function;
                breakCommandCompletion.insertText = new vscode.SnippetString('break()');
                breakCommandCompletion.documentation = new vscode.MarkdownString('Erlaubt das Ausbrechen aus einer Schleife.    Die Ausführung wird am Ende des Ausführungsblocks der Schleife fortgesetzt.');
                items.push(breakCommandCompletion);

                const changeStorageValueCommandCompletion = new vscode.CompletionItem('changeStorageValue');
                changeStorageValueCommandCompletion.kind = vscode.CompletionItemKind.Function;
                changeStorageValueCommandCompletion.insertText = new vscode.SnippetString('changeStorageValue(SOURCE_STORAGE_KEY = "$1", OPERATION = "$2")');
                changeStorageValueCommandCompletion.documentation = new vscode.MarkdownString('Verändert den Wert einer Laufzeitvariable. Dies ist ein Wert in der Storage-Datei storageFile. Der Pfad zu storageFile wird über environment.properties gesetzt). Mögliche Operationen: entferne, entferneLeerzeichen, addOrReplace, extractSingleSqlResultFromJson, regex, regex_from_old, get_testscript_dir, replace_char');
                items.push(changeStorageValueCommandCompletion);

                const checkAlertWebCommandCompletion = new vscode.CompletionItem('checkAlertWeb');
                checkAlertWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkAlertWebCommandCompletion.insertText = new vscode.SnippetString('checkAlertWeb()');
                checkAlertWebCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando überprüft, ob eine Alarm-Meldung (Alert) angezeigt wird.');
                items.push(checkAlertWebCommandCompletion);

                const checkButtonIsSelectableWinEleCommandCompletion = new vscode.CompletionItem('checkButtonIsSelectableWinEle');
                checkButtonIsSelectableWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkButtonIsSelectableWinEleCommandCompletion.insertText = new vscode.SnippetString('checkButtonIsSelectableWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", BUTTON_NAME = "$3", SHOULD_BE = "$4")');
                checkButtonIsSelectableWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando klickt auf einen Button anhand dessen Namen.');
                items.push(checkButtonIsSelectableWinEleCommandCompletion);

                const checkCheckboxIsSelectableWinEleCommandCompletion = new vscode.CompletionItem('checkCheckboxIsSelectableWinEle');
                checkCheckboxIsSelectableWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkCheckboxIsSelectableWinEleCommandCompletion.insertText = new vscode.SnippetString('checkCheckboxIsSelectableWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", SHOULD_BE = "$3")');
                checkCheckboxIsSelectableWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando prüft, ob eine Checkbox selektierbar ist.');
                items.push(checkCheckboxIsSelectableWinEleCommandCompletion);

                const checkCheckboxIsSelectedWinEleCommandCompletion = new vscode.CompletionItem('checkCheckboxIsSelectedWinEle');
                checkCheckboxIsSelectedWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkCheckboxIsSelectedWinEleCommandCompletion.insertText = new vscode.SnippetString('checkCheckboxIsSelectedWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", SHOULD_BE = "$3")');
                checkCheckboxIsSelectedWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando prüft, ob eine Checkbox selektiert ist.');
                items.push(checkCheckboxIsSelectedWinEleCommandCompletion);

                const checkCheckboxSelectedWebCommandCompletion = new vscode.CompletionItem('checkCheckboxSelectedWeb');
                checkCheckboxSelectedWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkCheckboxSelectedWebCommandCompletion.insertText = new vscode.SnippetString('checkCheckboxSelectedWeb(BY_CRITERIA = "$1", ELEMENT_NAME = "$2")');
                checkCheckboxSelectedWebCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando überprüft, ob ein Element auf einer Webseite ausgewählt ist.');
                items.push(checkCheckboxSelectedWebCommandCompletion);

                const checkCheckboxWinEleCommandCompletion = new vscode.CompletionItem('checkCheckboxWinEle');
                checkCheckboxWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkCheckboxWinEleCommandCompletion.insertText = new vscode.SnippetString('checkCheckboxWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2")');
                checkCheckboxWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando aktiviert eine Checkbox.');
                items.push(checkCheckboxWinEleCommandCompletion);

                const checkCurrentActivityAndroidCommandCompletion = new vscode.CompletionItem('checkCurrentActivityAndroid');
                checkCurrentActivityAndroidCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkCurrentActivityAndroidCommandCompletion.insertText = new vscode.SnippetString('checkCurrentActivityAndroid(EXPECTED_ACTIVITY_NAME = "$1")');
                checkCurrentActivityAndroidCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando überprüft, ob eine gewisse Activity aktiv ist. ');
                items.push(checkCurrentActivityAndroidCommandCompletion);

                const checkDriverActiveCommandCompletion = new vscode.CompletionItem('checkDriverActive');
                checkDriverActiveCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkDriverActiveCommandCompletion.insertText = new vscode.SnippetString('checkDriverActive(BROWSER_ABBREVIATION = "$1")');
                checkDriverActiveCommandCompletion.documentation = new vscode.MarkdownString('Mit diesem Command kann überprüft werden, ob ein Treiber mit einem entsprechenden Alias bekannt ist. Dies bedeutet nicht zwangsläufig, dass der Treiber noch funktionsfähig ist, falls die Session bereits beendet wurde.');
                items.push(checkDriverActiveCommandCompletion);

                const checkDropDownIsSelectableWinEleCommandCompletion = new vscode.CompletionItem('checkDropDownIsSelectableWinEle');
                checkDropDownIsSelectableWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkDropDownIsSelectableWinEleCommandCompletion.insertText = new vscode.SnippetString('checkDropDownIsSelectableWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", SHOULD_BE = "$3")');
                checkDropDownIsSelectableWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando prüft, ob ein Dropdown Menü selektierbar ist.');
                items.push(checkDropDownIsSelectableWinEleCommandCompletion);

                const checkElementActiveWebCommandCompletion = new vscode.CompletionItem('checkElementActiveWeb');
                checkElementActiveWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkElementActiveWebCommandCompletion.insertText = new vscode.SnippetString('checkElementActiveWeb(BY_CRITERIA = "$1", ELEMENT_NAME = "$2")');
                checkElementActiveWebCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob ein Element das gerade aktive Element auf der Seite ist. Das heißt, dass dieses gerade das im Fokus stehende Element ist.');
                items.push(checkElementActiveWebCommandCompletion);

                const checkElementAttributeEqualsWebCommandCompletion = new vscode.CompletionItem('checkElementAttributeEqualsWeb');
                checkElementAttributeEqualsWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkElementAttributeEqualsWebCommandCompletion.insertText = new vscode.SnippetString('checkElementAttributeEqualsWeb(BY_CRITERIA = "$1", ELEMENT_NAME = "$2", TEXT_EQUALS = "$3", ATTRIBUTE_NAME = "$4")');
                checkElementAttributeEqualsWebCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob ein Element ein Attribut enthält, dessen Wert dem angebenen Wert (TEXT_EQUALS) entsprechen muss.');
                items.push(checkElementAttributeEqualsWebCommandCompletion);

                const checkElementCssEqualsWebCommandCompletion = new vscode.CompletionItem('checkElementCssEqualsWeb');
                checkElementCssEqualsWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkElementCssEqualsWebCommandCompletion.insertText = new vscode.SnippetString('checkElementCssEqualsWeb(BY_CRITERIA = "$1", ELEMENT_NAME = "$2", TEXT_EQUALS = "$3", CSS_ATTRIBUTE_NAME = "$4")');
                checkElementCssEqualsWebCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob ein Element ein CSS-Attribut enthält, dessen Wert dem angegebenen Wert (TEXT_EQUALS) entsprechen muss.');
                items.push(checkElementCssEqualsWebCommandCompletion);

                const checkElementEnabledWebCommandCompletion = new vscode.CompletionItem('checkElementEnabledWeb');
                checkElementEnabledWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkElementEnabledWebCommandCompletion.insertText = new vscode.SnippetString('checkElementEnabledWeb(BY_CRITERIA = "$1", ELEMENT_NAME = "$2")');
                checkElementEnabledWebCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob ein Element auf einer Webseite aktiviert ist. Damit ist es auch vorhanden und sichtbar. Aktiviert heisst, dass das Element z.B. angeklickt werden oder ein Text reingeschrieben werden kann.');
                items.push(checkElementEnabledWebCommandCompletion);

                const checkElementNotPresentCommandCompletion = new vscode.CompletionItem('checkElementNotPresent');
                checkElementNotPresentCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkElementNotPresentCommandCompletion.insertText = new vscode.SnippetString('checkElementNotPresent(BY_CRITERIA = "$1", ELEMENT_NAME = "$2")');
                checkElementNotPresentCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob ein Element auf einer Webseite nicht vorhanden ist. Die Überprüfung macht insbesondere dann Sinn, wenn ein Element (z.B. in einer Liste) zuvor vorhanden war.');
                items.push(checkElementNotPresentCommandCompletion);

                const checkElementNotPresentWebCommandCompletion = new vscode.CompletionItem('checkElementNotPresentWeb');
                checkElementNotPresentWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkElementNotPresentWebCommandCompletion.insertText = new vscode.SnippetString('checkElementNotPresentWeb(BY_CRITERIA = "$1", ELEMENT_NAME = "$2")');
                checkElementNotPresentWebCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob ein Element auf einer Webseite nicht vorhanden ist. Die Überprüfung macht insbesondere dann Sinn, wenn ein Element (z.B. in einer Liste) zuvor vorhanden war.');
                items.push(checkElementNotPresentWebCommandCompletion);

                const checkElementPresentCommandCompletion = new vscode.CompletionItem('checkElementPresent');
                checkElementPresentCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkElementPresentCommandCompletion.insertText = new vscode.SnippetString('checkElementPresent(BY_CRITERIA = "$1", ELEMENT_NAME = "$2")');
                checkElementPresentCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob ein Element auf einer Webseite vorhanden ist. D.h. nicht, dass das Element sichtbar oder aktiv sein muss.');
                items.push(checkElementPresentCommandCompletion);

                const checkElementPresentWebCommandCompletion = new vscode.CompletionItem('checkElementPresentWeb');
                checkElementPresentWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkElementPresentWebCommandCompletion.insertText = new vscode.SnippetString('checkElementPresentWeb(BY_CRITERIA = "$1", ELEMENT_NAME = "$2")');
                checkElementPresentWebCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob ein Element auf einer Webseite vorhanden ist. D.h. nicht, dass das Element sichtbar oder aktiv sein muss.');
                items.push(checkElementPresentWebCommandCompletion);

                const checkElementSelectedWebCommandCompletion = new vscode.CompletionItem('checkElementSelectedWeb');
                checkElementSelectedWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkElementSelectedWebCommandCompletion.insertText = new vscode.SnippetString('checkElementSelectedWeb(BY_CRITERIA = "$1", ELEMENT_NAME = "$2")');
                checkElementSelectedWebCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando überprüft, ob ein Element auf einer Webseite ausgewählt ist.');
                items.push(checkElementSelectedWebCommandCompletion);

                const checkElementTextEqualsWebCommandCompletion = new vscode.CompletionItem('checkElementTextEqualsWeb');
                checkElementTextEqualsWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkElementTextEqualsWebCommandCompletion.insertText = new vscode.SnippetString('checkElementTextEqualsWeb(BY_CRITERIA = "$1", ELEMENT_NAME = "$2")');
                checkElementTextEqualsWebCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob ein Element den übergebenen Text enthält.');
                items.push(checkElementTextEqualsWebCommandCompletion);

                const checkElementVisibleWebCommandCompletion = new vscode.CompletionItem('checkElementVisibleWeb');
                checkElementVisibleWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkElementVisibleWebCommandCompletion.insertText = new vscode.SnippetString('checkElementVisibleWeb(BY_CRITERIA = "$1", ELEMENT_NAME = "$2")');
                checkElementVisibleWebCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob ein Element auf einer Webseite sichtbar ist. Damit ist es vorhanden aber nicht zwingend auch aktiv.');
                items.push(checkElementVisibleWebCommandCompletion);

                const checkFileContentCommandCompletion = new vscode.CompletionItem('checkFileContent');
                checkFileContentCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkFileContentCommandCompletion.insertText = new vscode.SnippetString('checkFileContent(FILENAME = "$1", TEXT_EQUALS = "$2")');
                checkFileContentCommandCompletion.documentation = new vscode.MarkdownString('Kommando sucht innerhalb einer Datei zeilenbasiert nach einem bestimmten String.     Zunächst wird die gesamte Datei durchsucht.     Im Nachgang werden für waitTimeMillis noch neue Daten verarbeitet.     Wird der String an irgendeiner Stelle gefunden, so wird die Suche unmittelbar beendet und das Ergebnis "Erfolg" zurückgemeldet.');
                items.push(checkFileContentCommandCompletion);

                const checkFileExistsCommandCompletion = new vscode.CompletionItem('checkFileExists');
                checkFileExistsCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkFileExistsCommandCompletion.insertText = new vscode.SnippetString('checkFileExists(FILENAME = "$1")');
                checkFileExistsCommandCompletion.documentation = new vscode.MarkdownString('Sucht nach einer Datei und schließt mit dem Status "Erfolg" ab, falls diese gefunden wurde.    Das Kommando lässt sich in Bedingungen einsetzen, um Prozesse zu steuern.');
                items.push(checkFileExistsCommandCompletion);

                const checkIfFileExistsCommandCompletion = new vscode.CompletionItem('checkIfFileExists');
                checkIfFileExistsCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkIfFileExistsCommandCompletion.insertText = new vscode.SnippetString('checkIfFileExists(FILENAME = "$1")');
                checkIfFileExistsCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob eine Datei vorhanden ist.');
                items.push(checkIfFileExistsCommandCompletion);

                const checkIfStorageVariableIsSetCommandCompletion = new vscode.CompletionItem('checkIfStorageVariableIsSet');
                checkIfStorageVariableIsSetCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkIfStorageVariableIsSetCommandCompletion.insertText = new vscode.SnippetString('checkIfStorageVariableIsSet(STORAGE_VARIABLE = "$1")');
                checkIfStorageVariableIsSetCommandCompletion.documentation = new vscode.MarkdownString('Überprüft ob eine Storage Variable gesetzt ist und ob diese leer bzw. nicht leer ist.');
                items.push(checkIfStorageVariableIsSetCommandCompletion);

                const checkIfWindowExistsCommandCompletion = new vscode.CompletionItem('checkIfWindowExists');
                checkIfWindowExistsCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkIfWindowExistsCommandCompletion.insertText = new vscode.SnippetString('checkIfWindowExists(WINDOW_NAME = "$1")');
                checkIfWindowExistsCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob ein Fenster vorhanden ist.');
                items.push(checkIfWindowExistsCommandCompletion);

                const checkRadioButtonIsSelectableWinEleCommandCompletion = new vscode.CompletionItem('checkRadioButtonIsSelectableWinEle');
                checkRadioButtonIsSelectableWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkRadioButtonIsSelectableWinEleCommandCompletion.insertText = new vscode.SnippetString('checkRadioButtonIsSelectableWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", SHOULD_BE = "$3")');
                checkRadioButtonIsSelectableWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando prüft, ob ein Radio-Button selektierbar ist.');
                items.push(checkRadioButtonIsSelectableWinEleCommandCompletion);

                const checkRadioButtonIsSelectedWinEleCommandCompletion = new vscode.CompletionItem('checkRadioButtonIsSelectedWinEle');
                checkRadioButtonIsSelectedWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkRadioButtonIsSelectedWinEleCommandCompletion.insertText = new vscode.SnippetString('checkRadioButtonIsSelectedWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", SHOULD_BE = "$3")');
                checkRadioButtonIsSelectedWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando prüft, ob ein Radio-Button selektiert ist.');
                items.push(checkRadioButtonIsSelectedWinEleCommandCompletion);

                const checkRadioButtonWinEleCommandCompletion = new vscode.CompletionItem('checkRadioButtonWinEle');
                checkRadioButtonWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkRadioButtonWinEleCommandCompletion.insertText = new vscode.SnippetString('checkRadioButtonWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2")');
                checkRadioButtonWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando aktiviert einen Radio-Button.');
                items.push(checkRadioButtonWinEleCommandCompletion);

                const checkResultByImageCPCommandCompletion = new vscode.CompletionItem('checkResultByImageCP');
                checkResultByImageCPCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkResultByImageCPCommandCompletion.insertText = new vscode.SnippetString('checkResultByImageCP(IMAGE_PATH = "$1")');
                checkResultByImageCPCommandCompletion.documentation = new vscode.MarkdownString('Mit Hilfe dieses Kommandos wird ein Ergebnis anhand eines Bildes sichergestellt. Wenn das angegebene Bild in dem Fenster gefunden wird, ist das Ergebnis der Ueberpruefung positiv.');
                items.push(checkResultByImageCPCommandCompletion);

                const checkResultByImageWinCommandCompletion = new vscode.CompletionItem('checkResultByImageWin');
                checkResultByImageWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkResultByImageWinCommandCompletion.insertText = new vscode.SnippetString('checkResultByImageWin(WINDOW_NAME = "$1", IMAGE_RELATIVE_PATH = "$2")');
                checkResultByImageWinCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob in einem Fenster ein Bild gefunden werden kann.');
                items.push(checkResultByImageWinCommandCompletion);

                const checkResultByTextWinCommandCompletion = new vscode.CompletionItem('checkResultByTextWin');
                checkResultByTextWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkResultByTextWinCommandCompletion.insertText = new vscode.SnippetString('checkResultByTextWin(WINDOW_NAME = "$1", TEXT_EQUALS = "$2")');
                checkResultByTextWinCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob in einem Fenster ein Text enthalten ist. Betrachtet wird das gesamte Fenster.');
                items.push(checkResultByTextWinCommandCompletion);

                const checkResultWebCommandCompletion = new vscode.CompletionItem('checkResultWeb');
                checkResultWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkResultWebCommandCompletion.insertText = new vscode.SnippetString('checkResultWeb(TEXT_EQUALS = "$1")');
                checkResultWebCommandCompletion.documentation = new vscode.MarkdownString('Prüft, ob der übergebene Text mit dem Text des Elements bzw. der Webseite identisch ist.     Wenn nur der Pflichtparameter "TEXT_EQUALS" benutzt wird, wird der Text der gesamten Webseite untersucht.    Wenn BY_CRITERIA und ELEMENT_NAME angegeben wurden, wird in einem konkreten Element gesucht wird.');
                items.push(checkResultWebCommandCompletion);

                const checkTextOnCitrixTextFieldCommandCompletion = new vscode.CompletionItem('checkTextOnCitrixTextField');
                checkTextOnCitrixTextFieldCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkTextOnCitrixTextFieldCommandCompletion.insertText = new vscode.SnippetString('checkTextOnCitrixTextField(WINDOW_NAME = "$1", IMAGE_RELATIVE_PATH = "$2", TEXT_EQUALS = "$3")');
                checkTextOnCitrixTextFieldCommandCompletion.documentation = new vscode.MarkdownString('Prüft den Text eines Textfeldes inhaltlich auf einen Prüf-String. Nutzt dazu AutoHotkey für eine Kopie in die Zwischenablage.');
                items.push(checkTextOnCitrixTextFieldCommandCompletion);

                const checkTextboxReadOnlyFocussedWinEleCommandCompletion = new vscode.CompletionItem('checkTextboxReadOnlyFocussedWinEle');
                checkTextboxReadOnlyFocussedWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                checkTextboxReadOnlyFocussedWinEleCommandCompletion.insertText = new vscode.SnippetString('checkTextboxReadOnlyFocussedWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", SHOULD_BE = "$3")');
                checkTextboxReadOnlyFocussedWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando prüft, ob das fokussierte Textfeld die Eigenschaft "readOnly" besitzt und vergleicht das Ergebnis mit dem Parameter SHOULD_BE (true/false).');
                items.push(checkTextboxReadOnlyFocussedWinEleCommandCompletion);

                const clearFullscreenImageRendererCommandCompletion = new vscode.CompletionItem('clearFullscreenImageRenderer');
                clearFullscreenImageRendererCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clearFullscreenImageRendererCommandCompletion.insertText = new vscode.SnippetString('clearFullscreenImageRenderer()');
                clearFullscreenImageRendererCommandCompletion.documentation = new vscode.MarkdownString('Versteckt alle aktuell angezeigten Bilder. ');
                items.push(clearFullscreenImageRendererCommandCompletion);

                const clearOverlayImageRendererCommandCompletion = new vscode.CompletionItem('clearOverlayImageRenderer');
                clearOverlayImageRendererCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clearOverlayImageRendererCommandCompletion.insertText = new vscode.SnippetString('clearOverlayImageRenderer()');
                clearOverlayImageRendererCommandCompletion.documentation = new vscode.MarkdownString('Versteckt alle aktuell angezeigten Bilder. ');
                items.push(clearOverlayImageRendererCommandCompletion);

                const clearStorageCommandCompletion = new vscode.CompletionItem('clearStorage');
                clearStorageCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clearStorageCommandCompletion.insertText = new vscode.SnippetString('clearStorage()');
                clearStorageCommandCompletion.documentation = new vscode.MarkdownString('Leert die Storage Datei.');
                items.push(clearStorageCommandCompletion);

                const clearStorageValueCommandCompletion = new vscode.CompletionItem('clearStorageValue');
                clearStorageValueCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clearStorageValueCommandCompletion.insertText = new vscode.SnippetString('clearStorageValue(TARGET_STORAGE_KEY = "$1")');
                clearStorageValueCommandCompletion.documentation = new vscode.MarkdownString('Löscht eine Laufzeitvariable. ');
                items.push(clearStorageValueCommandCompletion);

                const clearTextRendererCommandCompletion = new vscode.CompletionItem('clearTextRenderer');
                clearTextRendererCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clearTextRendererCommandCompletion.insertText = new vscode.SnippetString('clearTextRenderer()');
                clearTextRendererCommandCompletion.documentation = new vscode.MarkdownString('Versteckt alle aktuell angezeigten Texte. ');
                items.push(clearTextRendererCommandCompletion);

                const clearTextWebCommandCompletion = new vscode.CompletionItem('clearTextWeb');
                clearTextWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clearTextWebCommandCompletion.insertText = new vscode.SnippetString('clearTextWeb(ELEMENT_NAME = "$1")');
                clearTextWebCommandCompletion.documentation = new vscode.MarkdownString('Löscht den Inhalt des angegebenen Elements (z. B. Textfeld).');
                items.push(clearTextWebCommandCompletion);

                const clickButtonAutomIdWinEleCommandCompletion = new vscode.CompletionItem('clickButtonAutomIdWinEle');
                clickButtonAutomIdWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickButtonAutomIdWinEleCommandCompletion.insertText = new vscode.SnippetString('clickButtonAutomIdWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", BUTTON_AUTOMATION_ID = "$3")');
                clickButtonAutomIdWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando klickt auf einen Button anhand dessen Automation-ID.');
                items.push(clickButtonAutomIdWinEleCommandCompletion);

                const clickButtonWinEleCommandCompletion = new vscode.CompletionItem('clickButtonWinEle');
                clickButtonWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickButtonWinEleCommandCompletion.insertText = new vscode.SnippetString('clickButtonWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", BUTTON_NAME = "$3")');
                clickButtonWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando klickt auf einen Button anhand dessen Namen.');
                items.push(clickButtonWinEleCommandCompletion);

                const clickByIdWebCommandCompletion = new vscode.CompletionItem('clickByIdWeb');
                clickByIdWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickByIdWebCommandCompletion.insertText = new vscode.SnippetString('clickByIdWeb(ELEMENT_NAME = "$1")');
                clickByIdWebCommandCompletion.documentation = new vscode.MarkdownString('Klickt auf ein Web-Element anhand seiner ID. Achtung! Einige Frameworks erzeugen für Elemente IDs zur Laufzeit. Dadurch sind diese nach Server-Neustarts oder auch nach Seiten-Neuaufrufen unterschiedlich.');
                items.push(clickByIdWebCommandCompletion);

                const clickByTextJavaCommandCompletion = new vscode.CompletionItem('clickByTextJava');
                clickByTextJavaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickByTextJavaCommandCompletion.insertText = new vscode.SnippetString('clickByTextJava(TARGET = "$1")');
                clickByTextJavaCommandCompletion.documentation = new vscode.MarkdownString('Klickt ein angegebenes Element einer Java Anwendung an.');
                items.push(clickByTextJavaCommandCompletion);

                const clickByTextWebCommandCompletion = new vscode.CompletionItem('clickByTextWeb');
                clickByTextWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickByTextWebCommandCompletion.insertText = new vscode.SnippetString('clickByTextWeb(ELEMENT_NAME = "$1")');
                clickByTextWebCommandCompletion.documentation = new vscode.MarkdownString('Klickt auf einen Link, der anhand seines Linktextes ermittelt wird.');
                items.push(clickByTextWebCommandCompletion);

                const clickCoordinateWinCommandCompletion = new vscode.CompletionItem('clickCoordinateWin');
                clickCoordinateWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickCoordinateWinCommandCompletion.insertText = new vscode.SnippetString('clickCoordinateWin(WINDOW_NAME = "$1", X = "$2", Y = "$3")');
                clickCoordinateWinCommandCompletion.documentation = new vscode.MarkdownString('Klickt auf eine feste Koordinate innerhalb eines Fensters. Sehr schnell und sehr fehleranfällig.');
                items.push(clickCoordinateWinCommandCompletion);

                const clickCursorWinCommandCompletion = new vscode.CompletionItem('clickCursorWin');
                clickCursorWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickCursorWinCommandCompletion.insertText = new vscode.SnippetString('clickCursorWin(WINDOW_NAME = "$1")');
                clickCursorWinCommandCompletion.documentation = new vscode.MarkdownString('Klickt auf die Position in einem Fenster, an der sich der Cursor aktuell befindet.');
                items.push(clickCursorWinCommandCompletion);

                const clickImageCPCommandCompletion = new vscode.CompletionItem('clickImageCP');
                clickImageCPCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickImageCPCommandCompletion.insertText = new vscode.SnippetString('clickImageCP(IMAGE_PATH = "$1")');
                clickImageCPCommandCompletion.documentation = new vscode.MarkdownString('Sucht ein Bild in einem Fenster und klickt bei erfolgreicher Suche auf dessen Mittelpunkt');
                items.push(clickImageCPCommandCompletion);

                const clickImageWinCommandCompletion = new vscode.CompletionItem('clickImageWin');
                clickImageWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickImageWinCommandCompletion.insertText = new vscode.SnippetString('clickImageWin(WINDOW_NAME = "$1", IMAGE_RELATIVE_PATH = "$2")');
                clickImageWinCommandCompletion.documentation = new vscode.MarkdownString('Klickt auf eine Position in einem Fenster, die anhand eines Bildes gefunden wird. Geklickt wird auf die Mitte des Bildes.');
                items.push(clickImageWinCommandCompletion);

                const clickItemByTextJavaCommandCompletion = new vscode.CompletionItem('clickItemByTextJava');
                clickItemByTextJavaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickItemByTextJavaCommandCompletion.insertText = new vscode.SnippetString('clickItemByTextJava(TARGET = "$1", TEXT = "$2")');
                clickItemByTextJavaCommandCompletion.documentation = new vscode.MarkdownString('Klickt ein angegebenes Element innerhalb einer Liste, Trees oder Tabelle einer Java Anwendung an.');
                items.push(clickItemByTextJavaCommandCompletion);

                const clickJavaCommandCompletion = new vscode.CompletionItem('clickJava');
                clickJavaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickJavaCommandCompletion.insertText = new vscode.SnippetString('clickJava(TARGET = "$1")');
                clickJavaCommandCompletion.documentation = new vscode.MarkdownString('Klickt ein angegebenes Element einer Java Anwendung an.');
                items.push(clickJavaCommandCompletion);

                const clickJsWebCommandCompletion = new vscode.CompletionItem('clickJsWeb');
                clickJsWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickJsWebCommandCompletion.insertText = new vscode.SnippetString('clickJsWeb(ELEMENT_NAME = "$1")');
                clickJsWebCommandCompletion.documentation = new vscode.MarkdownString('Klickt auf ein Element. Verwendet dazu intern JavaScript. Kann insbesondere bei Verwendung von JS-Path und Shadow-DOM hilfreich sein');
                items.push(clickJsWebCommandCompletion);

                const clickMenuAutomIdWinEleCommandCompletion = new vscode.CompletionItem('clickMenuAutomIdWinEle');
                clickMenuAutomIdWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickMenuAutomIdWinEleCommandCompletion.insertText = new vscode.SnippetString('clickMenuAutomIdWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", MENUBAR_NAME = "$3", MENU_AUTOMATION_ID = "$4", MENU_ITEM_AUTOMATION_ID = "$5")');
                clickMenuAutomIdWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando klickt auf eine Menüauswahl anhand der Automation-ID.');
                items.push(clickMenuAutomIdWinEleCommandCompletion);

                const clickMenuWinEleCommandCompletion = new vscode.CompletionItem('clickMenuWinEle');
                clickMenuWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickMenuWinEleCommandCompletion.insertText = new vscode.SnippetString('clickMenuWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", MENUBAR_NAME = "$3", MENU_NAME = "$4", MENU_ITEM_NAME = "$5")');
                clickMenuWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando klickt auf einen Menüpunkt anhand dessen Namen.');
                items.push(clickMenuWinEleCommandCompletion);

                const clickMenuWindowWinCommandCompletion = new vscode.CompletionItem('clickMenuWindowWin');
                clickMenuWindowWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickMenuWindowWinCommandCompletion.insertText = new vscode.SnippetString('clickMenuWindowWin(WINDOW_NAME = "$1", MENU_IMAGE_RELATIVE_PATH = "$2", WAIT_TIME_BETWEEN_CLICKS = "$3", SUBMENU_IMAGE_RELATIVE_PATH = "$4")');
                clickMenuWindowWinCommandCompletion.documentation = new vscode.MarkdownString('Öffnet ein Menü und klickt dann auf einen angegebenen Untermenüpunkt.');
                items.push(clickMenuWindowWinCommandCompletion);

                const clickTabWinEleCommandCompletion = new vscode.CompletionItem('clickTabWinEle');
                clickTabWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickTabWinEleCommandCompletion.insertText = new vscode.SnippetString('clickTabWinEle(PROCESS_NAME = "$1", WINDOW_NAME = "$2", TAB_NAME = "$3")');
                clickTabWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando klickt auf einen Tab anhand dessen Namen.');
                items.push(clickTabWinEleCommandCompletion);

                const clickTextInPictureCommandCompletion = new vscode.CompletionItem('clickTextInPicture');
                clickTextInPictureCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickTextInPictureCommandCompletion.insertText = new vscode.SnippetString('clickTextInPicture(WINDOW_NAME = "$1", TEXT_TO_CLICK = "$2")');
                clickTextInPictureCommandCompletion.documentation = new vscode.MarkdownString('Untersucht ein Bild oder einen Ausschnitt und klickt auf die Position des angegebenen Textes.');
                items.push(clickTextInPictureCommandCompletion);

                const clickWebCommandCompletion = new vscode.CompletionItem('clickWeb');
                clickWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickWebCommandCompletion.insertText = new vscode.SnippetString('clickWeb(ELEMENT_NAME = "$1")');
                clickWebCommandCompletion.documentation = new vscode.MarkdownString('Klickt auf ein Element der geöffneten Browser-Seite.');
                items.push(clickWebCommandCompletion);

                const clickWebFastCommandCompletion = new vscode.CompletionItem('clickWebFast');
                clickWebFastCommandCompletion.kind = vscode.CompletionItemKind.Function;
                clickWebFastCommandCompletion.insertText = new vscode.SnippetString('clickWebFast(ELEMENT_NAME = "$1")');
                clickWebFastCommandCompletion.documentation = new vscode.MarkdownString('Klickt auf ein Element, ohne auf seine Existenz zu warten. Ist daher nicht immer stabil!');
                items.push(clickWebFastCommandCompletion);

                const closeApplicationCommandCompletion = new vscode.CompletionItem('closeApplication');
                closeApplicationCommandCompletion.kind = vscode.CompletionItemKind.Function;
                closeApplicationCommandCompletion.insertText = new vscode.SnippetString('closeApplication(TITLE = "$1")');
                closeApplicationCommandCompletion.documentation = new vscode.MarkdownString('Schließt eine Anwendung.');
                items.push(closeApplicationCommandCompletion);

                const closeApplicationCPCommandCompletion = new vscode.CompletionItem('closeApplicationCP');
                closeApplicationCPCommandCompletion.kind = vscode.CompletionItemKind.Function;
                closeApplicationCPCommandCompletion.insertText = new vscode.SnippetString('closeApplicationCP(WINDOW_NAME = "$1")');
                closeApplicationCPCommandCompletion.documentation = new vscode.MarkdownString('Schließt eine Applikation anhand des Fenster-Namens.');
                items.push(closeApplicationCPCommandCompletion);

                const closeApplicationWinCommandCompletion = new vscode.CompletionItem('closeApplicationWin');
                closeApplicationWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                closeApplicationWinCommandCompletion.insertText = new vscode.SnippetString('closeApplicationWin(WINDOW_NAME = "$1")');
                closeApplicationWinCommandCompletion.documentation = new vscode.MarkdownString('Schließt eine Windows-Anwendung.');
                items.push(closeApplicationWinCommandCompletion);

                const closeApplicationWinEleCommandCompletion = new vscode.CompletionItem('closeApplicationWinEle');
                closeApplicationWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                closeApplicationWinEleCommandCompletion.insertText = new vscode.SnippetString('closeApplicationWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2")');
                closeApplicationWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando schließt eine Windows-Anwendung.');
                items.push(closeApplicationWinEleCommandCompletion);

                const closeSqlCommandCompletion = new vscode.CompletionItem('closeSql');
                closeSqlCommandCompletion.kind = vscode.CompletionItemKind.Function;
                closeSqlCommandCompletion.insertText = new vscode.SnippetString('closeSql(CONNECTION_NAME = "$1")');
                closeSqlCommandCompletion.documentation = new vscode.MarkdownString('Schließt eine bestehende Datenbankverbindung.');
                items.push(closeSqlCommandCompletion);

                const cobol2XmlCommandCompletion = new vscode.CompletionItem('cobol2Xml');
                cobol2XmlCommandCompletion.kind = vscode.CompletionItemKind.Function;
                cobol2XmlCommandCompletion.insertText = new vscode.SnippetString('cobol2Xml(INPUT_BIN = "$1", COPYBOOK = "$2", OUTPUT_XML = "$3")');
                cobol2XmlCommandCompletion.documentation = new vscode.MarkdownString('Kommando zum übersetzen einer Host XML mittels Copybook in eine binär-Datei. Es wird CP037 als Ausgabedialekt verwendet.');
                items.push(cobol2XmlCommandCompletion);

                const comfortClickWinCommandCompletion = new vscode.CompletionItem('comfortClickWin');
                comfortClickWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                comfortClickWinCommandCompletion.insertText = new vscode.SnippetString('comfortClickWin(WINDOW_NAME = "$1", RELATIVE_PATH_IMAGE = "$2")');
                comfortClickWinCommandCompletion.documentation = new vscode.MarkdownString('Zusammenfassung mehrerer Kommandos. Es wird auf ein Fenster gewartet und innerhalb dieses Fensters ein Bild erwartet. Wenn dieses Bild vorhanden ist, wird die entsprechende Position angeklickt. Wird all das nicht innerhalb der angebenen Zeitspanne geschafft, wird ein Fehler ausgegeben.');
                items.push(comfortClickWinCommandCompletion);

                const comfortSendTextWinCommandCompletion = new vscode.CompletionItem('comfortSendTextWin');
                comfortSendTextWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                comfortSendTextWinCommandCompletion.insertText = new vscode.SnippetString('comfortSendTextWin(WINDOW_NAME = "$1", TEXT_TO_SEND = "$2")');
                comfortSendTextWinCommandCompletion.documentation = new vscode.MarkdownString('Zusammenfassung mehrerer Kommandos. Es wird auf ein Fenster gewartet und innerhalb dieses Fensters ein Bild erwartet. Wenn dieses Bild vorhanden ist, wird die entsprechende Position angeklickt. Danach wird ein Text an das Fenster übergeben. Wird all das nicht innerhalb der angegebenen Zeitspanne geschafft, wird ein Fehler ausgegeben.');
                items.push(comfortSendTextWinCommandCompletion);

                const comfortWaitWindowCommandCompletion = new vscode.CompletionItem('comfortWaitWindow');
                comfortWaitWindowCommandCompletion.kind = vscode.CompletionItemKind.Function;
                comfortWaitWindowCommandCompletion.insertText = new vscode.SnippetString('comfortWaitWindow(WINDOW_NAME = "$1")');
                comfortWaitWindowCommandCompletion.documentation = new vscode.MarkdownString('Wartet auf ein Fenster. Erscheint das Fenster nicht in der angebenen Zeitspanne, wird ein Fehler gemeldet.');
                items.push(comfortWaitWindowCommandCompletion);

                const commentCommandCompletion = new vscode.CompletionItem('comment');
                commentCommandCompletion.kind = vscode.CompletionItemKind.Function;
                commentCommandCompletion.insertText = new vscode.SnippetString('comment(TEXT = "$1")');
                commentCommandCompletion.documentation = new vscode.MarkdownString('Ermöglicht einen kontextbezogenen Kommentar in die Testdokumentation einzufügen. Schließt mit dem Ergebnislevel "NoRun" ab.');
                items.push(commentCommandCompletion);

                const compareChangesSqlCommandCompletion = new vscode.CompletionItem('compareChangesSql');
                compareChangesSqlCommandCompletion.kind = vscode.CompletionItemKind.Function;
                compareChangesSqlCommandCompletion.insertText = new vscode.SnippetString('compareChangesSql(CONNECTION_NAME = "$1", TABLE_BEFORE = "$2", TABLE_AFTER = "$3", PRIMARY_KEYS = "$4")');
                compareChangesSqlCommandCompletion.documentation = new vscode.MarkdownString('Vergleicht zwei Tabellen zeilenweise auf Unterschiede zueinander, z.B. nach einer ETL-Transformation. Beide Tabellen müssen die gleichen Spalten haben.     Die Werte in den Primärschlüsselspalten zwischen zwei miteinander zu vergleichenden Zeilen in den jeweiligen Tabellen dürfen sich nicht voneinander unterscheiden.');
                items.push(compareChangesSqlCommandCompletion);

                const compareTextCommandCompletion = new vscode.CompletionItem('compareText');
                compareTextCommandCompletion.kind = vscode.CompletionItemKind.Function;
                compareTextCommandCompletion.insertText = new vscode.SnippetString('compareText(TEXT1 = "$1", TEXT2 = "$2")');
                compareTextCommandCompletion.documentation = new vscode.MarkdownString('Vergleicht zwei Texte/Textdateien und gibt Zeilen mit unterschiedlichem Inhalt zurück. Die Zählung der Zeilen beginnt bei 1.');
                items.push(compareTextCommandCompletion);

                const containsAlphaCommandCompletion = new vscode.CompletionItem('containsAlpha');
                containsAlphaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                containsAlphaCommandCompletion.insertText = new vscode.SnippetString('containsAlpha(TEXT = "$1", VALUE = "$2")');
                containsAlphaCommandCompletion.documentation = new vscode.MarkdownString('Prüft, ob ein Wert in einem Text enthalten ist. Falls ja, gibt er true zurück, sonst false');
                items.push(containsAlphaCommandCompletion);

                const continueCommandCompletion = new vscode.CompletionItem('continue');
                continueCommandCompletion.kind = vscode.CompletionItemKind.Function;
                continueCommandCompletion.insertText = new vscode.SnippetString('continue()');
                continueCommandCompletion.documentation = new vscode.MarkdownString('Die atkuelle Schleifen-Iteration wird verlassen und die Ausführung wird bei der nächsten Schleifen-Iteration fortgesetzt.');
                items.push(continueCommandCompletion);

                const controlClickCommandCompletion = new vscode.CompletionItem('controlClick');
                controlClickCommandCompletion.kind = vscode.CompletionItemKind.Function;
                controlClickCommandCompletion.insertText = new vscode.SnippetString('controlClick(WINDOW_NAME = "$1", CONTROL = "$2")');
                controlClickCommandCompletion.documentation = new vscode.MarkdownString('Sendet einen Mausklick-Befehl an das angegebene Control.');
                items.push(controlClickCommandCompletion);

                const controlCommandCommandCompletion = new vscode.CompletionItem('controlCommand');
                controlCommandCommandCompletion.kind = vscode.CompletionItemKind.Function;
                controlCommandCommandCompletion.insertText = new vscode.SnippetString('controlCommand(WINDOW_NAME = "$1", CONTROL = "$2", MODE = "$3")');
                controlCommandCommandCompletion.documentation = new vscode.MarkdownString('Sendet einen Control Command an das angegebene Control. (https://www.autoitscript.com/autoit3/docs/functions/ControlCommand.htm)');
                items.push(controlCommandCommandCompletion);

                const controlDisableCommandCompletion = new vscode.CompletionItem('controlDisable');
                controlDisableCommandCompletion.kind = vscode.CompletionItemKind.Function;
                controlDisableCommandCompletion.insertText = new vscode.SnippetString('controlDisable(WINDOW_NAME = "$1", CONTROL = "$2")');
                controlDisableCommandCompletion.documentation = new vscode.MarkdownString('Deaktiviert ein bestimmtes Control.');
                items.push(controlDisableCommandCompletion);

                const controlDoubleClickCommandCompletion = new vscode.CompletionItem('controlDoubleClick');
                controlDoubleClickCommandCompletion.kind = vscode.CompletionItemKind.Function;
                controlDoubleClickCommandCompletion.insertText = new vscode.SnippetString('controlDoubleClick(WINDOW_NAME = "$1", CONTROL = "$2")');
                controlDoubleClickCommandCompletion.documentation = new vscode.MarkdownString('Sendet einen Doppelklick-Befehl an das angegebene Control.');
                items.push(controlDoubleClickCommandCompletion);

                const controlEnableCommandCompletion = new vscode.CompletionItem('controlEnable');
                controlEnableCommandCompletion.kind = vscode.CompletionItemKind.Function;
                controlEnableCommandCompletion.insertText = new vscode.SnippetString('controlEnable(WINDOW_NAME = "$1", CONTROL = "$2")');
                controlEnableCommandCompletion.documentation = new vscode.MarkdownString('Aktiviert ein bestimmtes Control.');
                items.push(controlEnableCommandCompletion);

                const controlFocusCommandCompletion = new vscode.CompletionItem('controlFocus');
                controlFocusCommandCompletion.kind = vscode.CompletionItemKind.Function;
                controlFocusCommandCompletion.insertText = new vscode.SnippetString('controlFocus(WINDOW_NAME = "$1", CONTROL = "$2")');
                controlFocusCommandCompletion.documentation = new vscode.MarkdownString('Fokussiert ein bestimmtes Control.');
                items.push(controlFocusCommandCompletion);

                const controlGetTextCommandCompletion = new vscode.CompletionItem('controlGetText');
                controlGetTextCommandCompletion.kind = vscode.CompletionItemKind.Function;
                controlGetTextCommandCompletion.insertText = new vscode.SnippetString('controlGetText(WINDOW_NAME = "$1", CONTROL = "$2")');
                controlGetTextCommandCompletion.documentation = new vscode.MarkdownString('Liest den Text eines bestimmten Controls aus.');
                items.push(controlGetTextCommandCompletion);

                const controlHideCommandCompletion = new vscode.CompletionItem('controlHide');
                controlHideCommandCompletion.kind = vscode.CompletionItemKind.Function;
                controlHideCommandCompletion.insertText = new vscode.SnippetString('controlHide(WINDOW_NAME = "$1", CONTROL = "$2")');
                controlHideCommandCompletion.documentation = new vscode.MarkdownString('Versteckt ein bestimmtes Control.');
                items.push(controlHideCommandCompletion);

                const controlListViewCommandCompletion = new vscode.CompletionItem('controlListView');
                controlListViewCommandCompletion.kind = vscode.CompletionItemKind.Function;
                controlListViewCommandCompletion.insertText = new vscode.SnippetString('controlListView(WINDOW_NAME = "$1", CONTROL = "$2", MODE = "$3")');
                controlListViewCommandCompletion.documentation = new vscode.MarkdownString('Sendet einen Control Command an das angegebene ListView32 Control. (https://www.autoitscript.com/autoit3/docs/functions/ControlListView.htm)');
                items.push(controlListViewCommandCompletion);

                const controlSendCommandCompletion = new vscode.CompletionItem('controlSend');
                controlSendCommandCompletion.kind = vscode.CompletionItemKind.Function;
                controlSendCommandCompletion.insertText = new vscode.SnippetString('controlSend(WINDOW_NAME = "$1", CONTROL = "$2", TEXT_TO_SEND = "$3")');
                controlSendCommandCompletion.documentation = new vscode.MarkdownString('Sendet eine Tastatureingabe an ein bestimmtes Control. Vgl. Autoit/AutoHotkey Tasteneingaben in der Dokumenation.');
                items.push(controlSendCommandCompletion);

                const controlSetTextCommandCompletion = new vscode.CompletionItem('controlSetText');
                controlSetTextCommandCompletion.kind = vscode.CompletionItemKind.Function;
                controlSetTextCommandCompletion.insertText = new vscode.SnippetString('controlSetText(WINDOW_NAME = "$1", CONTROL = "$2", TEXT_TO_SET = "$3")');
                controlSetTextCommandCompletion.documentation = new vscode.MarkdownString('Setzt den Text eines bestimmten Controls.');
                items.push(controlSetTextCommandCompletion);

                const controlShowCommandCompletion = new vscode.CompletionItem('controlShow');
                controlShowCommandCompletion.kind = vscode.CompletionItemKind.Function;
                controlShowCommandCompletion.insertText = new vscode.SnippetString('controlShow(WINDOW_NAME = "$1", CONTROL = "$2")');
                controlShowCommandCompletion.documentation = new vscode.MarkdownString('Zeigt ein bestimmtes Control.');
                items.push(controlShowCommandCompletion);

                const controlTreeViewCommandCompletion = new vscode.CompletionItem('controlTreeView');
                controlTreeViewCommandCompletion.kind = vscode.CompletionItemKind.Function;
                controlTreeViewCommandCompletion.insertText = new vscode.SnippetString('controlTreeView(WINDOW_NAME = "$1", CONTROL = "$2", MODE = "$3")');
                controlTreeViewCommandCompletion.documentation = new vscode.MarkdownString('Sendet einen Control Command an das angegebene TreeView32 Control. (https://www.autoitscript.com/autoit3/docs/functions/ControlTreeView.htm)');
                items.push(controlTreeViewCommandCompletion);

                const controlWaitForCommandCompletion = new vscode.CompletionItem('controlWaitFor');
                controlWaitForCommandCompletion.kind = vscode.CompletionItemKind.Function;
                controlWaitForCommandCompletion.insertText = new vscode.SnippetString('controlWaitFor(WINDOW_NAME = "$1", CONTROL = "$2", MAX_SECONDS_TO_WAIT = "$3")');
                controlWaitForCommandCompletion.documentation = new vscode.MarkdownString('Wartet bis zu einer bestimmten Wartezeit auf ein Control.');
                items.push(controlWaitForCommandCompletion);

                const convertExcelToCsvCommandCompletion = new vscode.CompletionItem('convertExcelToCsv');
                convertExcelToCsvCommandCompletion.kind = vscode.CompletionItemKind.Function;
                convertExcelToCsvCommandCompletion.insertText = new vscode.SnippetString('convertExcelToCsv(FILENAME = "$1", SHEET_INDEX = "$2", DEST_FILENAME = "$3")');
                convertExcelToCsvCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando konvertiert eine Excel-Datei in eine CSV-Datei.');
                items.push(convertExcelToCsvCommandCompletion);

                const copyFileCommandCompletion = new vscode.CompletionItem('copyFile');
                copyFileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                copyFileCommandCompletion.insertText = new vscode.SnippetString('copyFile(FILENAME_FROM = "$1", FILENAME_TO = "$2")');
                copyFileCommandCompletion.documentation = new vscode.MarkdownString('Kommando kopiert eine Datei.');
                items.push(copyFileCommandCompletion);

                const copyTextCPCommandCompletion = new vscode.CompletionItem('copyTextCP');
                copyTextCPCommandCompletion.kind = vscode.CompletionItemKind.Function;
                copyTextCPCommandCompletion.insertText = new vscode.SnippetString('copyTextCP()');
                copyTextCPCommandCompletion.documentation = new vscode.MarkdownString('Kopiert den Inhalt eines Textfeldes in die Zwischenablage. Das Textfeld wird ueber das mehrfache Betaetigen der Tabulator-Taste erreicht.');
                items.push(copyTextCPCommandCompletion);

                const createDirCommandCompletion = new vscode.CompletionItem('createDir');
                createDirCommandCompletion.kind = vscode.CompletionItemKind.Function;
                createDirCommandCompletion.insertText = new vscode.SnippetString('createDir(DIR_ABSOLUTE_PATH = "$1")');
                createDirCommandCompletion.documentation = new vscode.MarkdownString('Erstellt ein Verzeichnis im übergebenen Pfad, inklusive evtl. notwendiger übergeordneter Verzeichnisse.     Kommando ist auch dann erfolgreich, wenn das gewünschte Verzeichnis bereits existiert.');
                items.push(createDirCommandCompletion);

                const csvToJsonCommandCompletion = new vscode.CompletionItem('csvToJson');
                csvToJsonCommandCompletion.kind = vscode.CompletionItemKind.Function;
                csvToJsonCommandCompletion.insertText = new vscode.SnippetString('csvToJson(CSV = "$1")');
                csvToJsonCommandCompletion.documentation = new vscode.MarkdownString('Erstellt aus einer csv-Datei eine entsprechende JSON-Datei');
                items.push(csvToJsonCommandCompletion);

                const deleteAllCookiesMobileCommandCompletion = new vscode.CompletionItem('deleteAllCookiesMobile');
                deleteAllCookiesMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                deleteAllCookiesMobileCommandCompletion.insertText = new vscode.SnippetString('deleteAllCookiesMobile()');
                deleteAllCookiesMobileCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando löscht alle Cookies der aktuell geöffneten Seite im Browsers. Es werden keine Parameter benötigt (Beispiel: deleteAllCookiesMobile()).');
                items.push(deleteAllCookiesMobileCommandCompletion);

                const deleteCookiesWebCommandCompletion = new vscode.CompletionItem('deleteCookiesWeb');
                deleteCookiesWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                deleteCookiesWebCommandCompletion.insertText = new vscode.SnippetString('deleteCookiesWeb()');
                deleteCookiesWebCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando löscht alle Cookies/das angegebene Cookie auf der aktuellen/angebenen Seite.');
                items.push(deleteCookiesWebCommandCompletion);

                const deleteDirCommandCompletion = new vscode.CompletionItem('deleteDir');
                deleteDirCommandCompletion.kind = vscode.CompletionItemKind.Function;
                deleteDirCommandCompletion.insertText = new vscode.SnippetString('deleteDir(FILENAME = "$1")');
                deleteDirCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando löscht Dateien');
                items.push(deleteDirCommandCompletion);

                const deleteFileCommandCompletion = new vscode.CompletionItem('deleteFile');
                deleteFileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                deleteFileCommandCompletion.insertText = new vscode.SnippetString('deleteFile(FILENAME = "$1")');
                deleteFileCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando löscht die mit FILENAME übergebenen Dateien bzw. alle Dateien im angegebenen Verzeichnis. Ist DELETE_DIRECTORY=true, wird ein Verzeichnis angegeben, das zu löschen ist.');
                items.push(deleteFileCommandCompletion);

                const deleteInTextCommandCompletion = new vscode.CompletionItem('deleteInText');
                deleteInTextCommandCompletion.kind = vscode.CompletionItemKind.Function;
                deleteInTextCommandCompletion.insertText = new vscode.SnippetString('deleteInText(TEXT_OR_FILE = "$1", WORD = "$2", TARGET_STORAGE_KEY = "$3")');
                deleteInTextCommandCompletion.documentation = new vscode.MarkdownString('Löscht ein bestimmtes Wort oder einen festen Teilbereich in einem Text.Das Kommando sucht nach WORD im Text und löscht jedes Vorkommen.Das bedeutet, dass bei mehreren Vorkommen des WORD auch mehrere Löschungen stattfinden.');
                items.push(deleteInTextCommandCompletion);

                const deleteMailCommandCompletion = new vscode.CompletionItem('deleteMail');
                deleteMailCommandCompletion.kind = vscode.CompletionItemKind.Function;
                deleteMailCommandCompletion.insertText = new vscode.SnippetString('deleteMail(SERVER = "$1", USER = "$2", PASSWORD = "$3", FOLDER = "$4")');
                deleteMailCommandCompletion.documentation = new vscode.MarkdownString('Löscht entweder E-Mails mit bestimmten Betreff, eines Absenders oder alle E-Mails in einem bestimmten Ordner. Wird kein Betreff und kein Absender zum filtern angegeben, werden alle E-Mails im Ordner gelöscht. Wichtig ist, dass das System korrekt konfiguriert ist. Ggf. muss z. B. eine etwaige Firewall den Zugriff auf den angegebenen Mailserver zulassen.');
                items.push(deleteMailCommandCompletion);

                const doCommandCompletion = new vscode.CompletionItem('do');
                doCommandCompletion.kind = vscode.CompletionItemKind.Function;
                doCommandCompletion.insertText = new vscode.SnippetString('do:');
                doCommandCompletion.documentation = new vscode.MarkdownString('Wird zur Steuerung des Kontrollflusses verwendet');
                items.push(doCommandCompletion);

                const doubleClickImageCPCommandCompletion = new vscode.CompletionItem('doubleClickImageCP');
                doubleClickImageCPCommandCompletion.kind = vscode.CompletionItemKind.Function;
                doubleClickImageCPCommandCompletion.insertText = new vscode.SnippetString('doubleClickImageCP(IMAGE_PATH = "$1")');
                doubleClickImageCPCommandCompletion.documentation = new vscode.MarkdownString('Sucht ein Bild in einem Fenster und klickt doppelt bei erfolgreicher Suche auf dessen Mittelpunkt');
                items.push(doubleClickImageCPCommandCompletion);

                const doubleClickImageWinCommandCompletion = new vscode.CompletionItem('doubleClickImageWin');
                doubleClickImageWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                doubleClickImageWinCommandCompletion.insertText = new vscode.SnippetString('doubleClickImageWin(WINDOW_NAME = "$1", IMAGE_RELATIVE_PATH = "$2")');
                doubleClickImageWinCommandCompletion.documentation = new vscode.MarkdownString('Führt einen Doppelklick anhand eines zu Übergebenden Bildes in einer Anwendung aus.');
                items.push(doubleClickImageWinCommandCompletion);

                const doubleclickWebCommandCompletion = new vscode.CompletionItem('doubleclickWeb');
                doubleclickWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                doubleclickWebCommandCompletion.insertText = new vscode.SnippetString('doubleclickWeb(ELEMENT_NAME = "$1")');
                doubleclickWebCommandCompletion.documentation = new vscode.MarkdownString('Klickt doppelt auf ein Element.');
                items.push(doubleclickWebCommandCompletion);

                const dragAndDropWebCommandCompletion = new vscode.CompletionItem('dragAndDropWeb');
                dragAndDropWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                dragAndDropWebCommandCompletion.insertText = new vscode.SnippetString('dragAndDropWeb(START_ELEMENT_NAME = "$1", END_ELEMENT_NAME = "$2")');
                dragAndDropWebCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando klickt auf das angegebene Element, anhand eines Suchkriteriums und hält die Maustaste fest. Danach wird die Maus auf ein Ziel mit einem optionalen Offset verschoben und die Maustaste wieder losgelassen.');
                items.push(dragAndDropWebCommandCompletion);

                const dragByCoordinatesCommandCompletion = new vscode.CompletionItem('dragByCoordinates');
                dragByCoordinatesCommandCompletion.kind = vscode.CompletionItemKind.Function;
                dragByCoordinatesCommandCompletion.insertText = new vscode.SnippetString('dragByCoordinates(WINDOW_NAME = "$1", MOVE_FROM_X = "$2", MOVE_FROM_Y = "$3", MOVE_TO_X = "$4", MOVE_TO_Y = "$5")');
                dragByCoordinatesCommandCompletion.documentation = new vscode.MarkdownString('Drag-and-Drop anhand von Start und Zielkoordinaten.');
                items.push(dragByCoordinatesCommandCompletion);

                const dragByImageWinCommandCompletion = new vscode.CompletionItem('dragByImageWin');
                dragByImageWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                dragByImageWinCommandCompletion.insertText = new vscode.SnippetString('dragByImageWin(WINDOW_NAME = "$1", START_IMAGE_RELATIVE_PATH = "$2")');
                dragByImageWinCommandCompletion.documentation = new vscode.MarkdownString('Drag-and-Drop anhand eines Bildes und einer Zielposition.');
                items.push(dragByImageWinCommandCompletion);

                const elseCommandCompletion = new vscode.CompletionItem('else');
                elseCommandCompletion.kind = vscode.CompletionItemKind.Function;
                elseCommandCompletion.insertText = new vscode.SnippetString('else:');
                elseCommandCompletion.documentation = new vscode.MarkdownString('Wird zur Steuerung des Kontrollflusses verwendet');
                items.push(elseCommandCompletion);

                const elseIfCommandCompletion = new vscode.CompletionItem('elseIf');
                elseIfCommandCompletion.kind = vscode.CompletionItemKind.Function;
                elseIfCommandCompletion.insertText = new vscode.SnippetString('elseIf():');
                elseIfCommandCompletion.documentation = new vscode.MarkdownString('Wird zur Steuerung des Kontrollflusses verwendet');
                items.push(elseIfCommandCompletion);

                const emptyCommandCompletion = new vscode.CompletionItem('empty');
                emptyCommandCompletion.kind = vscode.CompletionItemKind.Function;
                emptyCommandCompletion.insertText = new vscode.SnippetString('empty()');
                emptyCommandCompletion.documentation = new vscode.MarkdownString('Überprüft ob der übergebene Parameter leer ist i.S.v. ob seine Länge gleich 0 ist.');
                items.push(emptyCommandCompletion);

                const emptyOrUndeclaredCommandCompletion = new vscode.CompletionItem('emptyOrUndeclared');
                emptyOrUndeclaredCommandCompletion.kind = vscode.CompletionItemKind.Function;
                emptyOrUndeclaredCommandCompletion.insertText = new vscode.SnippetString('emptyOrUndeclared()');
                emptyOrUndeclaredCommandCompletion.documentation = new vscode.MarkdownString('Überprüft ob der übergebene Parameter leer ist i.S.v. ob der Parameter nur aus einer       Variable besteht, die nicht aufgelöst wurde.');
                items.push(emptyOrUndeclaredCommandCompletion);

                const endsWithAlphaCommandCompletion = new vscode.CompletionItem('endsWithAlpha');
                endsWithAlphaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                endsWithAlphaCommandCompletion.insertText = new vscode.SnippetString('endsWithAlpha(TEXT = "$1", SUFFIX = "$2")');
                endsWithAlphaCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob ein text mit einem angegebenen Teil-Text endet');
                items.push(endsWithAlphaCommandCompletion);

                const equalsAlphaCommandCompletion = new vscode.CompletionItem('equalsAlpha');
                equalsAlphaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                equalsAlphaCommandCompletion.insertText = new vscode.SnippetString('equalsAlpha()');
                equalsAlphaCommandCompletion.documentation = new vscode.MarkdownString('Vergleicht die beiden übergebenen Parameter miteinander und ermittelt, ob diese gleich sind. Sofern Zahlen alphanumerisch verglichen werden, werden diese trotzdem wie Zeichen verglichen. Dann gilt z.B. dass 2 größer als 1000 ist. Soll geprüft werden, ob ein Element leer ist, kann für left oder right "BLANK" geschrieben werden.');
                items.push(equalsAlphaCommandCompletion);

                const equalsAlphaIgnoreCaseCommandCompletion = new vscode.CompletionItem('equalsAlphaIgnoreCase');
                equalsAlphaIgnoreCaseCommandCompletion.kind = vscode.CompletionItemKind.Function;
                equalsAlphaIgnoreCaseCommandCompletion.insertText = new vscode.SnippetString('equalsAlphaIgnoreCase()');
                equalsAlphaIgnoreCaseCommandCompletion.documentation = new vscode.MarkdownString('Vergleicht die beiden übergebenen Parameter miteinander und ermittelt, ob diese gleich sind.Groß und Kleinschreibung wird ignoriert.');
                items.push(equalsAlphaIgnoreCaseCommandCompletion);

                const equalsDateCommandCompletion = new vscode.CompletionItem('equalsDate');
                equalsDateCommandCompletion.kind = vscode.CompletionItemKind.Function;
                equalsDateCommandCompletion.insertText = new vscode.SnippetString('equalsDate()');
                equalsDateCommandCompletion.documentation = new vscode.MarkdownString('Vergleicht die beiden übergebenen Parameter miteinander und ermittelt, ob diese gleich sind. Sofern keine Datumswerte übergeben werden, liefert das Kommando einen Fehlschlag zurück.');
                items.push(equalsDateCommandCompletion);

                const equalsNumCommandCompletion = new vscode.CompletionItem('equalsNum');
                equalsNumCommandCompletion.kind = vscode.CompletionItemKind.Function;
                equalsNumCommandCompletion.insertText = new vscode.SnippetString('equalsNum()');
                equalsNumCommandCompletion.documentation = new vscode.MarkdownString('Vergleicht die beiden übergebenen Parameter miteinander und ermittelt, ob diese gleich sind. Sofern keine Zahlen übergeben werden, liefert das Kommando einen Fehlschlag zurück.');
                items.push(equalsNumCommandCompletion);

                const equalsRegexCommandCompletion = new vscode.CompletionItem('equalsRegex');
                equalsRegexCommandCompletion.kind = vscode.CompletionItemKind.Function;
                equalsRegexCommandCompletion.insertText = new vscode.SnippetString('equalsRegex()');
                equalsRegexCommandCompletion.documentation = new vscode.MarkdownString('Sucht im linken String nach einem regulären Ausdruck (rechts)');
                items.push(equalsRegexCommandCompletion);

                const evaluateCommandCompletion = new vscode.CompletionItem('evaluate');
                evaluateCommandCompletion.kind = vscode.CompletionItemKind.Function;
                evaluateCommandCompletion.insertText = new vscode.SnippetString('evaluate(FILEPATH_OR_SCRIPT = "$1")');
                evaluateCommandCompletion.documentation = new vscode.MarkdownString('Führt ein übergebenes Groovy Script aus und speichert das Resultat im TARGET_STORAGE_KEY.');
                items.push(evaluateCommandCompletion);

                const excelWriteCellCommandCompletion = new vscode.CompletionItem('excelWriteCell');
                excelWriteCellCommandCompletion.kind = vscode.CompletionItemKind.Function;
                excelWriteCellCommandCompletion.insertText = new vscode.SnippetString('excelWriteCell(FILENAME = "$1", SHEET_INDEX = "$2", ROW_INDEX = "$3", COLUMN_INDEX = "$4")');
                excelWriteCellCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando schreibt den übergebenen Wert an die gewünschte Stelle in der angegebenen Excel-Datei. Zu beachten ist,    dass die Spalte, anders als in Excel, über ihre Nummer (statt über ihren Buchstaben) angesprochen wird.    Die Nummer "1" entspricht dabei der Spalte "A", Die Nummer "12" der Spalte "L" und so weiter.');
                items.push(excelWriteCellCommandCompletion);

                const excelWriterFromDatabaseCommandCompletion = new vscode.CompletionItem('excelWriterFromDatabase');
                excelWriterFromDatabaseCommandCompletion.kind = vscode.CompletionItemKind.Function;
                excelWriterFromDatabaseCommandCompletion.insertText = new vscode.SnippetString('excelWriterFromDatabase(EXCEL_FILENAME = "$1", SQL_STATEMENT = "$2")');
                excelWriterFromDatabaseCommandCompletion.documentation = new vscode.MarkdownString('Liest Daten aus einer Datenbank und schreibt diese in eine Excel-Datei.');
                items.push(excelWriterFromDatabaseCommandCompletion);

                const executeApplicationWinCommandCompletion = new vscode.CompletionItem('executeApplicationWin');
                executeApplicationWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                executeApplicationWinCommandCompletion.insertText = new vscode.SnippetString('executeApplicationWin(EXECUTABLE_PATH = "$1")');
                executeApplicationWinCommandCompletion.documentation = new vscode.MarkdownString('Führt eine Anwendung aus.');
                items.push(executeApplicationWinCommandCompletion);

                const executeJCLCommandCompletion = new vscode.CompletionItem('executeJCL');
                executeJCLCommandCompletion.kind = vscode.CompletionItemKind.Function;
                executeJCLCommandCompletion.insertText = new vscode.SnippetString('executeJCL(JCLFILE = "$1", USER = "$2", PW = "$3", HOST = "$4", RETURNCODE = "$5")');
                executeJCLCommandCompletion.documentation = new vscode.MarkdownString('Kommando zum Ausführen einer JCL auf einen Host.');
                items.push(executeJCLCommandCompletion);

                const executeJCLConnectedCommandCompletion = new vscode.CompletionItem('executeJCLConnected');
                executeJCLConnectedCommandCompletion.kind = vscode.CompletionItemKind.Function;
                executeJCLConnectedCommandCompletion.insertText = new vscode.SnippetString('executeJCLConnected(JCLFILE = "$1", USER = "$2", CONNECTION_NAME = "$3", HOST = "$4", RETURNCODE = "$5")');
                executeJCLConnectedCommandCompletion.documentation = new vscode.MarkdownString('Kommando zum Ausführen einer JCL auf einen Host.');
                items.push(executeJCLConnectedCommandCompletion);

                const executeJavaCommandCompletion = new vscode.CompletionItem('executeJava');
                executeJavaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                executeJavaCommandCompletion.insertText = new vscode.SnippetString('executeJava(TARGET = "$1", METHOD = "$2")');
                executeJavaCommandCompletion.documentation = new vscode.MarkdownString('Führt eine Methode des Java Agenten aus. ');
                items.push(executeJavaCommandCompletion);

                const executeSQLCommandCompletion = new vscode.CompletionItem('executeSQL');
                executeSQLCommandCompletion.kind = vscode.CompletionItemKind.Function;
                executeSQLCommandCompletion.insertText = new vscode.SnippetString('executeSQL(JDBC_URL = "$1", SQL_STATEMENT_OR_FILE = "$2")');
                executeSQLCommandCompletion.documentation = new vscode.MarkdownString('Führt ein oder mehrere Statement(s) auf einer Datenbank aus.    Achtung: Dieses Kommando ist veraltet und sollte nicht mehr gebraucht werden.     Stattdessen ist das Kommando executeSql im Zusammenhang mit openSql bzw. closeSql (siehe Handbuch) anzuwenden.');
                items.push(executeSQLCommandCompletion);

                const executeSqlCommandCompletion = new vscode.CompletionItem('executeSql');
                executeSqlCommandCompletion.kind = vscode.CompletionItemKind.Function;
                executeSqlCommandCompletion.insertText = new vscode.SnippetString('executeSql(CONNECTION_NAME = "$1")');
                executeSqlCommandCompletion.documentation = new vscode.MarkdownString('Führt SQL-Statements wie Update, Delete und Insert bei einer bestehenden Datenbankverbindung aus.');
                items.push(executeSqlCommandCompletion);

                const executeWindowsCommandCommandCompletion = new vscode.CompletionItem('executeWindowsCommand');
                executeWindowsCommandCommandCompletion.kind = vscode.CompletionItemKind.Function;
                executeWindowsCommandCommandCompletion.insertText = new vscode.SnippetString('executeWindowsCommand(COMMAND = "$1")');
                executeWindowsCommandCommandCompletion.documentation = new vscode.MarkdownString('Führt ein Kommando in der Windows-Eingabeaufforderung (cmd.exe) aus.    Ein häufiger Anwendungsfall ist das Erzwungene Schließen eines Prozesses. Dazu kann im Vorfeld in cmd.exe mit dem Befehl TASKLIST der Name des Prozesses ermittelt werden (z. B. calc.exe), der anschließend hier im Kommando verwendet wird (z. B. taskkill /IM calc.exe /F)');
                items.push(executeWindowsCommandCommandCompletion);

                const expectAttributeMobileCommandCompletion = new vscode.CompletionItem('expectAttributeMobile');
                expectAttributeMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                expectAttributeMobileCommandCompletion.insertText = new vscode.SnippetString('expectAttributeMobile(EXPRESSION_TEXT = "$1", ATTRIBUTE_NAME = "$2")');
                expectAttributeMobileCommandCompletion.documentation = new vscode.MarkdownString('Prüft, ob ein Element ein bestimmten Attribut Wert besitzt, nachdem es gefunden wurde (Beispiel: expectAttributeMobile()).');
                items.push(expectAttributeMobileCommandCompletion);

                const expectDisplayedMobileCommandCompletion = new vscode.CompletionItem('expectDisplayedMobile');
                expectDisplayedMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                expectDisplayedMobileCommandCompletion.insertText = new vscode.SnippetString('expectDisplayedMobile(EXPRESSION_TEXT = "$1")');
                expectDisplayedMobileCommandCompletion.documentation = new vscode.MarkdownString('Prüft, ob ein Element sichtbar ist, nachdem es gefunden wurde (Beispiel: expectDisplayedMobile("name", "Weiter-Knopf", "true", "500")).');
                items.push(expectDisplayedMobileCommandCompletion);

                const expectEnabledMobileCommandCompletion = new vscode.CompletionItem('expectEnabledMobile');
                expectEnabledMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                expectEnabledMobileCommandCompletion.insertText = new vscode.SnippetString('expectEnabledMobile(EXPRESSION_TEXT = "$1")');
                expectEnabledMobileCommandCompletion.documentation = new vscode.MarkdownString('Prüft, ob ein Element entsperrt ist, nachdem es gefunden wurde (Beispiel: expectEnabledMobile("name", "Weiter-Knopf", "true", "500")).');
                items.push(expectEnabledMobileCommandCompletion);

                const expectNotSelectedMobileCommandCompletion = new vscode.CompletionItem('expectNotSelectedMobile');
                expectNotSelectedMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                expectNotSelectedMobileCommandCompletion.insertText = new vscode.SnippetString('expectNotSelectedMobile(EXPRESSION_TEXT = "$1")');
                expectNotSelectedMobileCommandCompletion.documentation = new vscode.MarkdownString('Prüft, ob ein Element nicht ausgewählt ist, nachdem es gefunden wurde.');
                items.push(expectNotSelectedMobileCommandCompletion);

                const expectPresentMobileCommandCompletion = new vscode.CompletionItem('expectPresentMobile');
                expectPresentMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                expectPresentMobileCommandCompletion.insertText = new vscode.SnippetString('expectPresentMobile(EXPRESSION_TEXT = "$1")');
                expectPresentMobileCommandCompletion.documentation = new vscode.MarkdownString('Dieser Befehl überprüft - analog zu waitMobile - die Verfügbarkeit eines Elements. Er kann aber zusätzlich überprüfen, ob ein Element nicht verfügbar ist (Beispiel: expectPresentMobile()).');
                items.push(expectPresentMobileCommandCompletion);

                const expectSelectedMobileCommandCompletion = new vscode.CompletionItem('expectSelectedMobile');
                expectSelectedMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                expectSelectedMobileCommandCompletion.insertText = new vscode.SnippetString('expectSelectedMobile(EXPRESSION_TEXT = "$1")');
                expectSelectedMobileCommandCompletion.documentation = new vscode.MarkdownString('Prüft, ob ein Element ausgewählt ist, nachdem es gefunden wurde (Beispiel: expectSelectedMobile("name", "Weiter-Knopf", "500")).');
                items.push(expectSelectedMobileCommandCompletion);

                const expectTextMobileCommandCompletion = new vscode.CompletionItem('expectTextMobile');
                expectTextMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                expectTextMobileCommandCompletion.insertText = new vscode.SnippetString('expectTextMobile(EXPRESSION_TEXT = "$1")');
                expectTextMobileCommandCompletion.documentation = new vscode.MarkdownString('Sucht in einem Element nach einem Text, nachdem es gefunden wurde (Beispiel: expectTextMobile("name", "Textfeld1", "Hello World", "500")).');
                items.push(expectTextMobileCommandCompletion);

                const extractTextFromPDFCommandCompletion = new vscode.CompletionItem('extractTextFromPDF');
                extractTextFromPDFCommandCompletion.kind = vscode.CompletionItemKind.Function;
                extractTextFromPDFCommandCompletion.insertText = new vscode.SnippetString('extractTextFromPDF(PDF_PATH = "$1")');
                extractTextFromPDFCommandCompletion.documentation = new vscode.MarkdownString('Extrahiert den Text aus einer gegebenen PDF-Datei.');
                items.push(extractTextFromPDFCommandCompletion);

                const failCommandCompletion = new vscode.CompletionItem('fail');
                failCommandCompletion.kind = vscode.CompletionItemKind.Function;
                failCommandCompletion.insertText = new vscode.SnippetString('fail(MESSAGE = "$1")');
                failCommandCompletion.documentation = new vscode.MarkdownString('Erzeugt einen Fehlschlag mit allen dazugehörigen Konsequenzen unabhängig vom bisherigen Erfolg eines Testfalls oder -schrittes. Ist z.B. sinnvoll einzusetzen nach der Überprüfung von Bedingungen im sonst-Fall.');
                items.push(failCommandCompletion);

                const fileTextDiffCommandCompletion = new vscode.CompletionItem('fileTextDiff');
                fileTextDiffCommandCompletion.kind = vscode.CompletionItemKind.Function;
                fileTextDiffCommandCompletion.insertText = new vscode.SnippetString('fileTextDiff(FILE_ONE = "$1", FILE_TWO = "$2")');
                fileTextDiffCommandCompletion.documentation = new vscode.MarkdownString('Vergleicht zwei Dateien zeilenweise miteinander und gibt die Änderungen als Warnung aus.');
                items.push(fileTextDiffCommandCompletion);

                const findAndClickAndSendWinCommandCompletion = new vscode.CompletionItem('findAndClickAndSendWin');
                findAndClickAndSendWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                findAndClickAndSendWinCommandCompletion.insertText = new vscode.SnippetString('findAndClickAndSendWin(WINDOW_NAME = "$1", IMAGE_RELATIVE_PATH = "$2", TEXT_TO_SEND = "$3")');
                findAndClickAndSendWinCommandCompletion.documentation = new vscode.MarkdownString('Klickt auf eine Position in einem Fenster, die anhand eines Bildes gefunden wird. Geklickt wird auf die Mitte des Bildes. Danach wird der in Parameter angegebene Text an das Fenster gesendet.');
                items.push(findAndClickAndSendWinCommandCompletion);

                const findAndClickWinCommandCompletion = new vscode.CompletionItem('findAndClickWin');
                findAndClickWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                findAndClickWinCommandCompletion.insertText = new vscode.SnippetString('findAndClickWin(WINDOW_NAME = "$1", IMAGE_RELATIVE_PATH = "$2")');
                findAndClickWinCommandCompletion.documentation = new vscode.MarkdownString('Klickt auf eine Position in einem Fenster, die anhand eines Bildes gefunden wird. Geklickt wird auf die Mitte des Bildes. Dieses Kommando wartet nicht auf das Fenster oder das Bild, die nötig sind, um auf das Bild zu klicken.');
                items.push(findAndClickWinCommandCompletion);

                const findPictureLocationCommandCompletion = new vscode.CompletionItem('findPictureLocation');
                findPictureLocationCommandCompletion.kind = vscode.CompletionItemKind.Function;
                findPictureLocationCommandCompletion.insertText = new vscode.SnippetString('findPictureLocation(IMAGE_PATH = "$1")');
                findPictureLocationCommandCompletion.documentation = new vscode.MarkdownString('Sucht die Position eines Bildes.');
                items.push(findPictureLocationCommandCompletion);

                const findPictureLocationAndClickCommandCompletion = new vscode.CompletionItem('findPictureLocationAndClick');
                findPictureLocationAndClickCommandCompletion.kind = vscode.CompletionItemKind.Function;
                findPictureLocationAndClickCommandCompletion.insertText = new vscode.SnippetString('findPictureLocationAndClick(IMAGE_PATH = "$1")');
                findPictureLocationAndClickCommandCompletion.documentation = new vscode.MarkdownString('Sucht die Position eines Bilds und klickt in die Mitte des gefundenen Bildes.');
                items.push(findPictureLocationAndClickCommandCompletion);

                const findPictureLocationAndClickAndSendCommandCompletion = new vscode.CompletionItem('findPictureLocationAndClickAndSend');
                findPictureLocationAndClickAndSendCommandCompletion.kind = vscode.CompletionItemKind.Function;
                findPictureLocationAndClickAndSendCommandCompletion.insertText = new vscode.SnippetString('findPictureLocationAndClickAndSend(IMAGE_PATH = "$1", TEXT_TO_SEND = "$2")');
                findPictureLocationAndClickAndSendCommandCompletion.documentation = new vscode.MarkdownString('Sucht die Position eines Bilds, klickt in die Mitte des gefundenen Bilds und sendet einen Text.');
                items.push(findPictureLocationAndClickAndSendCommandCompletion);

                const findTextInPictureCommandCompletion = new vscode.CompletionItem('findTextInPicture');
                findTextInPictureCommandCompletion.kind = vscode.CompletionItemKind.Function;
                findTextInPictureCommandCompletion.insertText = new vscode.SnippetString('findTextInPicture(TEXT_TO_FIND = "$1")');
                findTextInPictureCommandCompletion.documentation = new vscode.MarkdownString('Untersucht ein Bild oder einen Ausschnitt, ob ein zu übergebender Text enthalten ist.');
                items.push(findTextInPictureCommandCompletion);

                const forCommandCompletion = new vscode.CompletionItem('for');
                forCommandCompletion.kind = vscode.CompletionItemKind.Function;
                forCommandCompletion.insertText = new vscode.SnippetString('for(DATA_FILE_PATH = "$1"):');
                forCommandCompletion.documentation = new vscode.MarkdownString('Wird zur Steuerung des Kontrollflusses verwendet');
                items.push(forCommandCompletion);

                const formatJsonCommandCompletion = new vscode.CompletionItem('formatJson');
                formatJsonCommandCompletion.kind = vscode.CompletionItemKind.Function;
                formatJsonCommandCompletion.insertText = new vscode.SnippetString('formatJson(JSONTEXT = "$1", TARGET_STORAGE_KEY = "$2")');
                formatJsonCommandCompletion.documentation = new vscode.MarkdownString('Formatiert eine JSON Datei um');
                items.push(formatJsonCommandCompletion);

                const ftpConnectCommandCompletion = new vscode.CompletionItem('ftpConnect');
                ftpConnectCommandCompletion.kind = vscode.CompletionItemKind.Function;
                ftpConnectCommandCompletion.insertText = new vscode.SnippetString('ftpConnect(CONNECTION_NAME = "$1", SERVER = "$2")');
                ftpConnectCommandCompletion.documentation = new vscode.MarkdownString('Öffnet eine FTPVerbindung inklusive Login.');
                items.push(ftpConnectCommandCompletion);

                const ftpDeleteCommandCompletion = new vscode.CompletionItem('ftpDelete');
                ftpDeleteCommandCompletion.kind = vscode.CompletionItemKind.Function;
                ftpDeleteCommandCompletion.insertText = new vscode.SnippetString('ftpDelete(SERVER = "$1", USER = "$2", PW = "$3", SERVER_PATH = "$4")');
                ftpDeleteCommandCompletion.documentation = new vscode.MarkdownString('Abbau einer bestehenden FTP-Verbindung.');
                items.push(ftpDeleteCommandCompletion);

                const ftpDeleteConnectedCommandCompletion = new vscode.CompletionItem('ftpDeleteConnected');
                ftpDeleteConnectedCommandCompletion.kind = vscode.CompletionItemKind.Function;
                ftpDeleteConnectedCommandCompletion.insertText = new vscode.SnippetString('ftpDeleteConnected(CONNECTION_NAME = "$1", SERVER_PATH = "$2")');
                ftpDeleteConnectedCommandCompletion.documentation = new vscode.MarkdownString('Abbau einer bestehenden FTP-Verbindung.');
                items.push(ftpDeleteConnectedCommandCompletion);

                const ftpDisconnectCommandCompletion = new vscode.CompletionItem('ftpDisconnect');
                ftpDisconnectCommandCompletion.kind = vscode.CompletionItemKind.Function;
                ftpDisconnectCommandCompletion.insertText = new vscode.SnippetString('ftpDisconnect(CONNECTION_NAME = "$1")');
                ftpDisconnectCommandCompletion.documentation = new vscode.MarkdownString('Abbau einer bestehenden FTP-Verbindung.');
                items.push(ftpDisconnectCommandCompletion);

                const ftpGetCommandCompletion = new vscode.CompletionItem('ftpGet');
                ftpGetCommandCompletion.kind = vscode.CompletionItemKind.Function;
                ftpGetCommandCompletion.insertText = new vscode.SnippetString('ftpGet(SERVER = "$1", USER = "$2", PW = "$3", SERVER_PATH = "$4", LOCAL_PATH = "$5")');
                ftpGetCommandCompletion.documentation = new vscode.MarkdownString('Realisiert ein FTP GET unter Angabe der Credentials, der Serveradresse sowie der lokalen Adresse.');
                items.push(ftpGetCommandCompletion);

                const ftpGetConnectedCommandCompletion = new vscode.CompletionItem('ftpGetConnected');
                ftpGetConnectedCommandCompletion.kind = vscode.CompletionItemKind.Function;
                ftpGetConnectedCommandCompletion.insertText = new vscode.SnippetString('ftpGetConnected(CONNECTION_NAME = "$1", SERVER_PATH = "$2", LOCAL_PATH = "$3")');
                ftpGetConnectedCommandCompletion.documentation = new vscode.MarkdownString('Führt den Get-Befehl bei einer bestehenden FTP Verbindung durch.');
                items.push(ftpGetConnectedCommandCompletion);

                const ftpPutCommandCompletion = new vscode.CompletionItem('ftpPut');
                ftpPutCommandCompletion.kind = vscode.CompletionItemKind.Function;
                ftpPutCommandCompletion.insertText = new vscode.SnippetString('ftpPut(SERVER = "$1", USER = "$2", PW = "$3", SERVER_PATH = "$4", LOCAL_PATH = "$5")');
                ftpPutCommandCompletion.documentation = new vscode.MarkdownString('Realisiert ein FTP Put unter Angabe der Credentials, der Serveradresse sowie der lokalen Adresse.');
                items.push(ftpPutCommandCompletion);

                const ftpPutConnectedCommandCompletion = new vscode.CompletionItem('ftpPutConnected');
                ftpPutConnectedCommandCompletion.kind = vscode.CompletionItemKind.Function;
                ftpPutConnectedCommandCompletion.insertText = new vscode.SnippetString('ftpPutConnected(CONNECTION_NAME = "$1", LOCAL_PATH = "$2", SERVER_PATH = "$3")');
                ftpPutConnectedCommandCompletion.documentation = new vscode.MarkdownString('Führt den Put-Befehl bei einer bestehenden FTP Verbindung durch.');
                items.push(ftpPutConnectedCommandCompletion);

                const ftpSiteConnectedCommandCompletion = new vscode.CompletionItem('ftpSiteConnected');
                ftpSiteConnectedCommandCompletion.kind = vscode.CompletionItemKind.Function;
                ftpSiteConnectedCommandCompletion.insertText = new vscode.SnippetString('ftpSiteConnected(CONNECTION_NAME = "$1", COMMAND = "$2")');
                ftpSiteConnectedCommandCompletion.documentation = new vscode.MarkdownString('Ausführung von SITE Kommandos.');
                items.push(ftpSiteConnectedCommandCompletion);

                const generateRandomWordsCommandCompletion = new vscode.CompletionItem('generateRandomWords');
                generateRandomWordsCommandCompletion.kind = vscode.CompletionItemKind.Function;
                generateRandomWordsCommandCompletion.insertText = new vscode.SnippetString('generateRandomWords(ROWNUM = "$1", FILENAME = "$2")');
                generateRandomWordsCommandCompletion.documentation = new vscode.MarkdownString('Generiert eine .xlsx-Datei, die eine festgelegte Anzahl auf festgelegte regüläre Ausdrücke zutreffender Wörter enthält. Dieses Kommando dient somit als Vorbereitung für for (siehe oben), um bspw. Formulare auf eine große Zahl von Zufallseingaben zu testen. Da die für for notwendige .xlsx-Datei jedoch vor Ausführung des Testfalls bereits vorhanden sein muss, kann dieses Kommando nicht im gleichen Testlauf ausgeführt werden wie der Testlauf, der die verwendende for-Schleife enthält. Stattdessen ist RandomWordGenerator in einem vorhergehenden Testfall auszuführen.    Jeder hinter ROWNUM und FILENAME aufgeführte weitere Parameter (Anzahl beliebig) beschreibt jeweils einen regulären Ausdruck, auf den alle generierten Einträge in der korrespondierenden Spalte der Zieldatei zutreffen müssen. Die regulären Ausdrücke entsprechen dabei der Java-Syntax. (Erhält z. B. Parameter 3 den Wert [0-9]([a-c]|[e-g]{1,9}), so treffen alle Einträge in der ersten Spalte der Zieldatei auf diesen regulären Ausdruck zu usw. für jeden folgenden Parameter und jede folgende Spalte).');
                items.push(generateRandomWordsCommandCompletion);

                const getAllFilesOfPathCommandCompletion = new vscode.CompletionItem('getAllFilesOfPath');
                getAllFilesOfPathCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getAllFilesOfPathCommandCompletion.insertText = new vscode.SnippetString('getAllFilesOfPath(PATH = "$1", CSV_FILE = "$2")');
                getAllFilesOfPathCommandCompletion.documentation = new vscode.MarkdownString('Liest die Pfade aller Dateien in einem Ordner aus und schreibt diese in einen Storage-Key und/oder eine CSV-Datei.');
                items.push(getAllFilesOfPathCommandCompletion);

                const getAttributeFromElementWebCommandCompletion = new vscode.CompletionItem('getAttributeFromElementWeb');
                getAttributeFromElementWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getAttributeFromElementWebCommandCompletion.insertText = new vscode.SnippetString('getAttributeFromElementWeb(BY_CRITERIA = "$1", ELEMENT_NAME = "$2", ATTRIBUTE_NAME = "$3")');
                getAttributeFromElementWebCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando ruft den Wert eines gegebenen Attributs in einem gegebenem Element ab und speichert diesen ggf. unter TARGET_STORAGE_KEY.');
                items.push(getAttributeFromElementWebCommandCompletion);

                const getBrowserLogCommandCompletion = new vscode.CompletionItem('getBrowserLog');
                getBrowserLogCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getBrowserLogCommandCompletion.insertText = new vscode.SnippetString('getBrowserLog()');
                getBrowserLogCommandCompletion.documentation = new vscode.MarkdownString('Abruf des Browser-Log. Derzeit nur für Chrome verfügbar. Hierbei müssen Log-Levels festgelegt werden. Zum Einen muss unabhängig vom einzelnen Kommandoaufruf eingestellt werden, was der Browser (bzw. der WebDriver) überhaupt loggt. Dies wird eingestellt in der Konfigurationsdatei "environment.properties" über den Parameter "webDriverLogLevel". Default ist INFO. Mögliche Werte sind: OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL. Dabei ist stets die Angabe nur eines dieser Werte erlaubt (keine Liste). Kritischere Log-Levels werden jeweils mit eingeschlossen (z. B. schließt INFO auch SEVERE mit ein). Für die vollständige Hierarchie der Log-Levels, siehe java.util.logging.Level. ACHTUNG: Jeder Aufruf des Kommandos leert den Zwischenspeicher mit den bis zum Aufruf angefallenen Log-Einträgen. Bei zwei hintereinander erfolgenden Aufrufen dieses Kommandos wird der zweite Aufruf nur die Log-Einträge ausgeben, die seit dem vorherigen Aufruf des Kommandos angefallen sind.');
                items.push(getBrowserLogCommandCompletion);

                const getColourFromFocussedWinEleCommandCompletion = new vscode.CompletionItem('getColourFromFocussedWinEle');
                getColourFromFocussedWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getColourFromFocussedWinEleCommandCompletion.insertText = new vscode.SnippetString('getColourFromFocussedWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2")');
                getColourFromFocussedWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando speichert/vergleicht die Farbe eines Elementes im RGB-Format (R-G-B).');
                items.push(getColourFromFocussedWinEleCommandCompletion);

                const getCookiesWebCommandCompletion = new vscode.CompletionItem('getCookiesWeb');
                getCookiesWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getCookiesWebCommandCompletion.insertText = new vscode.SnippetString('getCookiesWeb()');
                getCookiesWebCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando ruft alle Cookies/das angegebene Cookie auf der aktuellen/angegebenen Seite ab     und speichert diese in der Storage-Variable.');
                items.push(getCookiesWebCommandCompletion);

                const getCurrentTitleWebCommandCompletion = new vscode.CompletionItem('getCurrentTitleWeb');
                getCurrentTitleWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getCurrentTitleWebCommandCompletion.insertText = new vscode.SnippetString('getCurrentTitleWeb()');
                getCurrentTitleWebCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando gibt den Titel der aktuellen Webseite zurück. Es speichert ihn ggf. unter TARGET_STORAGE_KEY.');
                items.push(getCurrentTitleWebCommandCompletion);

                const getCurrentURLMobileCommandCompletion = new vscode.CompletionItem('getCurrentURLMobile');
                getCurrentURLMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getCurrentURLMobileCommandCompletion.insertText = new vscode.SnippetString('getCurrentURLMobile()');
                getCurrentURLMobileCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando ermöglicht den Zugriff auf die URL der gerade im Browser angezeigten Webseite. Die aktuell angezeigte URL kann somit in einer Variable gespeichert werden.');
                items.push(getCurrentURLMobileCommandCompletion);

                const getCurrentURLWebCommandCompletion = new vscode.CompletionItem('getCurrentURLWeb');
                getCurrentURLWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getCurrentURLWebCommandCompletion.insertText = new vscode.SnippetString('getCurrentURLWeb()');
                getCurrentURLWebCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando gibt die aktuelle URL zurück und speichert diese ggf. unter TARGET_STORAGE_KEY.');
                items.push(getCurrentURLWebCommandCompletion);

                const getItemByTextJavaCommandCompletion = new vscode.CompletionItem('getItemByTextJava');
                getItemByTextJavaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getItemByTextJavaCommandCompletion.insertText = new vscode.SnippetString('getItemByTextJava(TARGET = "$1", TEXT = "$2", INDEX = "$3")');
                getItemByTextJavaCommandCompletion.documentation = new vscode.MarkdownString('Klickt ein angegebenes Element innerhalb einer Tabelle einer Java Anwendung an.');
                items.push(getItemByTextJavaCommandCompletion);

                const getRunningDriversCommandCompletion = new vscode.CompletionItem('getRunningDrivers');
                getRunningDriversCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getRunningDriversCommandCompletion.insertText = new vscode.SnippetString('getRunningDrivers()');
                getRunningDriversCommandCompletion.documentation = new vscode.MarkdownString('Liest die aktuell aktiven WebDriver-Instanzen als alphabetisch sortierte Liste aus und schreibt sie optional in den Storage. Laufen bspw. gleichzeitig eine Chrome- und eine Firefox-Instanz, könnte die Liste so aussehen: [CHDEFAULT, FFDEFAULT]. Wurde bei startWeb ein BROWSER_ALIAS verwendet, erscheint dieser gemeinsam mit dem Browser-Kürzel als Listeneintrag (z.B. erscheint für Browser Chrome bei einem BROWSER_ALIAS "CH1" der Listeneintrag "CHCH1", da das Browser-Kürzel für Chrome "CH" ist). Ansonsten erscheint Browser-Kürzel + "DEFAULT" als Listeneintrag (z.B. "CHDEFAULT" bei einer Chrome-Instanz, die ohne BROWSER_ALIAS gestartet wurde.');
                items.push(getRunningDriversCommandCompletion);

                const getSelectedElementDropDownWinEleCommandCompletion = new vscode.CompletionItem('getSelectedElementDropDownWinEle');
                getSelectedElementDropDownWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getSelectedElementDropDownWinEleCommandCompletion.insertText = new vscode.SnippetString('getSelectedElementDropDownWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2")');
                getSelectedElementDropDownWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando speichert oder prüft das aktuell selektierte Element aus einem Drop-Down-Menü.');
                items.push(getSelectedElementDropDownWinEleCommandCompletion);

                const getTextFromElementWebCommandCompletion = new vscode.CompletionItem('getTextFromElementWeb');
                getTextFromElementWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getTextFromElementWebCommandCompletion.insertText = new vscode.SnippetString('getTextFromElementWeb(BY_CRITERIA = "$1", ELEMENT_NAME = "$2")');
                getTextFromElementWebCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando prüft, ob in einem gegebenen Element ein Text auf der Webseite vorhanden ist und speichert diesen ggf. unter TARGET_STORAGE_KEY.');
                items.push(getTextFromElementWebCommandCompletion);

                const getTextFromFocussedWinEleCommandCompletion = new vscode.CompletionItem('getTextFromFocussedWinEle');
                getTextFromFocussedWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getTextFromFocussedWinEleCommandCompletion.insertText = new vscode.SnippetString('getTextFromFocussedWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2")');
                getTextFromFocussedWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando speichert den Wert des fokusssierten Textfeldes in einer Laufzeitvariablen oder vergleicht es mit einem angegebenen String. Das Kommando funktioniert explizit nicht mit Zellen in einer Excel-Datei.');
                items.push(getTextFromFocussedWinEleCommandCompletion);

                const getTextJavaCommandCompletion = new vscode.CompletionItem('getTextJava');
                getTextJavaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getTextJavaCommandCompletion.insertText = new vscode.SnippetString('getTextJava(TARGET = "$1")');
                getTextJavaCommandCompletion.documentation = new vscode.MarkdownString('Ruft die Methode getText einer Java Swing Komponente auf.');
                items.push(getTextJavaCommandCompletion);

                const getTextMobileCommandCompletion = new vscode.CompletionItem('getTextMobile');
                getTextMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getTextMobileCommandCompletion.insertText = new vscode.SnippetString('getTextMobile(EXPRESSION_TEXT = "$1")');
                getTextMobileCommandCompletion.documentation = new vscode.MarkdownString('Dieses Kommando ermöglicht den Zugriff auf den Text eines Elements (in der Regel ein Textfeld), nachdem es gefunden wurde (Beispiel: getTextMobile("name", "Textfeld1", "Hello World", "Variable1")). ');
                items.push(getTextMobileCommandCompletion);

                const getTextWindowCommandCompletion = new vscode.CompletionItem('getTextWindow');
                getTextWindowCommandCompletion.kind = vscode.CompletionItemKind.Function;
                getTextWindowCommandCompletion.insertText = new vscode.SnippetString('getTextWindow(WINDOW_NAME = "$1", TARGET_STORAGE_KEY = "$2")');
                getTextWindowCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando holt den Text eines Fensters und schreibt ihn in den Speicher.');
                items.push(getTextWindowCommandCompletion);

                const greaterThanAlphaCommandCompletion = new vscode.CompletionItem('greaterThanAlpha');
                greaterThanAlphaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                greaterThanAlphaCommandCompletion.insertText = new vscode.SnippetString('greaterThanAlpha()');
                greaterThanAlphaCommandCompletion.documentation = new vscode.MarkdownString('Vergleicht die beiden übergebenen Parameter miteinander und ermittelt, ob der linke größer als der rechte Parameter ist. Sofern Zahlen alphanumerisch verglichen werden, werden diese trotzdem wie Zeichen verglichen. Dann gilt z.B. dass 2 größer als 1000 ist.');
                items.push(greaterThanAlphaCommandCompletion);

                const greaterThanDateCommandCompletion = new vscode.CompletionItem('greaterThanDate');
                greaterThanDateCommandCompletion.kind = vscode.CompletionItemKind.Function;
                greaterThanDateCommandCompletion.insertText = new vscode.SnippetString('greaterThanDate()');
                greaterThanDateCommandCompletion.documentation = new vscode.MarkdownString('Vergleicht die beiden übergebenen Parameter miteinander und ermittelt, ob der linke größer als der rechte Parameter ist. Sofern keine Datumswerte übergeben werden, liefert das Kommando einen Fehlschlag zurück.');
                items.push(greaterThanDateCommandCompletion);

                const greaterThanNumCommandCompletion = new vscode.CompletionItem('greaterThanNum');
                greaterThanNumCommandCompletion.kind = vscode.CompletionItemKind.Function;
                greaterThanNumCommandCompletion.insertText = new vscode.SnippetString('greaterThanNum()');
                greaterThanNumCommandCompletion.documentation = new vscode.MarkdownString('Vergleicht die beiden übergebenen Parameter miteinander und ermittelt, ob der linke größer als der rechte Parameter ist. Sofern keine Zahlen übergeben werden, liefert das Kommando einen Fehlschlag zurück.');
                items.push(greaterThanNumCommandCompletion);

                const helpCommandCompletion = new vscode.CompletionItem('help');
                helpCommandCompletion.kind = vscode.CompletionItemKind.Function;
                helpCommandCompletion.insertText = new vscode.SnippetString('help(MESSAGE = "$1", FILENAME = "$2")');
                helpCommandCompletion.documentation = new vscode.MarkdownString('Erzeugt oder überschreibt eine Datei und schreibt eine Nachricht in diese Datei.');
                items.push(helpCommandCompletion);

                const hideCommandOverlayCommandCompletion = new vscode.CompletionItem('hideCommandOverlay');
                hideCommandOverlayCommandCompletion.kind = vscode.CompletionItemKind.Function;
                hideCommandOverlayCommandCompletion.insertText = new vscode.SnippetString('hideCommandOverlay()');
                hideCommandOverlayCommandCompletion.documentation = new vscode.MarkdownString('Versteckt das Command-Overlay. ');
                items.push(hideCommandOverlayCommandCompletion);

                const hideKeyboardCommandCompletion = new vscode.CompletionItem('hideKeyboard');
                hideKeyboardCommandCompletion.kind = vscode.CompletionItemKind.Function;
                hideKeyboardCommandCompletion.insertText = new vscode.SnippetString('hideKeyboard()');
                hideKeyboardCommandCompletion.documentation = new vscode.MarkdownString('Blendet die Bildschirmtastatur aus');
                items.push(hideKeyboardCommandCompletion);

                const hoverAndClickWebCommandCompletion = new vscode.CompletionItem('hoverAndClickWeb');
                hoverAndClickWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                hoverAndClickWebCommandCompletion.insertText = new vscode.SnippetString('hoverAndClickWeb(ELEMENT_NAME_HOVER = "$1", ELEMENT_NAME_CLICK = "$2")');
                hoverAndClickWebCommandCompletion.documentation = new vscode.MarkdownString('Bewegt die Maus an einen bestimmten Punkt (Hover) und klickt danach einen anderen bestimmten Punkt (Click).              Dies ist insbesondere bei Menüs, die sich durch ein Hover aufklappen, hilfreich.               Nachdem das Kommando das Fenster zu dem Hover-Punkt bewegt hat, kann es sein, dass die dabei erscheinenden Menüpunkte nicht im Sichtfeld sind.                Eventuell ist dazu ein zusätzliches Verschieben des Sichtbereichs im Fenster notwendig.               Die Koordinaten einer solchen Verschiebung lassen sich über die optionalen Paramter SCROLL_X bzw. SCROLL_Y festlegen.');
                items.push(hoverAndClickWebCommandCompletion);

                const httpDeleteCommandCompletion = new vscode.CompletionItem('httpDelete');
                httpDeleteCommandCompletion.kind = vscode.CompletionItemKind.Function;
                httpDeleteCommandCompletion.insertText = new vscode.SnippetString('httpDelete(URL = "$1", BODY = "$2", CONTENT_TYPE = "$3")');
                httpDeleteCommandCompletion.documentation = new vscode.MarkdownString('Ruft ein HTTP-DELETE auf und speichert das Ergebnis im Storage.');
                items.push(httpDeleteCommandCompletion);

                const httpGetCommandCompletion = new vscode.CompletionItem('httpGet');
                httpGetCommandCompletion.kind = vscode.CompletionItemKind.Function;
                httpGetCommandCompletion.insertText = new vscode.SnippetString('httpGet(URL = "$1")');
                httpGetCommandCompletion.documentation = new vscode.MarkdownString('Ruft ein HTTP-GET auf und speichert das Ergebnis im Storage.');
                items.push(httpGetCommandCompletion);

                const httpPatchCommandCompletion = new vscode.CompletionItem('httpPatch');
                httpPatchCommandCompletion.kind = vscode.CompletionItemKind.Function;
                httpPatchCommandCompletion.insertText = new vscode.SnippetString('httpPatch(URL = "$1", BODY = "$2", CONTENT_TYPE = "$3")');
                httpPatchCommandCompletion.documentation = new vscode.MarkdownString('Ruft ein HTTP-PATCH auf und speichert das Ergebnis im Storage.');
                items.push(httpPatchCommandCompletion);

                const httpPostCommandCompletion = new vscode.CompletionItem('httpPost');
                httpPostCommandCompletion.kind = vscode.CompletionItemKind.Function;
                httpPostCommandCompletion.insertText = new vscode.SnippetString('httpPost(URL = "$1", BODY = "$2", CONTENT_TYPE = "$3")');
                httpPostCommandCompletion.documentation = new vscode.MarkdownString('Ruft ein HTTP-POST auf und speichert das Ergebnis im Storage.');
                items.push(httpPostCommandCompletion);

                const httpPutCommandCompletion = new vscode.CompletionItem('httpPut');
                httpPutCommandCompletion.kind = vscode.CompletionItemKind.Function;
                httpPutCommandCompletion.insertText = new vscode.SnippetString('httpPut(URL = "$1", BODY = "$2", CONTENT_TYPE = "$3")');
                httpPutCommandCompletion.documentation = new vscode.MarkdownString('Ruft ein HTTP-PUT auf und speichert das Ergebnis im Storage.');
                items.push(httpPutCommandCompletion);

                const ifCommandCompletion = new vscode.CompletionItem('if');
                ifCommandCompletion.kind = vscode.CompletionItemKind.Function;
                ifCommandCompletion.insertText = new vscode.SnippetString('if():');
                ifCommandCompletion.documentation = new vscode.MarkdownString('Wird zur Steuerung des Kontrollflusses verwendet');
                items.push(ifCommandCompletion);

                const ifNotCommandCompletion = new vscode.CompletionItem('ifNot');
                ifNotCommandCompletion.kind = vscode.CompletionItemKind.Function;
                ifNotCommandCompletion.insertText = new vscode.SnippetString('ifNot():');
                ifNotCommandCompletion.documentation = new vscode.MarkdownString('Wird zur Steuerung des Kontrollflusses verwendet');
                items.push(ifNotCommandCompletion);

                const inputDialogCommandCompletion = new vscode.CompletionItem('inputDialog');
                inputDialogCommandCompletion.kind = vscode.CompletionItemKind.Function;
                inputDialogCommandCompletion.insertText = new vscode.SnippetString('inputDialog(MESSAGE = "$1", TARGET_STORAGE_KEY = "$2")');
                inputDialogCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando erzeugt ein Dialog zum manuellen Erfassen von Storage Parametern');
                items.push(inputDialogCommandCompletion);

                const lessThanAlphaCommandCompletion = new vscode.CompletionItem('lessThanAlpha');
                lessThanAlphaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                lessThanAlphaCommandCompletion.insertText = new vscode.SnippetString('lessThanAlpha()');
                lessThanAlphaCommandCompletion.documentation = new vscode.MarkdownString('Vergleicht die beiden übergebenen Parameter miteinander und ermittelt, ob der linke kleiner als der rechte Parameter ist. Sofern Zahlen alphanumerisch verglichen werden, werden diese trotzdem wie Zeichen verglichen. Dann gilt z.B. dass 1000 kleiner als 2 ist.');
                items.push(lessThanAlphaCommandCompletion);

                const lessThanDateCommandCompletion = new vscode.CompletionItem('lessThanDate');
                lessThanDateCommandCompletion.kind = vscode.CompletionItemKind.Function;
                lessThanDateCommandCompletion.insertText = new vscode.SnippetString('lessThanDate()');
                lessThanDateCommandCompletion.documentation = new vscode.MarkdownString('Vergleicht die beiden übergebenen Parameter miteinander und ermittelt, ob der linke kleiner als der rechte Parameter ist. Sofern keine Datumswerte übergeben werden, liefert das Kommando einen Fehlschlag zurück.');
                items.push(lessThanDateCommandCompletion);

                const lessThanNumCommandCompletion = new vscode.CompletionItem('lessThanNum');
                lessThanNumCommandCompletion.kind = vscode.CompletionItemKind.Function;
                lessThanNumCommandCompletion.insertText = new vscode.SnippetString('lessThanNum()');
                lessThanNumCommandCompletion.documentation = new vscode.MarkdownString('Vergleicht die beiden übergebenen Parameter miteinander und ermittelt, ob der linke kleiner als der rechte Parameter ist. Sofern keine Zahlen übergeben werden, liefert das Kommando einen Fehlschlag zurück.');
                items.push(lessThanNumCommandCompletion);

                const loadCsvSqlCommandCompletion = new vscode.CompletionItem('loadCsvSql');
                loadCsvSqlCommandCompletion.kind = vscode.CompletionItemKind.Function;
                loadCsvSqlCommandCompletion.insertText = new vscode.SnippetString('loadCsvSql(CONNECTION_NAME = "$1", TARGET_TABLE = "$2", CSV_FILE = "$3")');
                loadCsvSqlCommandCompletion.documentation = new vscode.MarkdownString('Lädt eine CSV Datei in eine SQL Datenbank. Spaltenüberschriften, die Sonderzeichen enthalten oder mit einer Zahl beginnen, werden im SQL-Statement zur Erzeugung von Tabellen mit Anführungszeichen escaped');
                items.push(loadCsvSqlCommandCompletion);

                const logAppendCaseCommandCompletion = new vscode.CompletionItem('logAppendCase');
                logAppendCaseCommandCompletion.kind = vscode.CompletionItemKind.Function;
                logAppendCaseCommandCompletion.insertText = new vscode.SnippetString('logAppendCase(MESSAGE = "$1")');
                logAppendCaseCommandCompletion.documentation = new vscode.MarkdownString('Ermöglicht dem Nutzer eine zusätztliche Nachricht über den Ablauf des Falls im Bericht anzeigen zu lassen ');
                items.push(logAppendCaseCommandCompletion);

                const logAppendSetCommandCompletion = new vscode.CompletionItem('logAppendSet');
                logAppendSetCommandCompletion.kind = vscode.CompletionItemKind.Function;
                logAppendSetCommandCompletion.insertText = new vscode.SnippetString('logAppendSet(MESSAGE = "$1")');
                logAppendSetCommandCompletion.documentation = new vscode.MarkdownString('Ermöglicht dem Nutzer eine zusätzliche Nachricht über den Ablauf des Sets im Bericht anzeigen zu lassen ');
                items.push(logAppendSetCommandCompletion);

                const logAppendStepCommandCompletion = new vscode.CompletionItem('logAppendStep');
                logAppendStepCommandCompletion.kind = vscode.CompletionItemKind.Function;
                logAppendStepCommandCompletion.insertText = new vscode.SnippetString('logAppendStep(MESSAGE = "$1")');
                logAppendStepCommandCompletion.documentation = new vscode.MarkdownString('Ermöglicht dem Nutzer eine zusätztliche Nachricht über den Ablauf des Schrittes im Bericht anzeigen zu lassen ');
                items.push(logAppendStepCommandCompletion);

                const maximizeWindowWinEleCommandCompletion = new vscode.CompletionItem('maximizeWindowWinEle');
                maximizeWindowWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                maximizeWindowWinEleCommandCompletion.insertText = new vscode.SnippetString('maximizeWindowWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2")');
                maximizeWindowWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando maximiert die Größe eines Fensters.');
                items.push(maximizeWindowWinEleCommandCompletion);

                const monkeyClickCommandCompletion = new vscode.CompletionItem('monkeyClick');
                monkeyClickCommandCompletion.kind = vscode.CompletionItemKind.Function;
                monkeyClickCommandCompletion.insertText = new vscode.SnippetString('monkeyClick(ITERATIONS = "$1")');
                monkeyClickCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando klickt wahllos auf der Oberfläche herum.');
                items.push(monkeyClickCommandCompletion);

                const mouseMoveToImageInWindowWinCommandCompletion = new vscode.CompletionItem('mouseMoveToImageInWindowWin');
                mouseMoveToImageInWindowWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                mouseMoveToImageInWindowWinCommandCompletion.insertText = new vscode.SnippetString('mouseMoveToImageInWindowWin(WINDOW_NAME = "$1", IMAGE_RELATIVE_PATH = "$2")');
                mouseMoveToImageInWindowWinCommandCompletion.documentation = new vscode.MarkdownString('Bewegt die Maus zu einer Position in einem Fenster, die anhand eines Bildes gefunden wird. Sie wird zur Mitte des Bildes bewegt. Mittels zusätzlicher Parameter kann die Position angepasst werden.');
                items.push(mouseMoveToImageInWindowWinCommandCompletion);

                const moveFileCommandCompletion = new vscode.CompletionItem('moveFile');
                moveFileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                moveFileCommandCompletion.insertText = new vscode.SnippetString('moveFile(FILENAME_FROM = "$1", FILENAME_TO = "$2")');
                moveFileCommandCompletion.documentation = new vscode.MarkdownString('Kommando verschiebt eine Datei. Durch Angabe eines anderen Dateinames in FILENAME_TO kann die Datei auch umbenannt werden.');
                items.push(moveFileCommandCompletion);

                const moveFilesOlderThanCommandCompletion = new vscode.CompletionItem('moveFilesOlderThan');
                moveFilesOlderThanCommandCompletion.kind = vscode.CompletionItemKind.Function;
                moveFilesOlderThanCommandCompletion.insertText = new vscode.SnippetString('moveFilesOlderThan(FILENAME_FROM = "$1", FILENAME_TO = "$2")');
                moveFilesOlderThanCommandCompletion.documentation = new vscode.MarkdownString('Kommando verschiebt eine Datei. Durch Angabe eines anderen Dateinames in FILENAME_TO kann die Datei auch umbenannt werden.');
                items.push(moveFilesOlderThanCommandCompletion);

                const moveMouseWinCommandCompletion = new vscode.CompletionItem('moveMouseWin');
                moveMouseWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                moveMouseWinCommandCompletion.insertText = new vscode.SnippetString('moveMouseWin(WINDOW = "$1", MOVE_TO_X = "$2", MOVE_TO_Y = "$3")');
                moveMouseWinCommandCompletion.documentation = new vscode.MarkdownString('Bewegt die Maus zu einer Zielposition.');
                items.push(moveMouseWinCommandCompletion);

                const moveToWebCommandCompletion = new vscode.CompletionItem('moveToWeb');
                moveToWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                moveToWebCommandCompletion.insertText = new vscode.SnippetString('moveToWeb(ELEMENT_NAME = "$1")');
                moveToWebCommandCompletion.documentation = new vscode.MarkdownString('Im Browser wird zu der Stelle gescrollt, an der das Element für den Benutzer zu sehen ist.');
                items.push(moveToWebCommandCompletion);

                const navigateMobileCommandCompletion = new vscode.CompletionItem('navigateMobile');
                navigateMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                navigateMobileCommandCompletion.insertText = new vscode.SnippetString('navigateMobile()');
                navigateMobileCommandCompletion.documentation = new vscode.MarkdownString('Der Befehl navigiert zu der angegebenen Webseite im Browser. Außerdem kann mit dem Befehl eine Seite vor ("FORWARD") oder eine Seite zurück ("BACK") navigiert werden. Bei der "BACK"-Funktionalität wird der "Back"-Button des Handys benutzt (Beispiel: navigateMobile("", "https://www.viadee.de/", "")). ');
                items.push(navigateMobileCommandCompletion);

                const navigateWebCommandCompletion = new vscode.CompletionItem('navigateWeb');
                navigateWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                navigateWebCommandCompletion.insertText = new vscode.SnippetString('navigateWeb(URL = "$1")');
                navigateWebCommandCompletion.documentation = new vscode.MarkdownString('Öffnet eine angegebene Seite.');
                items.push(navigateWebCommandCompletion);

                const networkAndroidCommandCompletion = new vscode.CompletionItem('networkAndroid');
                networkAndroidCommandCompletion.kind = vscode.CompletionItemKind.Function;
                networkAndroidCommandCompletion.insertText = new vscode.SnippetString('networkAndroid(WIFI = "$1", DATA = "$2", AIRPLANE = "$3")');
                networkAndroidCommandCompletion.documentation = new vscode.MarkdownString('Dieses Kommando stellt bestimmte Netzwerkeinstellungen im Android Device bzw. im Android Emulator ein. Mit dem Kommando ist ein Zugriff auf das WLAN, die Mobile Datennutzung und den Flugzeugmodus möglich. Wird der Flugmodus aktiviert, werden Parameter für Wifi und Data ignoriert, da diese Einstellungen nicht gleichzeitig in einer Android Umgebung aktiv sein können (Beispiel: NetworkAndroid("on", "off", "off")).');
                items.push(networkAndroidCommandCompletion);

                const notCommandCompletion = new vscode.CompletionItem('not');
                notCommandCompletion.kind = vscode.CompletionItemKind.Function;
                notCommandCompletion.insertText = new vscode.SnippetString('not()');
                notCommandCompletion.documentation = new vscode.MarkdownString('Wird zur Steuerung des Kontrollflusses verwendet');
                items.push(notCommandCompletion);

                const notEmptyCommandCompletion = new vscode.CompletionItem('notEmpty');
                notEmptyCommandCompletion.kind = vscode.CompletionItemKind.Function;
                notEmptyCommandCompletion.insertText = new vscode.SnippetString('notEmpty()');
                notEmptyCommandCompletion.documentation = new vscode.MarkdownString('Überprüft ob der übergebene Parameter nicht leer ist i.S.v. ob seine Länge größer 0 ist.');
                items.push(notEmptyCommandCompletion);

                const notEqualsAlphaCommandCompletion = new vscode.CompletionItem('notEqualsAlpha');
                notEqualsAlphaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                notEqualsAlphaCommandCompletion.insertText = new vscode.SnippetString('notEqualsAlpha()');
                notEqualsAlphaCommandCompletion.documentation = new vscode.MarkdownString('Vergleicht die beiden übergebenen Parameter miteinander und ermittelt, ob diese nicht gleich sind. Sofern Zahlen alphanumerisch verglichen werden, werden diese trotzdem wie Zeichen verglichen. Dann gilt z.B. dass 2 größer als 1000 ist.');
                items.push(notEqualsAlphaCommandCompletion);

                const openNotificationAndroidCommandCompletion = new vscode.CompletionItem('openNotificationAndroid');
                openNotificationAndroidCommandCompletion.kind = vscode.CompletionItemKind.Function;
                openNotificationAndroidCommandCompletion.insertText = new vscode.SnippetString('openNotificationAndroid()');
                openNotificationAndroidCommandCompletion.documentation = new vscode.MarkdownString('Öffnet die Notificationbar in Android. Anschließend kann die Notificationbar wie andere Oberflächen untersucht werden. Zum Beispiel kann geprüft werden, ob ein bestimmter Text vorhanden ist. Es können aber auch Taps und Swipes ausgeführt werden. Soll eine Notificationbar geschlossen werden, führen Sie den Back Button Befehl anschließend aus.');
                items.push(openNotificationAndroidCommandCompletion);

                const openSqlCommandCompletion = new vscode.CompletionItem('openSql');
                openSqlCommandCompletion.kind = vscode.CompletionItemKind.Function;
                openSqlCommandCompletion.insertText = new vscode.SnippetString('openSql(CONNECTION_NAME = "$1", JDBC_URL = "$2", JDBC_DRIVER = "$3")');
                openSqlCommandCompletion.documentation = new vscode.MarkdownString('Eröffnet eine Datenbankverbindung.');
                items.push(openSqlCommandCompletion);

                const orCommandCompletion = new vscode.CompletionItem('or');
                orCommandCompletion.kind = vscode.CompletionItemKind.Function;
                orCommandCompletion.insertText = new vscode.SnippetString('or()');
                orCommandCompletion.documentation = new vscode.MarkdownString('Erlaubt die Nutzung des OR-Operator in If-Bedingungen.');
                items.push(orCommandCompletion);

                const pasteTextCPCommandCompletion = new vscode.CompletionItem('pasteTextCP');
                pasteTextCPCommandCompletion.kind = vscode.CompletionItemKind.Function;
                pasteTextCPCommandCompletion.insertText = new vscode.SnippetString('pasteTextCP()');
                pasteTextCPCommandCompletion.documentation = new vscode.MarkdownString('Fügt Text aus der Zwischenablage an der markierten Stelle ein.');
                items.push(pasteTextCPCommandCompletion);

                const pickNumericalFromPickerRollCommandCompletion = new vscode.CompletionItem('pickNumericalFromPickerRoll');
                pickNumericalFromPickerRollCommandCompletion.kind = vscode.CompletionItemKind.Function;
                pickNumericalFromPickerRollCommandCompletion.insertText = new vscode.SnippetString('pickNumericalFromPickerRoll(ELEMENT_NAME = "$1", TARGET_VALUE = "$2")');
                pickNumericalFromPickerRollCommandCompletion.documentation = new vscode.MarkdownString('Wählt einen numerischen Wert von einer Picker-Roll aus.');
                items.push(pickNumericalFromPickerRollCommandCompletion);

                const pinchMobileCommandCompletion = new vscode.CompletionItem('pinchMobile');
                pinchMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                pinchMobileCommandCompletion.insertText = new vscode.SnippetString('pinchMobile(X_POSITION = "$1", Y_POSITION = "$2")');
                pinchMobileCommandCompletion.documentation = new vscode.MarkdownString('Führt eine Pinch-Geste (Gegenteil einer Zoom-Geste) am definierten Punkt durch (Beispiel: pinchMobile("", "150", "150")). Warnung: Es sollte immer vermieden werden, Befehle auf dem Screen auszuführen, da Pixel angaben Device- und Auflösungsabhängig sind.');
                items.push(pinchMobileCommandCompletion);

                const queryJsonCommandCompletion = new vscode.CompletionItem('queryJson');
                queryJsonCommandCompletion.kind = vscode.CompletionItemKind.Function;
                queryJsonCommandCompletion.insertText = new vscode.SnippetString('queryJson(JSONTEXT = "$1", QUERY = "$2")');
                queryJsonCommandCompletion.documentation = new vscode.MarkdownString('Führt eine Suche auf einen JSON-Text durch und schreibt das Ergebnis ggf. in eine csv Datei');
                items.push(queryJsonCommandCompletion);

                const querySqlCommandCompletion = new vscode.CompletionItem('querySql');
                querySqlCommandCompletion.kind = vscode.CompletionItemKind.Function;
                querySqlCommandCompletion.insertText = new vscode.SnippetString('querySql(CONNECTION_NAME = "$1")');
                querySqlCommandCompletion.documentation = new vscode.MarkdownString('Setzt eine Query an bestehende Datenbankverbindung ab.');
                items.push(querySqlCommandCompletion);

                const queryXMLCommandCompletion = new vscode.CompletionItem('queryXML');
                queryXMLCommandCompletion.kind = vscode.CompletionItemKind.Function;
                queryXMLCommandCompletion.insertText = new vscode.SnippetString('queryXML(XMLTEXT = "$1", EXPRESSION = "$2")');
                queryXMLCommandCompletion.documentation = new vscode.MarkdownString('Führt eine Suche auf einen XML-Text durch und schreibt das Ergebnis ggf. in eine csv Datei');
                items.push(queryXMLCommandCompletion);

                const readFileToStorageCommandCompletion = new vscode.CompletionItem('readFileToStorage');
                readFileToStorageCommandCompletion.kind = vscode.CompletionItemKind.Function;
                readFileToStorageCommandCompletion.insertText = new vscode.SnippetString('readFileToStorage(FILENAME = "$1", TARGET_STORAGE_KEY = "$2")');
                readFileToStorageCommandCompletion.documentation = new vscode.MarkdownString('Liest den Inhalt einer Datei in eine Storage-Variable ein.');
                items.push(readFileToStorageCommandCompletion);

                const readTextInPictureCommandCompletion = new vscode.CompletionItem('readTextInPicture');
                readTextInPictureCommandCompletion.kind = vscode.CompletionItemKind.Function;
                readTextInPictureCommandCompletion.insertText = new vscode.SnippetString('readTextInPicture(TARGET_STORAGE_KEY = "$1")');
                readTextInPictureCommandCompletion.documentation = new vscode.MarkdownString('Untersucht ein Bild oder einen Ausschnitt, und schreibt die gefundenen Worte in die Storage-Datei.');
                items.push(readTextInPictureCommandCompletion);

                const receiveMailCommandCompletion = new vscode.CompletionItem('receiveMail');
                receiveMailCommandCompletion.kind = vscode.CompletionItemKind.Function;
                receiveMailCommandCompletion.insertText = new vscode.SnippetString('receiveMail(SERVER = "$1", USER = "$2", PASSWORD = "$3", FOLDER = "$4", SUBJECT = "$5", SEARCH = "$6", LOCATION = "$7", TARGET_STORAGE_KEY = "$8")');
                receiveMailCommandCompletion.documentation = new vscode.MarkdownString('Fragt EINE E-Mail in einem bestimmten Ordner mit bestimmtem Betreff ab.    Es kann im Betreff oder im Textkörper der E-Mail mit einem regulären Ausdruck nach Inhalten gesucht  werden. Das Ergebnis dieser Suche wird in der Variable gespeichert, die mit TARGET_STORAGE_KEY benannt wird.    Anhänge der E-Mail können an einen gewünschten Ort abgespeichert werden. Die Namen der vorhandenen Anhänge können in ATTACHMENT_NAME_TARGET_STORAGE_KEY gespeichert werden. Ist mehr als    eine Datei angehangen, werden die Dateinamen in der angegebenen Storage-Variable mit Semikola (";") getrennt. Wichtig ist, dass das System korrekt konfiguriert ist. Ggf. muss z. B. eine etwaige Firewall    den Zugriff auf den angegebenen Mailserver zulassen.');
                items.push(receiveMailCommandCompletion);

                const receiveUnseenMailsSaveAttachmentCommandCompletion = new vscode.CompletionItem('receiveUnseenMailsSaveAttachment');
                receiveUnseenMailsSaveAttachmentCommandCompletion.kind = vscode.CompletionItemKind.Function;
                receiveUnseenMailsSaveAttachmentCommandCompletion.insertText = new vscode.SnippetString('receiveUnseenMailsSaveAttachment(SERVER = "$1", USER = "$2", PASSWORD = "$3", SUBJECT = "$4", FOLDER = "$5", ATTACHMENT_NAME_TARGET_STORAGE_KEY = "$6")');
                receiveUnseenMailsSaveAttachmentCommandCompletion.documentation = new vscode.MarkdownString('Fragt alle ungelesenen Mails ab.   Anhänge der E-Mail können an einen gewünschten Ort abgespeichert werden. Die Namen der vorhandenen Anhänge können in ATTACHMENT_NAME_TARGET_STORAGE_KEY gespeichert werden. Ist mehr als    eine Datei angehangen, werden die Dateinamen in der angegebenen Storage-Variable mit Semikola (";") getrennt. Wichtig ist, dass das System korrekt konfiguriert ist. Ggf. muss z. B. eine etwaige Firewall    den Zugriff auf den angegebenen Mailserver zulassen.');
                items.push(receiveUnseenMailsSaveAttachmentCommandCompletion);

                const refreshWebCommandCompletion = new vscode.CompletionItem('refreshWeb');
                refreshWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                refreshWebCommandCompletion.insertText = new vscode.SnippetString('refreshWeb()');
                refreshWebCommandCompletion.documentation = new vscode.MarkdownString('Aktualisiert die aktuelle Seite.');
                items.push(refreshWebCommandCompletion);

                const removeDuplicatesCommandCompletion = new vscode.CompletionItem('removeDuplicates');
                removeDuplicatesCommandCompletion.kind = vscode.CompletionItemKind.Function;
                removeDuplicatesCommandCompletion.insertText = new vscode.SnippetString('removeDuplicates(TEXT = "$1")');
                removeDuplicatesCommandCompletion.documentation = new vscode.MarkdownString('Unterteilt einem Text, z.B. eine Auflistung, anhand von Kommata oder Zeilenbrüchenund entfernt alle mehrfach vorkommenden Teile.');
                items.push(removeDuplicatesCommandCompletion);

                const renderFullscreenImageCommandCompletion = new vscode.CompletionItem('renderFullscreenImage');
                renderFullscreenImageCommandCompletion.kind = vscode.CompletionItemKind.Function;
                renderFullscreenImageCommandCompletion.insertText = new vscode.SnippetString('renderFullscreenImage()');
                renderFullscreenImageCommandCompletion.documentation = new vscode.MarkdownString('Rendert ein Bild als Vollbild. Es kann immer nur ein derartiges Bild gleichzeitig angezeigt werden.');
                items.push(renderFullscreenImageCommandCompletion);

                const renderOverlayImageCommandCompletion = new vscode.CompletionItem('renderOverlayImage');
                renderOverlayImageCommandCompletion.kind = vscode.CompletionItemKind.Function;
                renderOverlayImageCommandCompletion.insertText = new vscode.SnippetString('renderOverlayImage()');
                renderOverlayImageCommandCompletion.documentation = new vscode.MarkdownString('Rendert ein Bild über der Zielanwendung. Standardmäßig wird dieses dauerhaft angezeigt. Es kann immer nur ein derartiges Bild gleichzeitig angezeigt werden. Mit dem Parameter "DURATION" kann eine benutzerdefinierte Anzeigedauer festgelegt werden. Ohne die Angabe einer benutzerdefinierten Anzeigedauer wird das Bild dauerhaft angezeigt. Mittels der Parameter "WIDTH" und "HEIGHT" kann die Breite sowie die Höhe des anzuzeigenden Bildes festgelegt werden. Ohne die Angabe einer benutzerdefinierten Breite bzw. Höhe wird die Original-Breite bzw. -Höhe des Bildes genutzt. Falls nur ein Parameter ("WIDTH" oder "HEIGHT") angegeben wurde, wird das anzuzeigende Bild entsprechend gestreckt. Dabei wird das originale Seitenverhältnis außer Kraft gesetzt. ');
                items.push(renderOverlayImageCommandCompletion);

                const renderTextCommandCompletion = new vscode.CompletionItem('renderText');
                renderTextCommandCompletion.kind = vscode.CompletionItemKind.Function;
                renderTextCommandCompletion.insertText = new vscode.SnippetString('renderText()');
                renderTextCommandCompletion.documentation = new vscode.MarkdownString('Zeigt einen einzelnen Text auf dem Bildschirm an. Es kann immer nur ein derartiger Text gleichzeitig angezeigt werden. Die Anzeigedauer wird anhand des anzuzeigenden Textes berechnet, oder mittels des Parameters "DURATION" benutzerdefiniert festgelegt. ');
                items.push(renderTextCommandCompletion);

                const replaceInTextCommandCompletion = new vscode.CompletionItem('replaceInText');
                replaceInTextCommandCompletion.kind = vscode.CompletionItemKind.Function;
                replaceInTextCommandCompletion.insertText = new vscode.SnippetString('replaceInText(TEXT_OR_FILE = "$1", TARGET_STORAGE_KEY = "$2")');
                replaceInTextCommandCompletion.documentation = new vscode.MarkdownString('Ersetzt ein bestimmtes Wort oder einen festen Teilbereich in einem Text mit einem beliebigen Text.              Das Kommando sucht nach WORD_TO_REPLACE im Text und ersetzt jedes Vorkommen mit SUBSTITUTE.              Das bedeutet, dass bei mehreren Vorkommen des WORD_TO_REPLACE auch mehrere Ersetzungen stattfinden.               Werden die Parameter POS_FROM und POS_TO gesetzt, wird nicht nach WORD_TO_REPLACE gesucht, sondern der Text              zwischen den Positionen mit SUBSTITUTE ersetzt.');
                items.push(replaceInTextCommandCompletion);

                const replaceStringInStorageValueCommandCompletion = new vscode.CompletionItem('replaceStringInStorageValue');
                replaceStringInStorageValueCommandCompletion.kind = vscode.CompletionItemKind.Function;
                replaceStringInStorageValueCommandCompletion.insertText = new vscode.SnippetString('replaceStringInStorageValue(SOURCE_KEY = "$1", REGEX_TO_FIND = "$2")');
                replaceStringInStorageValueCommandCompletion.documentation = new vscode.MarkdownString('Ersetzt eine Regex in einer Variable. ');
                items.push(replaceStringInStorageValueCommandCompletion);

                const resetContextCommandCompletion = new vscode.CompletionItem('resetContext');
                resetContextCommandCompletion.kind = vscode.CompletionItemKind.Function;
                resetContextCommandCompletion.insertText = new vscode.SnippetString('resetContext()');
                resetContextCommandCompletion.documentation = new vscode.MarkdownString('Re-initialisiert den TestContext. Dadurch werden unter anderem in Laufzeit-Properties gelöscht, die in Kommandos, die außerhalb von Testsets gestartet wurden (z.B. direkt aus dem Excel-Testsheet). Dieses Kommando darf nur einzeln aufgerufen werden (z.B. über die "Kommando ausühren"-Schaltfläche im Excel-Testsheet), nicht jedoch als Teil der Ausführung eines gesamten Testsets.');
                items.push(resetContextCommandCompletion);

                const rotateMobileCommandCompletion = new vscode.CompletionItem('rotateMobile');
                rotateMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                rotateMobileCommandCompletion.insertText = new vscode.SnippetString('rotateMobile(ORIENTATION = "$1")');
                rotateMobileCommandCompletion.documentation = new vscode.MarkdownString('Rotiert das Gerät bzw. den Simulator (Beispiel: RotateMobile("LANDSCAPE")).');
                items.push(rotateMobileCommandCompletion);

                const runAppInBackgroundMobileCommandCompletion = new vscode.CompletionItem('runAppInBackgroundMobile');
                runAppInBackgroundMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                runAppInBackgroundMobileCommandCompletion.insertText = new vscode.SnippetString('runAppInBackgroundMobile(WAIT_SECONDS = "$1")');
                runAppInBackgroundMobileCommandCompletion.documentation = new vscode.MarkdownString('Die aktuell geöffnete App wird für eine gewisse Zeit in den Hintergrund geschoben. Nach Ablauf dieser Zeit wird die App wieder in den Vordergrund geholt. Dieser Befehl ist notwenig, wenn simuliert werden soll, dass der Benutzer die aktive App wechselt, um zwischen verschiedenen Apps hin- und herzuspringen. Nachdem eine App anschließend wieder geöffnet wird, sollte der alte Zustand der App vorhanden sein, öffnet man aber die Applikation über das Kommando "startAndroid" wird eine neue Activitiy aufgebaut und der alte Zustand wird nicht beibehalten (Beispiel: runAppInBackgroundMobile("", "", "", "500")).');
                items.push(runAppInBackgroundMobileCommandCompletion);

                const runJavascriptAndroidCommandCompletion = new vscode.CompletionItem('runJavascriptAndroid');
                runJavascriptAndroidCommandCompletion.kind = vscode.CompletionItemKind.Function;
                runJavascriptAndroidCommandCompletion.insertText = new vscode.SnippetString('runJavascriptAndroid(JAVASCRIPT_TO_RUN = "$1")');
                runJavascriptAndroidCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando führt ein Java-Skript auf dem mobilen Gerät durch (Beispiel: runJavascriptAndroid("window.scrollTo(0,100);"). Im Beispiel wird im aktuellen Fenster 100 Pixel nach oben gescrollt.).');
                items.push(runJavascriptAndroidCommandCompletion);

                const runJavascriptWebCommandCompletion = new vscode.CompletionItem('runJavascriptWeb');
                runJavascriptWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                runJavascriptWebCommandCompletion.insertText = new vscode.SnippetString('runJavascriptWeb(JS_SCRIPT_OR_FILE = "$1")');
                runJavascriptWebCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando führt Javascript aus.');
                items.push(runJavascriptWebCommandCompletion);

                const sapConnectionNumberClearCommandCompletion = new vscode.CompletionItem('sapConnectionNumberClear');
                sapConnectionNumberClearCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapConnectionNumberClearCommandCompletion.insertText = new vscode.SnippetString('sapConnectionNumberClear()');
                sapConnectionNumberClearCommandCompletion.documentation = new vscode.MarkdownString('Leert die Connection Nr der aktuell zu steuernden SAP Session. Dadurch wird wieder über alle vorhandenen Sessions gesucht.');
                items.push(sapConnectionNumberClearCommandCompletion);

                const sapConnectionNumberSetCommandCompletion = new vscode.CompletionItem('sapConnectionNumberSet');
                sapConnectionNumberSetCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapConnectionNumberSetCommandCompletion.insertText = new vscode.SnippetString('sapConnectionNumberSet(CONNECTION_NR = "$1")');
                sapConnectionNumberSetCommandCompletion.documentation = new vscode.MarkdownString('Setzt die Connection Nr der aktuell zu steuernden SAP Session. Dies wird benötigt, wenn mehr als eine SAP Instanz gesteuert werden soll.');
                items.push(sapConnectionNumberSetCommandCompletion);

                const sapContextMenuCommandCompletion = new vscode.CompletionItem('sapContextMenu');
                sapContextMenuCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapContextMenuCommandCompletion.insertText = new vscode.SnippetString('sapContextMenu(OBJECT_ID = "$1")');
                sapContextMenuCommandCompletion.documentation = new vscode.MarkdownString('Öffnet des Kontext Menü eines Objekts.');
                items.push(sapContextMenuCommandCompletion);

                const sapDoubleClickCommandCompletion = new vscode.CompletionItem('sapDoubleClick');
                sapDoubleClickCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapDoubleClickCommandCompletion.insertText = new vscode.SnippetString('sapDoubleClick(OBJECT_ID = "$1")');
                sapDoubleClickCommandCompletion.documentation = new vscode.MarkdownString('Doppelklickt ein Objekt.');
                items.push(sapDoubleClickCommandCompletion);

                const sapFindStringInTreeAndDoubleClickCommandCompletion = new vscode.CompletionItem('sapFindStringInTreeAndDoubleClick');
                sapFindStringInTreeAndDoubleClickCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapFindStringInTreeAndDoubleClickCommandCompletion.insertText = new vscode.SnippetString('sapFindStringInTreeAndDoubleClick(OBJECT_ID = "$1", SUBSTRING = "$2")');
                sapFindStringInTreeAndDoubleClickCommandCompletion.documentation = new vscode.MarkdownString('Sucht einen Ausdruck innerhalb eines Objekt-Containers (z.B.: shell) und führt einen doubleClickNode aus.');
                items.push(sapFindStringInTreeAndDoubleClickCommandCompletion);

                const sapFindStringInTreeAndSelectCommandCompletion = new vscode.CompletionItem('sapFindStringInTreeAndSelect');
                sapFindStringInTreeAndSelectCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapFindStringInTreeAndSelectCommandCompletion.insertText = new vscode.SnippetString('sapFindStringInTreeAndSelect(OBJECT_ID = "$1", SUBSTRING = "$2")');
                sapFindStringInTreeAndSelectCommandCompletion.documentation = new vscode.MarkdownString('Sucht einen Ausdruck innerhalb eines Objekt-Containers (z.B.: shell) und führt ein selectNode aus.');
                items.push(sapFindStringInTreeAndSelectCommandCompletion);

                const sapFindStringInTreeByRegexAndDoubleClickCommandCompletion = new vscode.CompletionItem('sapFindStringInTreeByRegexAndDoubleClick');
                sapFindStringInTreeByRegexAndDoubleClickCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapFindStringInTreeByRegexAndDoubleClickCommandCompletion.insertText = new vscode.SnippetString('sapFindStringInTreeByRegexAndDoubleClick(OBJECT_ID = "$1", SUBSTRING = "$2")');
                sapFindStringInTreeByRegexAndDoubleClickCommandCompletion.documentation = new vscode.MarkdownString('Sucht einen regulären Ausdruck innerhalb eines Objekt-Containers (z.B.: shell) und führt ein doubleClickNode aus.');
                items.push(sapFindStringInTreeByRegexAndDoubleClickCommandCompletion);

                const sapFindStringInTreeByRegexAndSelectCommandCompletion = new vscode.CompletionItem('sapFindStringInTreeByRegexAndSelect');
                sapFindStringInTreeByRegexAndSelectCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapFindStringInTreeByRegexAndSelectCommandCompletion.insertText = new vscode.SnippetString('sapFindStringInTreeByRegexAndSelect(OBJECT_ID = "$1", SUBSTRING = "$2")');
                sapFindStringInTreeByRegexAndSelectCommandCompletion.documentation = new vscode.MarkdownString('Sucht einen regulären Ausdruck innerhalb eines Objekt-Containers (z.B.: shell) und führt ein selectNode aus.');
                items.push(sapFindStringInTreeByRegexAndSelectCommandCompletion);

                const sapFindStringInTreeUseFunctionCommandCompletion = new vscode.CompletionItem('sapFindStringInTreeUseFunction');
                sapFindStringInTreeUseFunctionCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapFindStringInTreeUseFunctionCommandCompletion.insertText = new vscode.SnippetString('sapFindStringInTreeUseFunction(OBJECT_ID = "$1", SUBSTRING = "$2", FUNCTION = "$3")');
                sapFindStringInTreeUseFunctionCommandCompletion.documentation = new vscode.MarkdownString('Sucht nach einem String in einer Tree und führt eine Funktion im Kontextmenü aus.');
                items.push(sapFindStringInTreeUseFunctionCommandCompletion);

                const sapGetCellValueCommandCompletion = new vscode.CompletionItem('sapGetCellValue');
                sapGetCellValueCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapGetCellValueCommandCompletion.insertText = new vscode.SnippetString('sapGetCellValue(OBJECT_ID = "$1", ROW_NUMBER = "$2", COLUMN_NAME = "$3", TARGET_STORAGE_KEY = "$4")');
                sapGetCellValueCommandCompletion.documentation = new vscode.MarkdownString('Erfassen des Wertes einer Zelle in einer SAP-Tabelle.');
                items.push(sapGetCellValueCommandCompletion);

                const sapGetRowNrWithRegexCommandCompletion = new vscode.CompletionItem('sapGetRowNrWithRegex');
                sapGetRowNrWithRegexCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapGetRowNrWithRegexCommandCompletion.insertText = new vscode.SnippetString('sapGetRowNrWithRegex(OBJECT_ID = "$1", COLUMN_NAME = "$2", REGEX = "$3", TARGET_STORAGE_KEY = "$4")');
                sapGetRowNrWithRegexCommandCompletion.documentation = new vscode.MarkdownString('Liest den Wert einer Spalte anhand einer Regex aus.');
                items.push(sapGetRowNrWithRegexCommandCompletion);

                const sapGetValueOfRowWithRegexCommandCompletion = new vscode.CompletionItem('sapGetValueOfRowWithRegex');
                sapGetValueOfRowWithRegexCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapGetValueOfRowWithRegexCommandCompletion.insertText = new vscode.SnippetString('sapGetValueOfRowWithRegex(OBJECT_ID = "$1", COLUMN_NAME = "$2", REGEX = "$3", TARGET_STORAGE_KEY = "$4")');
                sapGetValueOfRowWithRegexCommandCompletion.documentation = new vscode.MarkdownString('Liest den Wert einer Spalte anhand einer Regex aus.');
                items.push(sapGetValueOfRowWithRegexCommandCompletion);

                const sapNodeCollapseByKeyCommandCompletion = new vscode.CompletionItem('sapNodeCollapseByKey');
                sapNodeCollapseByKeyCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapNodeCollapseByKeyCommandCompletion.insertText = new vscode.SnippetString('sapNodeCollapseByKey(OBJECT_ID = "$1", NODE = "$2")');
                sapNodeCollapseByKeyCommandCompletion.documentation = new vscode.MarkdownString('Ein Node innerhalb eines SAP Objekt-Containers (z.B. shell) wird zusammengeklappt.');
                items.push(sapNodeCollapseByKeyCommandCompletion);

                const sapNodeContextMenuCommandCompletion = new vscode.CompletionItem('sapNodeContextMenu');
                sapNodeContextMenuCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapNodeContextMenuCommandCompletion.insertText = new vscode.SnippetString('sapNodeContextMenu(OBJECT_ID = "$1", NODE = "$2")');
                sapNodeContextMenuCommandCompletion.documentation = new vscode.MarkdownString('Wählt eine Node eines SAP Kontext Menüs aus.');
                items.push(sapNodeContextMenuCommandCompletion);

                const sapNodeDoubleClickCommandCompletion = new vscode.CompletionItem('sapNodeDoubleClick');
                sapNodeDoubleClickCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapNodeDoubleClickCommandCompletion.insertText = new vscode.SnippetString('sapNodeDoubleClick(OBJECT_ID = "$1", NODE = "$2")');
                sapNodeDoubleClickCommandCompletion.documentation = new vscode.MarkdownString('Doppelklickt eine Node eines SAP Kontext Menüs aus.');
                items.push(sapNodeDoubleClickCommandCompletion);

                const sapNodeExpandByKeyCommandCompletion = new vscode.CompletionItem('sapNodeExpandByKey');
                sapNodeExpandByKeyCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapNodeExpandByKeyCommandCompletion.insertText = new vscode.SnippetString('sapNodeExpandByKey(OBJECT_ID = "$1", NODE = "$2")');
                sapNodeExpandByKeyCommandCompletion.documentation = new vscode.MarkdownString('Ein Node innerhalb eines SAP Objekt-Containers (z.B. shell) wird erweitert bzw. aufgeklappt.');
                items.push(sapNodeExpandByKeyCommandCompletion);

                const sapObjDeselectCommandCompletion = new vscode.CompletionItem('sapObjDeselect');
                sapObjDeselectCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapObjDeselectCommandCompletion.insertText = new vscode.SnippetString('sapObjDeselect(OBJECT_ID = "$1")');
                sapObjDeselectCommandCompletion.documentation = new vscode.MarkdownString('Unselektiert ein Objekt.');
                items.push(sapObjDeselectCommandCompletion);

                const sapObjFindByRegexCommandCompletion = new vscode.CompletionItem('sapObjFindByRegex');
                sapObjFindByRegexCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapObjFindByRegexCommandCompletion.insertText = new vscode.SnippetString('sapObjFindByRegex(REGEX = "$1", TARGET_STORAGE_KEY = "$2")');
                sapObjFindByRegexCommandCompletion.documentation = new vscode.MarkdownString('Sucht ein ein Objekt anhand eines regulären Ausdrucks (regex) und gibt die Id des gefundenen Elements zurück.');
                items.push(sapObjFindByRegexCommandCompletion);

                const sapObjFindByValueCommandCompletion = new vscode.CompletionItem('sapObjFindByValue');
                sapObjFindByValueCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapObjFindByValueCommandCompletion.insertText = new vscode.SnippetString('sapObjFindByValue(OBJECT_VALUE = "$1", TARGET_STORAGE_KEY = "$2")');
                sapObjFindByValueCommandCompletion.documentation = new vscode.MarkdownString('Sucht ein ein Objekt anhand des Values. Gibt die Id des gefundenen Elements zurück.');
                items.push(sapObjFindByValueCommandCompletion);

                const sapObjPressCommandCompletion = new vscode.CompletionItem('sapObjPress');
                sapObjPressCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapObjPressCommandCompletion.insertText = new vscode.SnippetString('sapObjPress(OBJECT_ID = "$1")');
                sapObjPressCommandCompletion.documentation = new vscode.MarkdownString('Führt die Press Methode auf dem Zielelement aus.');
                items.push(sapObjPressCommandCompletion);

                const sapObjPropertyGetCommandCompletion = new vscode.CompletionItem('sapObjPropertyGet');
                sapObjPropertyGetCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapObjPropertyGetCommandCompletion.insertText = new vscode.SnippetString('sapObjPropertyGet(OBJECT_ID = "$1", OBJECT_PROPERTY = "$2", TARGET_STORAGE_KEY = "$3")');
                sapObjPropertyGetCommandCompletion.documentation = new vscode.MarkdownString('Liest den Wert eines Attributs eines Objekts aus.');
                items.push(sapObjPropertyGetCommandCompletion);

                const sapObjPropertySetCommandCompletion = new vscode.CompletionItem('sapObjPropertySet');
                sapObjPropertySetCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapObjPropertySetCommandCompletion.insertText = new vscode.SnippetString('sapObjPropertySet(OBJECT_ID = "$1", OBJECT_PROPERTY = "$2", OBJECT_VALUE = "$3")');
                sapObjPropertySetCommandCompletion.documentation = new vscode.MarkdownString('Setzt den Wert eines Attributs eines Objekts.');
                items.push(sapObjPropertySetCommandCompletion);

                const sapObjSelectCommandCompletion = new vscode.CompletionItem('sapObjSelect');
                sapObjSelectCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapObjSelectCommandCompletion.insertText = new vscode.SnippetString('sapObjSelect(OBJECT_ID = "$1")');
                sapObjSelectCommandCompletion.documentation = new vscode.MarkdownString('Selektiert/Clickt ein Objekt.');
                items.push(sapObjSelectCommandCompletion);

                const sapObjSelectColumnCommandCompletion = new vscode.CompletionItem('sapObjSelectColumn');
                sapObjSelectColumnCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapObjSelectColumnCommandCompletion.insertText = new vscode.SnippetString('sapObjSelectColumn(OBJECT_ID = "$1", COLUMN_ID = "$2")');
                sapObjSelectColumnCommandCompletion.documentation = new vscode.MarkdownString('Eine Spalte innerhalb eines Objekt-Containers (z.B. shell) wird anhand der technischen Spaltenbezeichnung ausgewählt. Die technische Spaltenbezeichnung kann z.B. über einen SAP Scripting Tracker mittels des DumpState ausgelesen werden.');
                items.push(sapObjSelectColumnCommandCompletion);

                const sapObjSelectKeyCommandCompletion = new vscode.CompletionItem('sapObjSelectKey');
                sapObjSelectKeyCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapObjSelectKeyCommandCompletion.insertText = new vscode.SnippetString('sapObjSelectKey(OBJECT_ID = "$1", KEY_VALUE = "$2")');
                sapObjSelectKeyCommandCompletion.documentation = new vscode.MarkdownString('Selektiert den Objekt-Schlüssel eines Objekt-Containers (z.B.: von SAP-Shell-Objekten).');
                items.push(sapObjSelectKeyCommandCompletion);

                const sapObjSetFocusCommandCompletion = new vscode.CompletionItem('sapObjSetFocus');
                sapObjSetFocusCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapObjSetFocusCommandCompletion.insertText = new vscode.SnippetString('sapObjSetFocus(OBJECT_ID = "$1")');
                sapObjSetFocusCommandCompletion.documentation = new vscode.MarkdownString('Setzt den Fokus auf ein Zielelement');
                items.push(sapObjSetFocusCommandCompletion);

                const sapObjValueGetCommandCompletion = new vscode.CompletionItem('sapObjValueGet');
                sapObjValueGetCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapObjValueGetCommandCompletion.insertText = new vscode.SnippetString('sapObjValueGet(OBJECT_ID = "$1", TARGET_STORAGE_KEY = "$2")');
                sapObjValueGetCommandCompletion.documentation = new vscode.MarkdownString('Liest den Wert eines Objekts aus.');
                items.push(sapObjValueGetCommandCompletion);

                const sapObjValueSetCommandCompletion = new vscode.CompletionItem('sapObjValueSet');
                sapObjValueSetCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapObjValueSetCommandCompletion.insertText = new vscode.SnippetString('sapObjValueSet(OBJECT_ID = "$1", OBJECT_VALUE = "$2")');
                sapObjValueSetCommandCompletion.documentation = new vscode.MarkdownString('Setzt den Wert eines Objekts.');
                items.push(sapObjValueSetCommandCompletion);

                const sapPressContextButtonCommandCompletion = new vscode.CompletionItem('sapPressContextButton');
                sapPressContextButtonCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapPressContextButtonCommandCompletion.insertText = new vscode.SnippetString('sapPressContextButton(OBJECT_ID = "$1", BUTTON = "$2")');
                sapPressContextButtonCommandCompletion.documentation = new vscode.MarkdownString('Führt die Press Methode für einen Context-Button aus.');
                items.push(sapPressContextButtonCommandCompletion);

                const sapSelectComboBoxEntryByValueCommandCompletion = new vscode.CompletionItem('sapSelectComboBoxEntryByValue');
                sapSelectComboBoxEntryByValueCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapSelectComboBoxEntryByValueCommandCompletion.insertText = new vscode.SnippetString('sapSelectComboBoxEntryByValue(OBJECT_ID = "$1", SEARCHSTRING = "$2")');
                sapSelectComboBoxEntryByValueCommandCompletion.documentation = new vscode.MarkdownString('Wählt einen Combo-Box-Eintrag anhand des Wertes aus.');
                items.push(sapSelectComboBoxEntryByValueCommandCompletion);

                const sapSelectContextMenuItemCommandCompletion = new vscode.CompletionItem('sapSelectContextMenuItem');
                sapSelectContextMenuItemCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapSelectContextMenuItemCommandCompletion.insertText = new vscode.SnippetString('sapSelectContextMenuItem(OBJECT_ID = "$1", ITEM = "$2")');
                sapSelectContextMenuItemCommandCompletion.documentation = new vscode.MarkdownString('Selektiert ein Kontext Menü Item (Wählt dieses nicht notwendigerweise aus, in dem Fall noch SapNodeContextMenu oder SapNodeDoubleClick verwenden).');
                items.push(sapSelectContextMenuItemCommandCompletion);

                const sapSelectContextMenuItemByPositionCommandCompletion = new vscode.CompletionItem('sapSelectContextMenuItemByPosition');
                sapSelectContextMenuItemByPositionCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapSelectContextMenuItemByPositionCommandCompletion.insertText = new vscode.SnippetString('sapSelectContextMenuItemByPosition(OBJECT_ID = "$1", POSITION = "$2")');
                sapSelectContextMenuItemByPositionCommandCompletion.documentation = new vscode.MarkdownString('Selektiert ein Kontext Menü Item anhand der Position.');
                items.push(sapSelectContextMenuItemByPositionCommandCompletion);

                const sapSessAttachCommandCompletion = new vscode.CompletionItem('sapSessAttach');
                sapSessAttachCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapSessAttachCommandCompletion.insertText = new vscode.SnippetString('sapSessAttach(WINDOW_NAME = "$1")');
                sapSessAttachCommandCompletion.documentation = new vscode.MarkdownString('Wird verwendet um den SAP Treiber an eine bestimmte Session anzudocken. Dies ist notwendig bevor alle weiteren Kommandos verwendet werden können.');
                items.push(sapSessAttachCommandCompletion);

                const sapSessCreateCommandCompletion = new vscode.CompletionItem('sapSessCreate');
                sapSessCreateCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapSessCreateCommandCompletion.insertText = new vscode.SnippetString('sapSessCreate()');
                sapSessCreateCommandCompletion.documentation = new vscode.MarkdownString('Erzeugt eine neue SAP Session. Es muss vorher bereits an eine Session angedockt worden sein mittels SapSessAttach.');
                items.push(sapSessCreateCommandCompletion);

                const sapSetCurrentCellFocusCommandCompletion = new vscode.CompletionItem('sapSetCurrentCellFocus');
                sapSetCurrentCellFocusCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapSetCurrentCellFocusCommandCompletion.insertText = new vscode.SnippetString('sapSetCurrentCellFocus(OBJECT_ID = "$1", COLUMN_NAME = "$2", ROW_NUMBER = "$3")');
                sapSetCurrentCellFocusCommandCompletion.documentation = new vscode.MarkdownString('Es wird eine Zelle in einer SAP-Tabelle fokussiert.');
                items.push(sapSetCurrentCellFocusCommandCompletion);

                const sapShowContextMenuCommandCompletion = new vscode.CompletionItem('sapShowContextMenu');
                sapShowContextMenuCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapShowContextMenuCommandCompletion.insertText = new vscode.SnippetString('sapShowContextMenu(OBJECT_ID = "$1")');
                sapShowContextMenuCommandCompletion.documentation = new vscode.MarkdownString('Öffnet das Kontextmenü für ein Objekt.');
                items.push(sapShowContextMenuCommandCompletion);

                const sapVKeysSendCommandCompletion = new vscode.CompletionItem('sapVKeysSend');
                sapVKeysSendCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapVKeysSendCommandCompletion.insertText = new vscode.SnippetString('sapVKeysSend(VKEYS_TO_SEND = "$1")');
                sapVKeysSendCommandCompletion.documentation = new vscode.MarkdownString('Versendet VKeys an die aktuelle SAP Session. Verfügbar sind folgende Tasten bzw. Tastenkombinationen:  Enter, F1 bis F12, Shift+F1 bis F12, Shift+Ctrl+0, Ctrl+F1 bis F12, Ctrl+Shift+F1 bis F12, Ctrl+E, Ctrl+F, Ctrl+A, Ctrl+D, Ctrl+N, Ctrl+O, Shift+D, Ctrl+I, Shift+I, Alt+B, Ctrl+Page up, Page up, Page down, Ctrl+Page down, Ctrl+G, Ctrl+R, Ctrl+P.');
                items.push(sapVKeysSendCommandCompletion);

                const sapVKeysSendUntilWinExistsCommandCompletion = new vscode.CompletionItem('sapVKeysSendUntilWinExists');
                sapVKeysSendUntilWinExistsCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapVKeysSendUntilWinExistsCommandCompletion.insertText = new vscode.SnippetString('sapVKeysSendUntilWinExists(VKEYS_TO_SEND = "$1", WIN_TITLE = "$2")');
                sapVKeysSendUntilWinExistsCommandCompletion.documentation = new vscode.MarkdownString('Versendet VKeys an die aktuelle SAP Session bis ein Zielfenster existiert. ACHTUNG: KANN ENDLOSSCHLEIFEN ERZEUGEN!');
                items.push(sapVKeysSendUntilWinExistsCommandCompletion);

                const sapVerticalScrollbarPositionCommandCompletion = new vscode.CompletionItem('sapVerticalScrollbarPosition');
                sapVerticalScrollbarPositionCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapVerticalScrollbarPositionCommandCompletion.insertText = new vscode.SnippetString('sapVerticalScrollbarPosition(OBJECT_ID = "$1", POSITION = "$2")');
                sapVerticalScrollbarPositionCommandCompletion.documentation = new vscode.MarkdownString('Setzt die Position der vertikalen Scrollbar für ein Objekt.');
                items.push(sapVerticalScrollbarPositionCommandCompletion);

                const sapVerticalScrollbarPositionIncreaseCommandCompletion = new vscode.CompletionItem('sapVerticalScrollbarPositionIncrease');
                sapVerticalScrollbarPositionIncreaseCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapVerticalScrollbarPositionIncreaseCommandCompletion.insertText = new vscode.SnippetString('sapVerticalScrollbarPositionIncrease(OBJECT_ID = "$1", INCREASE = "$2")');
                sapVerticalScrollbarPositionIncreaseCommandCompletion.documentation = new vscode.MarkdownString('Verändert die Position der vertikalen Scrollbar für ein Objekt.');
                items.push(sapVerticalScrollbarPositionIncreaseCommandCompletion);

                const sapWinCloseCommandCompletion = new vscode.CompletionItem('sapWinClose');
                sapWinCloseCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapWinCloseCommandCompletion.insertText = new vscode.SnippetString('sapWinClose(WIN_TITLE = "$1")');
                sapWinCloseCommandCompletion.documentation = new vscode.MarkdownString('Schließt ein SAP Fenster.');
                items.push(sapWinCloseCommandCompletion);

                const sapWinExistsCommandCompletion = new vscode.CompletionItem('sapWinExists');
                sapWinExistsCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapWinExistsCommandCompletion.insertText = new vscode.SnippetString('sapWinExists(WIN_TITLE = "$1")');
                sapWinExistsCommandCompletion.documentation = new vscode.MarkdownString('Prüft ob ein SAP Fenster mit einem bestimmten Namen existiert.');
                items.push(sapWinExistsCommandCompletion);

                const sapWinNumberSetCommandCompletion = new vscode.CompletionItem('sapWinNumberSet');
                sapWinNumberSetCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sapWinNumberSetCommandCompletion.insertText = new vscode.SnippetString('sapWinNumberSet(WINDOW_NR = "$1")');
                sapWinNumberSetCommandCompletion.documentation = new vscode.MarkdownString('Setzt die Fensternummer des aktuell zu steuernden SAP Fensters. Dies wird benötigt, wenn z.B. PopUps erscheinen.');
                items.push(sapWinNumberSetCommandCompletion);

                const savePictureWebCommandCompletion = new vscode.CompletionItem('savePictureWeb');
                savePictureWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                savePictureWebCommandCompletion.insertText = new vscode.SnippetString('savePictureWeb(ELEMENT_NAME = "$1", TARGET_PATH = "$2")');
                savePictureWebCommandCompletion.documentation = new vscode.MarkdownString('Lädt ein Bild von einer Webseite.');
                items.push(savePictureWebCommandCompletion);

                const scrollDownMobileCommandCompletion = new vscode.CompletionItem('scrollDownMobile');
                scrollDownMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                scrollDownMobileCommandCompletion.insertText = new vscode.SnippetString('scrollDownMobile()');
                scrollDownMobileCommandCompletion.documentation = new vscode.MarkdownString('Der Befehl scrollt herunter.');
                items.push(scrollDownMobileCommandCompletion);

                const scrollMobileCommandCompletion = new vscode.CompletionItem('scrollMobile');
                scrollMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                scrollMobileCommandCompletion.insertText = new vscode.SnippetString('scrollMobile(FROM_X = "$1", FROM_Y = "$2", TO_X = "$3", TO_Y = "$4")');
                scrollMobileCommandCompletion.documentation = new vscode.MarkdownString('Der Befehl scrollt von einem Startpunkt zu einem Endpunkt.');
                items.push(scrollMobileCommandCompletion);

                const scrollMouseWheelCommandCompletion = new vscode.CompletionItem('scrollMouseWheel');
                scrollMouseWheelCommandCompletion.kind = vscode.CompletionItemKind.Function;
                scrollMouseWheelCommandCompletion.insertText = new vscode.SnippetString('scrollMouseWheel(WHEEL_DIRECTION = "$1", NUMBER_OF_WHEEL_TURNS = "$2")');
                scrollMouseWheelCommandCompletion.documentation = new vscode.MarkdownString('Bewegt das Mausrad (Scrollen).');
                items.push(scrollMouseWheelCommandCompletion);

                const scrollToElementInGridWebCommandCompletion = new vscode.CompletionItem('scrollToElementInGridWeb');
                scrollToElementInGridWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                scrollToElementInGridWebCommandCompletion.insertText = new vscode.SnippetString('scrollToElementInGridWeb(BY_CRITERIA_GRID = "$1", ELEMENT_NAME_GRID = "$2", BY_CRITERIA_ELEMENT = "$3", ELEMENT_NAME_ELEMENT = "$4")');
                scrollToElementInGridWebCommandCompletion.documentation = new vscode.MarkdownString('Scrollt ein Element innerhalb eines Grids in den sichtbaren Bereich.');
                items.push(scrollToElementInGridWebCommandCompletion);

                const scrollToElementWebCommandCompletion = new vscode.CompletionItem('scrollToElementWeb');
                scrollToElementWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                scrollToElementWebCommandCompletion.insertText = new vscode.SnippetString('scrollToElementWeb(ELEMENT_NAME = "$1")');
                scrollToElementWebCommandCompletion.documentation = new vscode.MarkdownString('Scrollt ein Element in den sichtbaren Bereich.');
                items.push(scrollToElementWebCommandCompletion);

                const scrollToWebCommandCompletion = new vscode.CompletionItem('scrollToWeb');
                scrollToWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                scrollToWebCommandCompletion.insertText = new vscode.SnippetString('scrollToWeb(X = "$1", Y = "$2")');
                scrollToWebCommandCompletion.documentation = new vscode.MarkdownString('Scollt auf einer Webseite zu einem mit den Pixel-Werte angegebenen absoluten Punkt (JavaScript-Funktion scrollTo()).');
                items.push(scrollToWebCommandCompletion);

                const scrollUpMobileCommandCompletion = new vscode.CompletionItem('scrollUpMobile');
                scrollUpMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                scrollUpMobileCommandCompletion.insertText = new vscode.SnippetString('scrollUpMobile()');
                scrollUpMobileCommandCompletion.documentation = new vscode.MarkdownString('Der Befehl scrollt hoch.');
                items.push(scrollUpMobileCommandCompletion);

                const scrollWebCommandCompletion = new vscode.CompletionItem('scrollWeb');
                scrollWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                scrollWebCommandCompletion.insertText = new vscode.SnippetString('scrollWeb(SCROLL_AMOUNT_X = "$1", SCROLL_AMOUNT_Y = "$2")');
                scrollWebCommandCompletion.documentation = new vscode.MarkdownString('Scrollt auf einer Webseite relativ vom aktuellen Punkt anhand der angegebenen Pixel-Werte (JavaScript-Funktion scrollBy()).');
                items.push(scrollWebCommandCompletion);

                const selectElementDropDownWinEleCommandCompletion = new vscode.CompletionItem('selectElementDropDownWinEle');
                selectElementDropDownWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                selectElementDropDownWinEleCommandCompletion.insertText = new vscode.SnippetString('selectElementDropDownWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", ELEMENT_NAME = "$3")');
                selectElementDropDownWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando selektiert ein definiertes Element aus einem Dropdown Menü.');
                items.push(selectElementDropDownWinEleCommandCompletion);

                const selectItemByTextJavaCommandCompletion = new vscode.CompletionItem('selectItemByTextJava');
                selectItemByTextJavaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                selectItemByTextJavaCommandCompletion.insertText = new vscode.SnippetString('selectItemByTextJava(TARGET = "$1", TEXT = "$2")');
                selectItemByTextJavaCommandCompletion.documentation = new vscode.MarkdownString('Selektiert ein angegebenes Element innerhalb einer Tabelle einer Java Anwendung an.');
                items.push(selectItemByTextJavaCommandCompletion);

                const selectJavaCommandCompletion = new vscode.CompletionItem('selectJava');
                selectJavaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                selectJavaCommandCompletion.insertText = new vscode.SnippetString('selectJava(TARGET = "$1", INDEX = "$2")');
                selectJavaCommandCompletion.documentation = new vscode.MarkdownString('Setzt den auszuwählenden Index innerhalb einer Liste');
                items.push(selectJavaCommandCompletion);

                const selectMobileCommandCompletion = new vscode.CompletionItem('selectMobile');
                selectMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                selectMobileCommandCompletion.insertText = new vscode.SnippetString('selectMobile(EXPRESSION_TEXT = "$1", SELECT_LABEL = "$2")');
                selectMobileCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando selektiert ein Element einer Liste, nachdem es gefunden wurde (Beispiel: selectMobile("name", "Radiobutton1", "", "")).');
                items.push(selectMobileCommandCompletion);

                const selectWebCommandCompletion = new vscode.CompletionItem('selectWeb');
                selectWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                selectWebCommandCompletion.insertText = new vscode.SnippetString('selectWeb(BY_CRITERIA = "$1", ELEMENT_NAME = "$2", SELECT_LABEL = "$3")');
                selectWebCommandCompletion.documentation = new vscode.MarkdownString('Wählt aus einem Select-Element (wie z.B. einer Drop-Down-Box) ein Element aus.');
                items.push(selectWebCommandCompletion);

                const sendKeysEventWebCommandCompletion = new vscode.CompletionItem('sendKeysEventWeb');
                sendKeysEventWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendKeysEventWebCommandCompletion.insertText = new vscode.SnippetString('sendKeysEventWeb(KEYS_TO_SEND = "$1")');
                sendKeysEventWebCommandCompletion.documentation = new vscode.MarkdownString('Dieses Kommando funktioniert ähnlich wie "sendKeysWeb". Im Vergleich zu sendKeysWeb bietet dieses Kommando einen Zugang zu den beiden Zuständen/Events einer Taste auf einer Tastatur. Eine Taste wird runtergedrückt (KEY_DOWN) oder eine Taste wird losgelassen (KEY_UP). Es muss jeweils einer der beiden Parameter KEY_DOWN oder KEY_UP auf true gesetzt werden. Wenn beide auf true oder beide auf false gesetzt werden, dann schlägt das Kommando fehl.');
                items.push(sendKeysEventWebCommandCompletion);

                const sendKeysWebCommandCompletion = new vscode.CompletionItem('sendKeysWeb');
                sendKeysWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendKeysWebCommandCompletion.insertText = new vscode.SnippetString('sendKeysWeb(KEYS_TO_SEND = "$1")');
                sendKeysWebCommandCompletion.documentation = new vscode.MarkdownString('Repräsentation einer Tastatur, die Tasten an einen Browser sendet. Die Tasten können an ein bestimmtes Element gesendet werden, dies ist jedoch keine Pflicht. Über Kommandos wie z.B. "clickWeb" kann ein Input-Feld angeklickt werden und mit diesem Kommando Tasten an das Input-Feld gesendet werden.');
                items.push(sendKeysWebCommandCompletion);

                const sendMailCommandCompletion = new vscode.CompletionItem('sendMail');
                sendMailCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendMailCommandCompletion.insertText = new vscode.SnippetString('sendMail(SERVER = "$1", USER = "$2", PASSWORD = "$3", SUBJECT = "$4", CONTENT = "$5", SENDER = "$6", RECEIVER = "$7", PORT = "$8")');
                sendMailCommandCompletion.documentation = new vscode.MarkdownString('Versendet E-Mails');
                items.push(sendMailCommandCompletion);

                const sendTextAutomIdWinEleCommandCompletion = new vscode.CompletionItem('sendTextAutomIdWinEle');
                sendTextAutomIdWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendTextAutomIdWinEleCommandCompletion.insertText = new vscode.SnippetString('sendTextAutomIdWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", TEXT_TO_SEND = "$3", TEXT_BOX_AUTOMATION_ID = "$4")');
                sendTextAutomIdWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando sendet einen Text an ein Eingabeelement anhand einer eindeutigen ID.');
                items.push(sendTextAutomIdWinEleCommandCompletion);

                const sendTextByPasteCommandCompletion = new vscode.CompletionItem('sendTextByPaste');
                sendTextByPasteCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendTextByPasteCommandCompletion.insertText = new vscode.SnippetString('sendTextByPaste()');
                sendTextByPasteCommandCompletion.documentation = new vscode.MarkdownString('Sendet einen Text.');
                items.push(sendTextByPasteCommandCompletion);

                const sendTextCPCommandCompletion = new vscode.CompletionItem('sendTextCP');
                sendTextCPCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendTextCPCommandCompletion.insertText = new vscode.SnippetString('sendTextCP(TEXT_TO_SEND = "$1")');
                sendTextCPCommandCompletion.documentation = new vscode.MarkdownString('Sendet einen Text durch Tastatur-Simulation.');
                items.push(sendTextCPCommandCompletion);

                const sendTextClassnameWinEleCommandCompletion = new vscode.CompletionItem('sendTextClassnameWinEle');
                sendTextClassnameWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendTextClassnameWinEleCommandCompletion.insertText = new vscode.SnippetString('sendTextClassnameWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", CLASS_NAME = "$3")');
                sendTextClassnameWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando sendet einen Text an ein Eingabeelement anhand der übergebenen Klasse. Wird kein text angegeben, wird das Feld fokussiert.');
                items.push(sendTextClassnameWinEleCommandCompletion);

                const sendTextJavaCommandCompletion = new vscode.CompletionItem('sendTextJava');
                sendTextJavaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendTextJavaCommandCompletion.insertText = new vscode.SnippetString('sendTextJava(TARGET = "$1", TEXT = "$2")');
                sendTextJavaCommandCompletion.documentation = new vscode.MarkdownString('Sucht eine Java Swing Komponente und übergibt einen Text über die Zwischenablage. Um Tastaturbefehle auszuführen verwenden Sie bitte SendTextWin oder SendTextCP');
                items.push(sendTextJavaCommandCompletion);

                const sendTextMobileCommandCompletion = new vscode.CompletionItem('sendTextMobile');
                sendTextMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendTextMobileCommandCompletion.insertText = new vscode.SnippetString('sendTextMobile(EXPRESSION_TEXT = "$1", TEXT_TO_SEND = "$2")');
                sendTextMobileCommandCompletion.documentation = new vscode.MarkdownString('Schreibt einen Text in ein Element (in der Regel ein Textfeld), nachdem es gefunden wurde (Beispiel: sendTextMobile("name", "Textfeld1", "Hello World", "500", "true")).');
                items.push(sendTextMobileCommandCompletion);

                const sendTextRawCommandCompletion = new vscode.CompletionItem('sendTextRaw');
                sendTextRawCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendTextRawCommandCompletion.insertText = new vscode.SnippetString('sendTextRaw(TEXT_TO_SEND = "$1")');
                sendTextRawCommandCompletion.documentation = new vscode.MarkdownString('Sendet einen ungeparsten Text (Sequenzen wie {DATE} oder {ENTER} werden nicht interpretiert sondern als Strings übernommen).');
                items.push(sendTextRawCommandCompletion);

                const sendTextWebCommandCompletion = new vscode.CompletionItem('sendTextWeb');
                sendTextWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendTextWebCommandCompletion.insertText = new vscode.SnippetString('sendTextWeb(ELEMENT_NAME = "$1")');
                sendTextWebCommandCompletion.documentation = new vscode.MarkdownString('Sendet einen Text an ein Element.');
                items.push(sendTextWebCommandCompletion);

                const sendTextWebByPasteCommandCompletion = new vscode.CompletionItem('sendTextWebByPaste');
                sendTextWebByPasteCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendTextWebByPasteCommandCompletion.insertText = new vscode.SnippetString('sendTextWebByPaste(ELEMENT_NAME = "$1", TEXT_TO_SEND = "$2")');
                sendTextWebByPasteCommandCompletion.documentation = new vscode.MarkdownString('Sendet einen Text an ein Web-Element. Das Kommando verhält sich ähnlich zu sendTextWeb.     Allerdings wird der Text intern zunächst in die Zwischenablage kopiert und dann aus der Zwischenablage in das Web-Element eingefügt.');
                items.push(sendTextWebByPasteCommandCompletion);

                const sendTextWebFastCommandCompletion = new vscode.CompletionItem('sendTextWebFast');
                sendTextWebFastCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendTextWebFastCommandCompletion.insertText = new vscode.SnippetString('sendTextWebFast(ELEMENT_NAME = "$1", TEXT_TO_SEND = "$2")');
                sendTextWebFastCommandCompletion.documentation = new vscode.MarkdownString('Sendet einen Text an ein Element. Im Gegensatz zu SendTextWEb wird dabei vorher nicht überprüft, ob das Element vorhanden ist. Das Kommando ist daher nicht immer stabil!');
                items.push(sendTextWebFastCommandCompletion);

                const sendTextWinCommandCompletion = new vscode.CompletionItem('sendTextWin');
                sendTextWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendTextWinCommandCompletion.insertText = new vscode.SnippetString('sendTextWin()');
                sendTextWinCommandCompletion.documentation = new vscode.MarkdownString('Sendet einen Text an ein Fenster (bzw. ein darin enthaltenes Textfeld).');
                items.push(sendTextWinCommandCompletion);

                const sendTextWinEleCommandCompletion = new vscode.CompletionItem('sendTextWinEle');
                sendTextWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendTextWinEleCommandCompletion.insertText = new vscode.SnippetString('sendTextWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", TEXT_TO_SEND = "$3", TEXT_BOX_NAME = "$4")');
                sendTextWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando sendet einen Text an ein Eingabeelement anhand dessen Namen.');
                items.push(sendTextWinEleCommandCompletion);

                const sendTextWindowWinCommandCompletion = new vscode.CompletionItem('sendTextWindowWin');
                sendTextWindowWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                sendTextWindowWinCommandCompletion.insertText = new vscode.SnippetString('sendTextWindowWin(WINDOW_NAME = "$1", TEXT_TO_SEND = "$2")');
                sendTextWindowWinCommandCompletion.documentation = new vscode.MarkdownString('Sendet einen Text an ein explizit anzugebendes Fenster.');
                items.push(sendTextWindowWinCommandCompletion);

                const setActiveWindowJavaCommandCompletion = new vscode.CompletionItem('setActiveWindowJava');
                setActiveWindowJavaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                setActiveWindowJavaCommandCompletion.insertText = new vscode.SnippetString('setActiveWindowJava(TITLE = "$1")');
                setActiveWindowJavaCommandCompletion.documentation = new vscode.MarkdownString('Setzt ein Fenster als aktives Java Fenster. Es kann vorkommen, dass vorher mittels z.B. winActivate das Fenster fokussiert werden muss.');
                items.push(setActiveWindowJavaCommandCompletion);

                const setAllStorageFromInputCommandCompletion = new vscode.CompletionItem('setAllStorageFromInput');
                setAllStorageFromInputCommandCompletion.kind = vscode.CompletionItemKind.Function;
                setAllStorageFromInputCommandCompletion.insertText = new vscode.SnippetString('setAllStorageFromInput()');
                setAllStorageFromInputCommandCompletion.documentation = new vscode.MarkdownString('Schreibt alle übergebenen Parameter in den Storage');
                items.push(setAllStorageFromInputCommandCompletion);

                const setClipboardValueCommandCompletion = new vscode.CompletionItem('setClipboardValue');
                setClipboardValueCommandCompletion.kind = vscode.CompletionItemKind.Function;
                setClipboardValueCommandCompletion.insertText = new vscode.SnippetString('setClipboardValue(VALUE = "$1")');
                setClipboardValueCommandCompletion.documentation = new vscode.MarkdownString('Verändert den Wert der Zwischenablage auf einen neuen String.');
                items.push(setClipboardValueCommandCompletion);

                const setCookieWebCommandCompletion = new vscode.CompletionItem('setCookieWeb');
                setCookieWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                setCookieWebCommandCompletion.insertText = new vscode.SnippetString('setCookieWeb(COOKIE_NAME = "$1", COOKIE_VALUE = "$2")');
                setCookieWebCommandCompletion.documentation = new vscode.MarkdownString('Setzt ein Cookies auf der aktuellen Website.');
                items.push(setCookieWebCommandCompletion);

                const setPropertyCommandCompletion = new vscode.CompletionItem('setProperty');
                setPropertyCommandCompletion.kind = vscode.CompletionItemKind.Function;
                setPropertyCommandCompletion.insertText = new vscode.SnippetString('setProperty(KEY = "$1", VALUE = "$2")');
                setPropertyCommandCompletion.documentation = new vscode.MarkdownString('Setzt eine Laufzeit-Property (testrun property)');
                items.push(setPropertyCommandCompletion);

                const setStorageFromInputCommandCompletion = new vscode.CompletionItem('setStorageFromInput');
                setStorageFromInputCommandCompletion.kind = vscode.CompletionItemKind.Function;
                setStorageFromInputCommandCompletion.insertText = new vscode.SnippetString('setStorageFromInput(KEY = "$1")');
                setStorageFromInputCommandCompletion.documentation = new vscode.MarkdownString('Schreibt ein übergebenen Parameter in den Storage, wenn ein Wert gesetzt wurde, ansonsten den angegebenen Default Wert');
                items.push(setStorageFromInputCommandCompletion);

                const setStorageValueCommandCompletion = new vscode.CompletionItem('setStorageValue');
                setStorageValueCommandCompletion.kind = vscode.CompletionItemKind.Function;
                setStorageValueCommandCompletion.insertText = new vscode.SnippetString('setStorageValue(TARGET_STORAGE_KEY = "$1")');
                setStorageValueCommandCompletion.documentation = new vscode.MarkdownString('Verändert den Wert einer Laufzeitvariable. ');
                items.push(setStorageValueCommandCompletion);

                const showCommandOverlayCommandCompletion = new vscode.CompletionItem('showCommandOverlay');
                showCommandOverlayCommandCompletion.kind = vscode.CompletionItemKind.Function;
                showCommandOverlayCommandCompletion.insertText = new vscode.SnippetString('showCommandOverlay()');
                showCommandOverlayCommandCompletion.documentation = new vscode.MarkdownString('Zeigt das Command-Overlay. ');
                items.push(showCommandOverlayCommandCompletion);

                const soapRequestCommandCompletion = new vscode.CompletionItem('soapRequest');
                soapRequestCommandCompletion.kind = vscode.CompletionItemKind.Function;
                soapRequestCommandCompletion.insertText = new vscode.SnippetString('soapRequest(URL = "$1", SOAP_ACTION = "$2")');
                soapRequestCommandCompletion.documentation = new vscode.MarkdownString('Ruft einen Web-Service auf und speichert das Ergebnis im Storage.');
                items.push(soapRequestCommandCompletion);

                const startActivityAndroidCommandCompletion = new vscode.CompletionItem('startActivityAndroid');
                startActivityAndroidCommandCompletion.kind = vscode.CompletionItemKind.Function;
                startActivityAndroidCommandCompletion.insertText = new vscode.SnippetString('startActivityAndroid(PACKAGE_CONTAINING_APP = "$1", ACTIVITY_TO_START = "$2")');
                startActivityAndroidCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando startet eine neue Activity. ');
                items.push(startActivityAndroidCommandCompletion);

                const startAndroidCommandCompletion = new vscode.CompletionItem('startAndroid');
                startAndroidCommandCompletion.kind = vscode.CompletionItemKind.Function;
                startAndroidCommandCompletion.insertText = new vscode.SnippetString('startAndroid(URL = "$1")');
                startAndroidCommandCompletion.documentation = new vscode.MarkdownString('Startet eine Applikation auf einem mobilen Gerät mit Betriebssystem Android (Beispiel: startAndroid("bestellbar.apk" , "de.garcon.bestellbar" , "CheckInActivity"), Beispiel2: startAndroid("bestellbar.apk" , "de.garcon.bestellbar" , ".CheckInActivity"), Beispiel3: startAndroid("bestellbar.apk" , "de.garcon.bestellbar" , "WaitActivity" , "", "", ") Plattform Besonderheiten: Android: Short Android Element Access Hintergrund: Um ein Android UI Element per ID zu finden, muss der voll qualifizierte Name angegeben werden (Package + ID). Wird ein Package beim Starten mit angegeben, so kann der vollqualifizierte Name ignoriert werden. Beispiel: Anstatt immer de.garcon.bestellbar:id/elementId zu schreiben, kann einfach "elementId" benutzt werden.');
                items.push(startAndroidCommandCompletion);

                const startAndroidWebCommandCompletion = new vscode.CompletionItem('startAndroidWeb');
                startAndroidWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                startAndroidWebCommandCompletion.insertText = new vscode.SnippetString('startAndroidWeb(URL = "$1")');
                startAndroidWebCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando startet den Browser eines mobilen Geräts, auf dem das Betriebssystem Android installiert ist (Beispiel: startAndroidWeb("https://www.viadee.de/", "Device", "Keine Netzwerkverbindung")).');
                items.push(startAndroidWebCommandCompletion);

                const startApplicationCommandCompletion = new vscode.CompletionItem('startApplication');
                startApplicationCommandCompletion.kind = vscode.CompletionItemKind.Function;
                startApplicationCommandCompletion.insertText = new vscode.SnippetString('startApplication(EXECUTABLE = "$1")');
                startApplicationCommandCompletion.documentation = new vscode.MarkdownString('Startet eine Anwendung.');
                items.push(startApplicationCommandCompletion);

                const startApplicationCPCommandCompletion = new vscode.CompletionItem('startApplicationCP');
                startApplicationCPCommandCompletion.kind = vscode.CompletionItemKind.Function;
                startApplicationCPCommandCompletion.insertText = new vscode.SnippetString('startApplicationCP(WINDOW_NAME = "$1", SHELL_SCRIPT_PATH = "$2")');
                startApplicationCPCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando startet eine Anwendung.');
                items.push(startApplicationCPCommandCompletion);

                const startApplicationWinCommandCompletion = new vscode.CompletionItem('startApplicationWin');
                startApplicationWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                startApplicationWinCommandCompletion.insertText = new vscode.SnippetString('startApplicationWin(EXECUTABLE_PATH = "$1")');
                startApplicationWinCommandCompletion.documentation = new vscode.MarkdownString('Startet eine Anwendung.');
                items.push(startApplicationWinCommandCompletion);

                const startApplicationWinEleCommandCompletion = new vscode.CompletionItem('startApplicationWinEle');
                startApplicationWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                startApplicationWinEleCommandCompletion.insertText = new vscode.SnippetString('startApplicationWinEle(EXPECTED_WINDOW_NAME = "$1", APPLICATION_PATH = "$2")');
                startApplicationWinEleCommandCompletion.documentation = new vscode.MarkdownString('Startet Windows-Applikation.');
                items.push(startApplicationWinEleCommandCompletion);

                const startIOSCommandCompletion = new vscode.CompletionItem('startIOS');
                startIOSCommandCompletion.kind = vscode.CompletionItemKind.Function;
                startIOSCommandCompletion.insertText = new vscode.SnippetString('startIOS()');
                startIOSCommandCompletion.documentation = new vscode.MarkdownString('Startet eine Applikation auf einem mobilen Gerät mit Betriebssystem IOS (Beispiel: startIOS("./apps/bestellbar.app", "IOS", ""), startIOS("http://viadee.de/bestellbar.apk", "ANDROID", ""), startIOS("http://www.viadee.de", IOS_SAFARI, ""), startIOS("./apps/bestellbar.apk", "ANDROID" , "de.garcon.bestellbar"). Plattform Besonderheiten: Wird ein Package beim Starten mit angegeben, so kann der vollqualifizierte Name ignoriert werden (Beispiel: Anstatt immer de.garcon.bestellbar:id/elementId zu schreiben, kann einfach "elementId" benutzt werden).');
                items.push(startIOSCommandCompletion);

                const startIOSWebCommandCompletion = new vscode.CompletionItem('startIOSWeb');
                startIOSWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                startIOSWebCommandCompletion.insertText = new vscode.SnippetString('startIOSWeb(URL = "$1")');
                startIOSWebCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando startet den Safari-Browser eines mobilen iOS-Geräts oder Simulator (Beispiel: startIOSWeb("www.viadee.de", "")).');
                items.push(startIOSWebCommandCompletion);

                const startSapDriverCommandCompletion = new vscode.CompletionItem('startSapDriver');
                startSapDriverCommandCompletion.kind = vscode.CompletionItemKind.Function;
                startSapDriverCommandCompletion.insertText = new vscode.SnippetString('startSapDriver()');
                startSapDriverCommandCompletion.documentation = new vscode.MarkdownString('Startet den entsprechenden Treiber zum Bedienen der Anwendung.');
                items.push(startSapDriverCommandCompletion);

                const startScreenRecordingCommandCompletion = new vscode.CompletionItem('startScreenRecording');
                startScreenRecordingCommandCompletion.kind = vscode.CompletionItemKind.Function;
                startScreenRecordingCommandCompletion.insertText = new vscode.SnippetString('startScreenRecording()');
                startScreenRecordingCommandCompletion.documentation = new vscode.MarkdownString('Startet die Bildschirmaufnahme. Falls dieses Kommando nach Aufruf eines startWeb-Kommando aufgerufen wird, durch das eine Browser-Instanz gestartet wurde, wird der Aufnahmebereich auf die Browser-Instanz beschränkt. Andernfalls wird der gesamte Bildschirm aufgenommen. Durch das "StopScreenRecording"-Kommando kann die aktuelle Aufnahme beendet werden. Erfolgt dieses Beenden nicht innerhalb des Scripts (z.B. durch unerwarteten Abbruch oder vergessenes "StopScreenRecording"-Kommando), wird nach Ablauf des Scripts alle 5 Sekunden überprüft, ob die Aufnahme noch aktiv ist, obwohl kein Script ausgeführt wird. Beginnt jedoch schon vorher ein neues Script, so kann es sein, dass die Aufnahme auch im neuen Script noch aktiv ist. Aus diesem Grund wird empfohlen, die Aufnahme durch das "StopScreenRecording"-Kommando explizit zu beenden.');
                items.push(startScreenRecordingCommandCompletion);

                const startWebCommandCompletion = new vscode.CompletionItem('startWeb');
                startWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                startWebCommandCompletion.insertText = new vscode.SnippetString('startWeb(URL = "$1", BROWSER_NAME = "$2")');
                startWebCommandCompletion.documentation = new vscode.MarkdownString('Startet einen Web-Browser und öffnet eine angegebene Seite.');
                items.push(startWebCommandCompletion);

                const startWebRemoteCommandCompletion = new vscode.CompletionItem('startWebRemote');
                startWebRemoteCommandCompletion.kind = vscode.CompletionItemKind.Function;
                startWebRemoteCommandCompletion.insertText = new vscode.SnippetString('startWebRemote(URL = "$1", BROWSER_NAME = "$2", REMOTE_WEB_DRIVER_SERVER_URL = "$3")');
                startWebRemoteCommandCompletion.documentation = new vscode.MarkdownString('Startet einen Web-Browser auf einem entfernten Rechner, der einen Selenium-RemoteWebDriverServer implementiert und öffnet dort eine angegebene Seite.    (siehe auch https://github.com/SeleniumHQ/selenium/wiki/RemoteWebDriverServer)');
                items.push(startWebRemoteCommandCompletion);

                const startsWithAlphaCommandCompletion = new vscode.CompletionItem('startsWithAlpha');
                startsWithAlphaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                startsWithAlphaCommandCompletion.insertText = new vscode.SnippetString('startsWithAlpha(TEXT = "$1", PREFIX = "$2")');
                startsWithAlphaCommandCompletion.documentation = new vscode.MarkdownString('Überprüft, ob ein Text mit einem angegebenen Teil-Text beginnt');
                items.push(startsWithAlphaCommandCompletion);

                const stopMobileCommandCompletion = new vscode.CompletionItem('stopMobile');
                stopMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                stopMobileCommandCompletion.insertText = new vscode.SnippetString('stopMobile()');
                stopMobileCommandCompletion.documentation = new vscode.MarkdownString('Beendet die Ausführung der Mobil-Application');
                items.push(stopMobileCommandCompletion);

                const stopSapDriverCommandCompletion = new vscode.CompletionItem('stopSapDriver');
                stopSapDriverCommandCompletion.kind = vscode.CompletionItemKind.Function;
                stopSapDriverCommandCompletion.insertText = new vscode.SnippetString('stopSapDriver()');
                stopSapDriverCommandCompletion.documentation = new vscode.MarkdownString('Stoppt den entsprechenden Treiber.');
                items.push(stopSapDriverCommandCompletion);

                const stopScreenRecordingCommandCompletion = new vscode.CompletionItem('stopScreenRecording');
                stopScreenRecordingCommandCompletion.kind = vscode.CompletionItemKind.Function;
                stopScreenRecordingCommandCompletion.insertText = new vscode.SnippetString('stopScreenRecording()');
                stopScreenRecordingCommandCompletion.documentation = new vscode.MarkdownString('Stoppt das Recording. ');
                items.push(stopScreenRecordingCommandCompletion);

                const stopWebCommandCompletion = new vscode.CompletionItem('stopWeb');
                stopWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                stopWebCommandCompletion.insertText = new vscode.SnippetString('stopWeb()');
                stopWebCommandCompletion.documentation = new vscode.MarkdownString('Beendet eine Web-Browser-Session.');
                items.push(stopWebCommandCompletion);

                const storageToJsonCommandCompletion = new vscode.CompletionItem('storageToJson');
                storageToJsonCommandCompletion.kind = vscode.CompletionItemKind.Function;
                storageToJsonCommandCompletion.insertText = new vscode.SnippetString('storageToJson(TARGET_STORAGE_KEY = "$1")');
                storageToJsonCommandCompletion.documentation = new vscode.MarkdownString('Schreibt den aktuellen Inhalt des Storage im JSON-Format in eine Storage-Variable. Es ist möglich eine Blacklist und eine Whitelist zu setzen. Falls sogar beide gesetzt wurden, wird die Blacklist vor der Whitelist ausgewertet. Wäre die JSON also z.B. "{"a1":"v1","a2":"v2","a3":"v3"}") und beide Listen enthielten jew. den Key "a2" als einzigen Eintrag, hat die Blacklist bei diesem Eintrag Vorrang. Der Eintrag würde dann also nicht in der JSON enthalten sein und das Ergebnis wäre: "{"a1":"v1","a3":"v3"}").');
                items.push(storageToJsonCommandCompletion);

                const successCommandCompletion = new vscode.CompletionItem('success');
                successCommandCompletion.kind = vscode.CompletionItemKind.Function;
                successCommandCompletion.insertText = new vscode.SnippetString('success(MESSAGE = "$1")');
                successCommandCompletion.documentation = new vscode.MarkdownString('Erzeugt ein positives Ergebnis. Sofern an anderer Stelle ein Fehler vorliegt, wird dieser nicht(!) überschrieben. Das Kommando ist i.d.R. nur für Testzwecke sinnvoll.');
                items.push(successCommandCompletion);

                const swipeElementMobileCommandCompletion = new vscode.CompletionItem('swipeElementMobile');
                swipeElementMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                swipeElementMobileCommandCompletion.insertText = new vscode.SnippetString('swipeElementMobile(EXPRESSION_TEXT = "$1", GESTURE_DIRECTION = "$2")');
                swipeElementMobileCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando führt eine Swipe-Geste über den kompletten Bildschirm aus, die an einem bestimmten Element startet. Dieses Kommando ist unabhängig von der Auflösung und Bildschirmgröße Ihres Testgerätes. Um die Richtung des Swipes anzugeben, gibt es folgende Optionen: LEFT_TO_RIGHT: Führt einen Swipe vom Element bis zum rechten Rand aus, RIGHT_TO_LEFT: Führt einen Swipe vom Element bis zum linken Rand aus, BOTTOM_TO_TOP: Führt einen Swipe vom Element bis zum oberen Rand aus, TOP_TO_BOTTOM: Führt einen Swipe vom Element bis zum unteren Rand aus. Zu der Bildschirmgröße wird ein Innenabstand berechnet, damit der Swipe Effekt nicht komplett am Rand, ausgeführt wird (dies kann zu Problemen führen). Bevor der Swipe Befehl ausgeführt wird, wird eine Sekunde gewartet. Beispiel: Bei einer Größe von 1080x1900 Pixel wird bei einem Swipe von Rechts nach Links folgende Pixelwerte berechnet: Pixelwerte:     XStart: 1070     YStart: 950     XEnd: 10     YEnd: 950 (Beispiel: SwipeElementMobile("name", "Auflegen-Knopf", "RIGHT_TO_LEFT", "500", "500")).');
                items.push(swipeElementMobileCommandCompletion);

                const swipeMobileCommandCompletion = new vscode.CompletionItem('swipeMobile');
                swipeMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                swipeMobileCommandCompletion.insertText = new vscode.SnippetString('swipeMobile(X_START_SWIPE = "$1", Y_START_SWIPE = "$2", X_END_SWIPE = "$3", Y_END_SWIPE = "$4")');
                swipeMobileCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando führt eine Swipe-Geste auf dem Bildschirm aus (Beispiel: swipeMobile("1000","1000", "1500", "1000", "500")). Warnung: Es sollte immer vermieden werden, Befehle auf dem Screen auszuführen, da Pixel angaben Device- und Auflösungsabhängig sind.');
                items.push(swipeMobileCommandCompletion);

                const swipeScreenMobileCommandCompletion = new vscode.CompletionItem('swipeScreenMobile');
                swipeScreenMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                swipeScreenMobileCommandCompletion.insertText = new vscode.SnippetString('swipeScreenMobile(GESTURE_DIRECTION = "$1")');
                swipeScreenMobileCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando führt eine Swipe-Geste über den kompletten Bildschirm aus und soll eine Vereinfachung des normalen Swipes sein. Dieses Kommando ist unabhängig von der Auflösung und Bildschirmgröße Ihres Testgerätes. Um die Richtung des Swipes anzugeben, gibt es folgende Optionen: LEFT_TO_RIGHT: Führt einen Swipe vom linken Rand bis zum rechten Rand aus, RIGHT_TO_LEFT: Führt einen Swipe vom rechten Rand bis zum linken Rand aus, BOTTOM_TO_TOP: Führt einen Swipe vom unteren Rand bis zum oberen Rand aus, TOP_TO_BOTTOM: Führt einen Swipe vom oberen Rand bis zum unteren Rand aus. Zu der Bildschirmgröße wird ein Innenabstand berechnet, damit der Swipe Effekt nicht komplett am Rand ausgeführt wird (dies kann zu Problemen führen). Bevor der Swipe Befehl ausgeführt wird, wird eine Sekunde gewartet. Beispiel: Bei einer Größe von 1080x1900 Pixel wird bei einem Swipe von Rechts nach Links folgende Pixelwerte berechnet: Pixelwerte:     XStart: 1070     YStart: 950     XEnd: 10     YEnd: 950 (Beispiel: SwipeScreenMobile("RIGHT_TO_LEFT", "500")).');
                items.push(swipeScreenMobileCommandCompletion);

                const switchContextMobileCommandCompletion = new vscode.CompletionItem('switchContextMobile');
                switchContextMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                switchContextMobileCommandCompletion.insertText = new vscode.SnippetString('switchContextMobile()');
                switchContextMobileCommandCompletion.documentation = new vscode.MarkdownString('Wechselt den Context des Treibers, anschließend können beispielsweise spezifische Webview Ausdrücke wie XPATH: \\div\li[...] genutzt werden (Beispiel: switchContextMobile("WEBVIEW")).');
                items.push(switchContextMobileCommandCompletion);

                const switchDriverCommandCompletion = new vscode.CompletionItem('switchDriver');
                switchDriverCommandCompletion.kind = vscode.CompletionItemKind.Function;
                switchDriverCommandCompletion.insertText = new vscode.SnippetString('switchDriver(BROWSER_ABBREVIATION = "$1")');
                switchDriverCommandCompletion.documentation = new vscode.MarkdownString('Wechselt vom aktuell gesteuerten zu einem anderen Web-Driver, der ebenfalls zuvor mit startWeb gestartet wurde, um nunmehr diesen zu steuern.     Wird startWeb zweimal für denselben Browser aufgerufen, ohne dass dieser Browser in der Zwischenzeit mit stopWeb beendet wird,     wird beim zweiten Mal kein neues Browser-Fenster geöffnet.     Für dieses Kommando ist es daher zwingend erforderlich, dass mit BROWSER_ABBREVIATION einen anderen Browser handelt.');
                items.push(switchDriverCommandCompletion);

                const switchFrameMobileCommandCompletion = new vscode.CompletionItem('switchFrameMobile');
                switchFrameMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                switchFrameMobileCommandCompletion.insertText = new vscode.SnippetString('switchFrameMobile(EXPRESSION_TEXT = "$1")');
                switchFrameMobileCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando wechselt den Frame des Browsers.');
                items.push(switchFrameMobileCommandCompletion);

                const switchFrameWebCommandCompletion = new vscode.CompletionItem('switchFrameWeb');
                switchFrameWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                switchFrameWebCommandCompletion.insertText = new vscode.SnippetString('switchFrameWeb(ELEMENT_NAME = "$1")');
                switchFrameWebCommandCompletion.documentation = new vscode.MarkdownString('Dieses Kommando wechselt innerhalb einer Seite ein Frame.  Der Framewechsel ist also eine dauerhafte Einstellung, solange der Frame nicht gewechselt wird oder zum Standard zurückgesetzt wird.   Es wird ebenfalls der INDEX des Frame unterstützt.  Um in den Hauptframe zurück zu wechseln ist es notwendig, als Ziel #default# anzugeben.Alternativ zu diesem Kommando kann auch mit dem Laufzeitparameter "searchAcrossFrames" gearbeitet werden (siehe Anwenderdokumentation), bei dem ein manuelles wechseln des Frames nicht länger notwendig ist.');
                items.push(switchFrameWebCommandCompletion);

                const switchWindowWebCommandCompletion = new vscode.CompletionItem('switchWindowWeb');
                switchWindowWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                switchWindowWebCommandCompletion.insertText = new vscode.SnippetString('switchWindowWeb()');
                switchWindowWebCommandCompletion.documentation = new vscode.MarkdownString('Kommando um innerhalb eines Browsers das Fenster bzw. Tab zu wechseln und das aktuelle Fenster bei Bedarf vorher zu schließen. Dieses Kommando muss auch dann aufgerufen werden, wenn ein Tab über einen Browserlink geöffnet wird und das sichtbare Browserfenster automatisch in das neue Tab wechselt. Andernfalls versucht der WebDriver weiterhin, Kommandos im ursprünglichen Tab auszuführen.      Das Ziel-Fenster muss für den aktuell genutzten Web-Treiber erreichbar sein. Es kann maximal ein Web-Treiber pro Browseranwendung (Chrome, Firefox,...) gleichzeitig aktiv sein.     Wird das Ziel-Fenster durch einen anderen Web-Treiber gesteuert als den aktuellen     (befindet sich also z.B. in einer Firefox-Instanz, während der aktuelle Treiber Chrome steuert), ist vorher mit switchDriver der Web-Treiber zu wechseln.');
                items.push(switchWindowWebCommandCompletion);

                const takeScreenshotCommandCompletion = new vscode.CompletionItem('takeScreenshot');
                takeScreenshotCommandCompletion.kind = vscode.CompletionItemKind.Function;
                takeScreenshotCommandCompletion.insertText = new vscode.SnippetString('takeScreenshot()');
                takeScreenshotCommandCompletion.documentation = new vscode.MarkdownString('Erzeugt einen Screenshot. Wenn WINDOW_NAME leer ist, wird der gesamte Bildschirm fotografiert.');
                items.push(takeScreenshotCommandCompletion);

                const takeScreenshotElementWebCommandCompletion = new vscode.CompletionItem('takeScreenshotElementWeb');
                takeScreenshotElementWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                takeScreenshotElementWebCommandCompletion.insertText = new vscode.SnippetString('takeScreenshotElementWeb()');
                takeScreenshotElementWebCommandCompletion.documentation = new vscode.MarkdownString('Erstellt einen Screenshot eines bestimmten WebElement auf der aktuellen Webseite.');
                items.push(takeScreenshotElementWebCommandCompletion);

                const takeScreenshotFullWebCommandCompletion = new vscode.CompletionItem('takeScreenshotFullWeb');
                takeScreenshotFullWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                takeScreenshotFullWebCommandCompletion.insertText = new vscode.SnippetString('takeScreenshotFullWeb()');
                takeScreenshotFullWebCommandCompletion.documentation = new vscode.MarkdownString('Erstellt einen Screenshot der gesamten Webseite. Scrollt dazu einmal von oben nach unten und wieder zurück an den Ausgangspunkt. Details zur Bedienung sind im Handbuch beschrieben.');
                items.push(takeScreenshotFullWebCommandCompletion);

                const takeScreenshotWebCommandCompletion = new vscode.CompletionItem('takeScreenshotWeb');
                takeScreenshotWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                takeScreenshotWebCommandCompletion.insertText = new vscode.SnippetString('takeScreenshotWeb()');
                takeScreenshotWebCommandCompletion.documentation = new vscode.MarkdownString('Erstellt einen Screenshot von der Webseite.');
                items.push(takeScreenshotWebCommandCompletion);

                const tapMobileCommandCompletion = new vscode.CompletionItem('tapMobile');
                tapMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                tapMobileCommandCompletion.insertText = new vscode.SnippetString('tapMobile(EXPRESSION_TEXT = "$1")');
                tapMobileCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando klickt auf ein Element anhand eines Kriteriums, nachdem es gefunden wurde (Beispiel: tapMobile("name", "Ok-Knopf", "", "10")).');
                items.push(tapMobileCommandCompletion);

                const tapPositionMobileCommandCompletion = new vscode.CompletionItem('tapPositionMobile');
                tapPositionMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                tapPositionMobileCommandCompletion.insertText = new vscode.SnippetString('tapPositionMobile(X = "$1", Y = "$2")');
                tapPositionMobileCommandCompletion.documentation = new vscode.MarkdownString('Klickt auf einen Punkt anhand seiner Koordinaten (Beispiel: tapPositionMobile("1000", "1000")). Warnung: Es sollte nach Möglichkeit immer vermieden werden, Befehle auf dem Screen auszuführen, da Pixelangaben Device- und Auflösungsabhängig sind.');
                items.push(tapPositionMobileCommandCompletion);

                const thenCommandCompletion = new vscode.CompletionItem('then');
                thenCommandCompletion.kind = vscode.CompletionItemKind.Function;
                thenCommandCompletion.insertText = new vscode.SnippetString('then:');
                thenCommandCompletion.documentation = new vscode.MarkdownString('Wird zur Steuerung des Kontrollflusses verwendet');
                items.push(thenCommandCompletion);

                const timeoutCommandCompletion = new vscode.CompletionItem('timeout');
                timeoutCommandCompletion.kind = vscode.CompletionItemKind.Function;
                timeoutCommandCompletion.insertText = new vscode.SnippetString('timeout(MESSAGE = "$1")');
                timeoutCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando erzeugt einen Timeout-Status. (Achtung: Der Timeout-Status gilt dann nur für das Kommando, nicht für das gesamte Testset!)');
                items.push(timeoutCommandCompletion);

                const touchMobileCommandCompletion = new vscode.CompletionItem('touchMobile');
                touchMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                touchMobileCommandCompletion.insertText = new vscode.SnippetString('touchMobile(X_POSITION = "$1", Y_POSITION = "$2")');
                touchMobileCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando berüht einen Punkt auf dem Bildschirm (Beispiel: touchMobile("1","1000", "1000", "", "500")). Warnung: Es sollte immer vermieden werden, Befehle auf dem Screen auszuführen, da Pixel angaben Device- und Auflösungsabhängig sind.');
                items.push(touchMobileCommandCompletion);

                const uiActionCommandCompletion = new vscode.CompletionItem('uiAction');
                uiActionCommandCompletion.kind = vscode.CompletionItemKind.Function;
                uiActionCommandCompletion.insertText = new vscode.SnippetString('uiAction(WINDOW_NAME = "$1", UIA_SELECTOR = "$2", ACTION = "$3")');
                uiActionCommandCompletion.documentation = new vscode.MarkdownString('Wrapper Kommando für den UIA-Treiber. Dieses Kommando erlaubt einen direkten Zugriff auf den UIA-Treiber, sollte aber im Regelfall nicht in Skripten genutzt werden müssen.');
                items.push(uiActionCommandCompletion);

                const uiClickCommandCompletion = new vscode.CompletionItem('uiClick');
                uiClickCommandCompletion.kind = vscode.CompletionItemKind.Function;
                uiClickCommandCompletion.insertText = new vscode.SnippetString('uiClick(WINDOW_NAME = "$1", UIA_SELECTOR = "$2")');
                uiClickCommandCompletion.documentation = new vscode.MarkdownString('Führt einen Mausklick auf ein bestimmtes Element in einem Fenster aus.');
                items.push(uiClickCommandCompletion);

                const uiDoubleclickCommandCompletion = new vscode.CompletionItem('uiDoubleclick');
                uiDoubleclickCommandCompletion.kind = vscode.CompletionItemKind.Function;
                uiDoubleclickCommandCompletion.insertText = new vscode.SnippetString('uiDoubleclick(WINDOW_NAME = "$1", UIA_SELECTOR = "$2")');
                uiDoubleclickCommandCompletion.documentation = new vscode.MarkdownString('Führt einen Doppelklick auf ein bestimmtes Element in einem Fenster aus.');
                items.push(uiDoubleclickCommandCompletion);

                const uiGetPropertyCommandCompletion = new vscode.CompletionItem('uiGetProperty');
                uiGetPropertyCommandCompletion.kind = vscode.CompletionItemKind.Function;
                uiGetPropertyCommandCompletion.insertText = new vscode.SnippetString('uiGetProperty(WINDOW_NAME = "$1", UIA_SELECTOR = "$2", PROPERTYNAME = "$3")');
                uiGetPropertyCommandCompletion.documentation = new vscode.MarkdownString('Liefert die Property von einem Element in einem Fenster.');
                items.push(uiGetPropertyCommandCompletion);

                const uiGetValueCommandCompletion = new vscode.CompletionItem('uiGetValue');
                uiGetValueCommandCompletion.kind = vscode.CompletionItemKind.Function;
                uiGetValueCommandCompletion.insertText = new vscode.SnippetString('uiGetValue(WINDOW_NAME = "$1", UIA_SELECTOR = "$2")');
                uiGetValueCommandCompletion.documentation = new vscode.MarkdownString('Liefert einen Wert von einem Element in einem Fenster.');
                items.push(uiGetValueCommandCompletion);

                const uiMoveCommandCompletion = new vscode.CompletionItem('uiMove');
                uiMoveCommandCompletion.kind = vscode.CompletionItemKind.Function;
                uiMoveCommandCompletion.insertText = new vscode.SnippetString('uiMove(WINDOW_NAME = "$1", UIA_SELECTOR = "$2", X = "$3", Y = "$4")');
                uiMoveCommandCompletion.documentation = new vscode.MarkdownString('Verschiebt ein Fenster.');
                items.push(uiMoveCommandCompletion);

                const uiMoveMouseCommandCompletion = new vscode.CompletionItem('uiMoveMouse');
                uiMoveMouseCommandCompletion.kind = vscode.CompletionItemKind.Function;
                uiMoveMouseCommandCompletion.insertText = new vscode.SnippetString('uiMoveMouse(WINDOW_NAME = "$1", UIA_SELECTOR = "$2", X = "$3", Y = "$4")');
                uiMoveMouseCommandCompletion.documentation = new vscode.MarkdownString('Bewegt den Mauszeiger innerhalb eines angegebenen Elements.');
                items.push(uiMoveMouseCommandCompletion);

                const uiRightclickCommandCompletion = new vscode.CompletionItem('uiRightclick');
                uiRightclickCommandCompletion.kind = vscode.CompletionItemKind.Function;
                uiRightclickCommandCompletion.insertText = new vscode.SnippetString('uiRightclick(WINDOW_NAME = "$1", UIA_SELECTOR = "$2")');
                uiRightclickCommandCompletion.documentation = new vscode.MarkdownString('Führt einen Rechtsklick auf ein bestimmtes Element in einem Fenster aus.');
                items.push(uiRightclickCommandCompletion);

                const uiSendCommandCompletion = new vscode.CompletionItem('uiSend');
                uiSendCommandCompletion.kind = vscode.CompletionItemKind.Function;
                uiSendCommandCompletion.insertText = new vscode.SnippetString('uiSend(WINDOW_NAME = "$1", UIA_SELECTOR = "$2")');
                uiSendCommandCompletion.documentation = new vscode.MarkdownString('Schickt eine Tastenfolge an ein Element.');
                items.push(uiSendCommandCompletion);

                const uiSetValueCommandCompletion = new vscode.CompletionItem('uiSetValue');
                uiSetValueCommandCompletion.kind = vscode.CompletionItemKind.Function;
                uiSetValueCommandCompletion.insertText = new vscode.SnippetString('uiSetValue(WINDOW_NAME = "$1", UIA_SELECTOR = "$2")');
                uiSetValueCommandCompletion.documentation = new vscode.MarkdownString('Setzt einen Wert in einem Element.');
                items.push(uiSetValueCommandCompletion);

                const uiWaitForCommandCompletion = new vscode.CompletionItem('uiWaitFor');
                uiWaitForCommandCompletion.kind = vscode.CompletionItemKind.Function;
                uiWaitForCommandCompletion.insertText = new vscode.SnippetString('uiWaitFor(WINDOW_NAME = "$1", UIA_SELECTOR = "$2")');
                uiWaitForCommandCompletion.documentation = new vscode.MarkdownString('Wartet auf ein Element.');
                items.push(uiWaitForCommandCompletion);

                const verifyNameByAutomationIdWinEleCommandCompletion = new vscode.CompletionItem('verifyNameByAutomationIdWinEle');
                verifyNameByAutomationIdWinEleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                verifyNameByAutomationIdWinEleCommandCompletion.insertText = new vscode.SnippetString('verifyNameByAutomationIdWinEle(WINDOW_NAME = "$1", PROCESS_NAME = "$2", AUTOMATION_ID = "$3", ELEMENT_NAME = "$4")');
                verifyNameByAutomationIdWinEleCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando überprüft den Namen eines Elements. Dabei kann es sich bei Eingabe-Elementen auch um deren Inhalt handeln.');
                items.push(verifyNameByAutomationIdWinEleCommandCompletion);

                const waitCommandCompletion = new vscode.CompletionItem('wait');
                waitCommandCompletion.kind = vscode.CompletionItemKind.Function;
                waitCommandCompletion.insertText = new vscode.SnippetString('wait(WAIT_MILLISECONDS = "$1")');
                waitCommandCompletion.documentation = new vscode.MarkdownString('Wartet die angegebene Zeit in Millisekunden.');
                items.push(waitCommandCompletion);

                const waitForAjaxCommandCompletion = new vscode.CompletionItem('waitForAjax');
                waitForAjaxCommandCompletion.kind = vscode.CompletionItemKind.Function;
                waitForAjaxCommandCompletion.insertText = new vscode.SnippetString('waitForAjax()');
                waitForAjaxCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando überprüft, ob Ajax-Kommunikation stattfindet.     Ist dies der Fall, wartet es maximal WAIT_SECONDS Sekunden bis keine Ajax-Kommunikation mehr stattfindet.');
                items.push(waitForAjaxCommandCompletion);

                const waitForElementNotVisibleWebCommandCompletion = new vscode.CompletionItem('waitForElementNotVisibleWeb');
                waitForElementNotVisibleWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                waitForElementNotVisibleWebCommandCompletion.insertText = new vscode.SnippetString('waitForElementNotVisibleWeb(ELEMENT_NAME = "$1")');
                waitForElementNotVisibleWebCommandCompletion.documentation = new vscode.MarkdownString('Wartet auf das Verschwinden eines Web-Element.');
                items.push(waitForElementNotVisibleWebCommandCompletion);

                const waitForElementVisibleWebCommandCompletion = new vscode.CompletionItem('waitForElementVisibleWeb');
                waitForElementVisibleWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                waitForElementVisibleWebCommandCompletion.insertText = new vscode.SnippetString('waitForElementVisibleWeb(ELEMENT_NAME = "$1")');
                waitForElementVisibleWebCommandCompletion.documentation = new vscode.MarkdownString('Wartet auf ein Web-Element bis es sichtbar ist. Sichtbar bedeutet, dass das Element verfügbar ist und eine Höhe und Breite von mehr als 0 hat.');
                items.push(waitForElementVisibleWebCommandCompletion);

                const waitForElementWebCommandCompletion = new vscode.CompletionItem('waitForElementWeb');
                waitForElementWebCommandCompletion.kind = vscode.CompletionItemKind.Function;
                waitForElementWebCommandCompletion.insertText = new vscode.SnippetString('waitForElementWeb(ELEMENT_NAME = "$1")');
                waitForElementWebCommandCompletion.documentation = new vscode.MarkdownString('Wartet auf ein Web-Element bis es anklickbar ist.');
                items.push(waitForElementWebCommandCompletion);

                const waitForElementWebVisibleCommandCompletion = new vscode.CompletionItem('waitForElementWebVisible');
                waitForElementWebVisibleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                waitForElementWebVisibleCommandCompletion.insertText = new vscode.SnippetString('waitForElementWebVisible(ELEMENT_NAME = "$1")');
                waitForElementWebVisibleCommandCompletion.documentation = new vscode.MarkdownString('Wartet auf ein Web-Element bis es sichtbar ist. Sichtbar bedeutet, dass das Element verfügbar ist und eine Höhe und Breite von mehr als 0 hat.');
                items.push(waitForElementWebVisibleCommandCompletion);

                const waitForFileNotExistsCommandCompletion = new vscode.CompletionItem('waitForFileNotExists');
                waitForFileNotExistsCommandCompletion.kind = vscode.CompletionItemKind.Function;
                waitForFileNotExistsCommandCompletion.insertText = new vscode.SnippetString('waitForFileNotExists(FILENAME = "$1")');
                waitForFileNotExistsCommandCompletion.documentation = new vscode.MarkdownString('Sucht nach einer Datei und schließt mit dem Status "Erfolg" ab, falls diese nicht gefunden wurde.    Das Kommando lässt sich in Bedingungen einsetzen, um Prozesse zu steuern.');
                items.push(waitForFileNotExistsCommandCompletion);

                const waitForImageCommandCompletion = new vscode.CompletionItem('waitForImage');
                waitForImageCommandCompletion.kind = vscode.CompletionItemKind.Function;
                waitForImageCommandCompletion.insertText = new vscode.SnippetString('waitForImage(IMAGE_PATH = "$1", SECONDS = "$2")');
                waitForImageCommandCompletion.documentation = new vscode.MarkdownString('Sucht die Position eines Bilds.');
                items.push(waitForImageCommandCompletion);

                const waitForJavaCommandCompletion = new vscode.CompletionItem('waitForJava');
                waitForJavaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                waitForJavaCommandCompletion.insertText = new vscode.SnippetString('waitForJava(TARGET = "$1")');
                waitForJavaCommandCompletion.documentation = new vscode.MarkdownString('Wartet auf eine Java Component, dass sie erscheint.');
                items.push(waitForJavaCommandCompletion);

                const waitForPictureToDisappearWinCommandCompletion = new vscode.CompletionItem('waitForPictureToDisappearWin');
                waitForPictureToDisappearWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                waitForPictureToDisappearWinCommandCompletion.insertText = new vscode.SnippetString('waitForPictureToDisappearWin(WINDOW_NAME = "$1", RELATIVE_PATH_IMAGE = "$2")');
                waitForPictureToDisappearWinCommandCompletion.documentation = new vscode.MarkdownString('Wartet, bis ein Bild in einem Fenster nicht mehr vorhanden ist.');
                items.push(waitForPictureToDisappearWinCommandCompletion);

                const waitForPictureWinCommandCompletion = new vscode.CompletionItem('waitForPictureWin');
                waitForPictureWinCommandCompletion.kind = vscode.CompletionItemKind.Function;
                waitForPictureWinCommandCompletion.insertText = new vscode.SnippetString('waitForPictureWin(WINDOW_NAME = "$1", RELATIVE_PATH_IMAGE = "$2")');
                waitForPictureWinCommandCompletion.documentation = new vscode.MarkdownString('Wartet auf ein Bild innerhalb eines Festers.');
                items.push(waitForPictureWinCommandCompletion);

                const waitForTextJavaCommandCompletion = new vscode.CompletionItem('waitForTextJava');
                waitForTextJavaCommandCompletion.kind = vscode.CompletionItemKind.Function;
                waitForTextJavaCommandCompletion.insertText = new vscode.SnippetString('waitForTextJava(TEXT = "$1")');
                waitForTextJavaCommandCompletion.documentation = new vscode.MarkdownString('Wartet auf die Anzeige eines Text-Components');
                items.push(waitForTextJavaCommandCompletion);

                const waitMobileCommandCompletion = new vscode.CompletionItem('waitMobile');
                waitMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                waitMobileCommandCompletion.insertText = new vscode.SnippetString('waitMobile()');
                waitMobileCommandCompletion.documentation = new vscode.MarkdownString('Der Befehl wartet auf die Verfügbarkeit eines Elements anhand eines Kriteriums oder einen definierten Zeitraum, falls keine Expression angeben wurde (Beispiel: waitMobile("name", "Ok-Knopf", "", "10")).');
                items.push(waitMobileCommandCompletion);

                const warningCommandCompletion = new vscode.CompletionItem('warning');
                warningCommandCompletion.kind = vscode.CompletionItemKind.Function;
                warningCommandCompletion.insertText = new vscode.SnippetString('warning(MESSAGE = "$1")');
                warningCommandCompletion.documentation = new vscode.MarkdownString('Das Kommando erzeugt eine Warnung.');
                items.push(warningCommandCompletion);

                const watchForNewFileCommandCompletion = new vscode.CompletionItem('watchForNewFile');
                watchForNewFileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                watchForNewFileCommandCompletion.insertText = new vscode.SnippetString('watchForNewFile(DIRECTORY = "$1")');
                watchForNewFileCommandCompletion.documentation = new vscode.MarkdownString('Beobachtet ein Verzeichnis und wartet darauf, dass dort eine neue Datei erscheint. Das Kommando kann zum Beispiel zum Warten auf Downloads verwendet werden, indem das Download-Verzeichnis mit dem Parameter "DIRECTORY" definiert wird und die möglichen Dateiendungen der erwarteten Datei mit dem Parameter "FILE_EXTENSION" gesetzt wird.');
                items.push(watchForNewFileCommandCompletion);

                const whenCommandCompletion = new vscode.CompletionItem('when');
                whenCommandCompletion.kind = vscode.CompletionItemKind.Function;
                whenCommandCompletion.insertText = new vscode.SnippetString('when()');
                whenCommandCompletion.documentation = new vscode.MarkdownString('Wird zur Steuerung des Kontrollflusses verwendet');
                items.push(whenCommandCompletion);

                const whileCommandCompletion = new vscode.CompletionItem('while');
                whileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                whileCommandCompletion.insertText = new vscode.SnippetString('while(MAX_ITERATIONS = "$1"):');
                whileCommandCompletion.documentation = new vscode.MarkdownString('Wird zur Steuerung des Kontrollflusses verwendet');
                items.push(whileCommandCompletion);

                const whileNotCommandCompletion = new vscode.CompletionItem('whileNot');
                whileNotCommandCompletion.kind = vscode.CompletionItemKind.Function;
                whileNotCommandCompletion.insertText = new vscode.SnippetString('whileNot(MAX_ITERATIONS = "$1"):');
                whileNotCommandCompletion.documentation = new vscode.MarkdownString('Wird zur Steuerung des Kontrollflusses verwendet');
                items.push(whileNotCommandCompletion);

                const winActivateCommandCompletion = new vscode.CompletionItem('winActivate');
                winActivateCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winActivateCommandCompletion.insertText = new vscode.SnippetString('winActivate(TITLE = "$1")');
                winActivateCommandCompletion.documentation = new vscode.MarkdownString('Aktiviert eine Anwendung, holt sie in den Vordergrund.');
                items.push(winActivateCommandCompletion);

                const winCheckIfFileExistsCommandCompletion = new vscode.CompletionItem('winCheckIfFileExists');
                winCheckIfFileExistsCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winCheckIfFileExistsCommandCompletion.insertText = new vscode.SnippetString('winCheckIfFileExists(FILENAME = "$1")');
                winCheckIfFileExistsCommandCompletion.documentation = new vscode.MarkdownString('Überprüft ob eine Datei existiert.');
                items.push(winCheckIfFileExistsCommandCompletion);

                const winExistsCommandCompletion = new vscode.CompletionItem('winExists');
                winExistsCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winExistsCommandCompletion.insertText = new vscode.SnippetString('winExists(TITLE = "$1")');
                winExistsCommandCompletion.documentation = new vscode.MarkdownString('Prüft ob ein Fenster existiert.');
                items.push(winExistsCommandCompletion);

                const winGetActiveWindowTitleCommandCompletion = new vscode.CompletionItem('winGetActiveWindowTitle');
                winGetActiveWindowTitleCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winGetActiveWindowTitleCommandCompletion.insertText = new vscode.SnippetString('winGetActiveWindowTitle()');
                winGetActiveWindowTitleCommandCompletion.documentation = new vscode.MarkdownString('Liefert den Titel des aktiven Fensters.');
                items.push(winGetActiveWindowTitleCommandCompletion);

                const winGetAllWindowsTitlesCommandCompletion = new vscode.CompletionItem('winGetAllWindowsTitles');
                winGetAllWindowsTitlesCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winGetAllWindowsTitlesCommandCompletion.insertText = new vscode.SnippetString('winGetAllWindowsTitles()');
                winGetAllWindowsTitlesCommandCompletion.documentation = new vscode.MarkdownString('Liefert die Titel aller geöffneten Fenster.');
                items.push(winGetAllWindowsTitlesCommandCompletion);

                const winGetControlinfoAtPositionCommandCompletion = new vscode.CompletionItem('winGetControlinfoAtPosition');
                winGetControlinfoAtPositionCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winGetControlinfoAtPositionCommandCompletion.insertText = new vscode.SnippetString('winGetControlinfoAtPosition(WINDOW_NAME = "$1", CONTROL = "$2", MOUSE_X = "$3", MOUSE_Y = "$4")');
                winGetControlinfoAtPositionCommandCompletion.documentation = new vscode.MarkdownString('Gibt die Info von einem Control an einer bestimmten Position.');
                items.push(winGetControlinfoAtPositionCommandCompletion);

                const winGetTextCommandCompletion = new vscode.CompletionItem('winGetText');
                winGetTextCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winGetTextCommandCompletion.insertText = new vscode.SnippetString('winGetText(TITLE = "$1")');
                winGetTextCommandCompletion.documentation = new vscode.MarkdownString('Liest den Text eines Fensters aus.');
                items.push(winGetTextCommandCompletion);

                const winGetWindowTextCommandCompletion = new vscode.CompletionItem('winGetWindowText');
                winGetWindowTextCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winGetWindowTextCommandCompletion.insertText = new vscode.SnippetString('winGetWindowText(WINDOW_NAME = "$1")');
                winGetWindowTextCommandCompletion.documentation = new vscode.MarkdownString('Liefert den Text eines bestimmten Fensters.');
                items.push(winGetWindowTextCommandCompletion);

                const winMouseClickCursorFensterCommandCompletion = new vscode.CompletionItem('winMouseClickCursorFenster');
                winMouseClickCursorFensterCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winMouseClickCursorFensterCommandCompletion.insertText = new vscode.SnippetString('winMouseClickCursorFenster(WINDOW_NAME = "$1", MOUSE_BUTTON = "$2")');
                winMouseClickCursorFensterCommandCompletion.documentation = new vscode.MarkdownString('Führt einen Mausklick auf einem bestimmten Fenster durch.');
                items.push(winMouseClickCursorFensterCommandCompletion);

                const winMouseClickXYCommandCompletion = new vscode.CompletionItem('winMouseClickXY');
                winMouseClickXYCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winMouseClickXYCommandCompletion.insertText = new vscode.SnippetString('winMouseClickXY(X = "$1", Y = "$2", MOUSE_BUTTON = "$3")');
                winMouseClickXYCommandCompletion.documentation = new vscode.MarkdownString('Führt einen Mausklick an einer bestimmten Position durch.');
                items.push(winMouseClickXYCommandCompletion);

                const winMouseClickXYFensterCommandCompletion = new vscode.CompletionItem('winMouseClickXYFenster');
                winMouseClickXYFensterCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winMouseClickXYFensterCommandCompletion.insertText = new vscode.SnippetString('winMouseClickXYFenster(WINDOW_NAME = "$1", X = "$2", Y = "$3", MOUSE_BUTTON = "$4")');
                winMouseClickXYFensterCommandCompletion.documentation = new vscode.MarkdownString('Führt einen Mausklick an einer bestimmten Position in einem Fenster durch.');
                items.push(winMouseClickXYFensterCommandCompletion);

                const winMouseDoubleClickXYFensterCommandCompletion = new vscode.CompletionItem('winMouseDoubleClickXYFenster');
                winMouseDoubleClickXYFensterCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winMouseDoubleClickXYFensterCommandCompletion.insertText = new vscode.SnippetString('winMouseDoubleClickXYFenster(WINDOW_NAME = "$1", X = "$2", Y = "$3")');
                winMouseDoubleClickXYFensterCommandCompletion.documentation = new vscode.MarkdownString('Führt einen Doppelklick an einer bestimmten Position in einem Fenster durch.');
                items.push(winMouseDoubleClickXYFensterCommandCompletion);

                const winMouseOn00CommandCompletion = new vscode.CompletionItem('winMouseOn00');
                winMouseOn00CommandCompletion.kind = vscode.CompletionItemKind.Function;
                winMouseOn00CommandCompletion.insertText = new vscode.SnippetString('winMouseOn00()');
                winMouseOn00CommandCompletion.documentation = new vscode.MarkdownString('Bewegt die Maus zur Position 0|0.');
                items.push(winMouseOn00CommandCompletion);

                const winOpenFileWithNotepadCommandCompletion = new vscode.CompletionItem('winOpenFileWithNotepad');
                winOpenFileWithNotepadCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winOpenFileWithNotepadCommandCompletion.insertText = new vscode.SnippetString('winOpenFileWithNotepad(FILENAME = "$1")');
                winOpenFileWithNotepadCommandCompletion.documentation = new vscode.MarkdownString('Öffnet eine vorhandene Datei mit dem Notepad.');
                items.push(winOpenFileWithNotepadCommandCompletion);

                const winScrollMouseWheelCommandCompletion = new vscode.CompletionItem('winScrollMouseWheel');
                winScrollMouseWheelCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winScrollMouseWheelCommandCompletion.insertText = new vscode.SnippetString('winScrollMouseWheel(WHEEL_DIRECTION = "$1", NUMBER_OF_WHEEL_TURNS = "$2")');
                winScrollMouseWheelCommandCompletion.documentation = new vscode.MarkdownString('Scrollt das Mausrad in eine bestimmte Richtung.');
                items.push(winScrollMouseWheelCommandCompletion);

                const winSendCommandCompletion = new vscode.CompletionItem('winSend');
                winSendCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winSendCommandCompletion.insertText = new vscode.SnippetString('winSend()');
                winSendCommandCompletion.documentation = new vscode.MarkdownString('Schickt eine Tastenfolge.');
                items.push(winSendCommandCompletion);

                const winSendTextByPasteCommandCompletion = new vscode.CompletionItem('winSendTextByPaste');
                winSendTextByPasteCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winSendTextByPasteCommandCompletion.insertText = new vscode.SnippetString('winSendTextByPaste()');
                winSendTextByPasteCommandCompletion.documentation = new vscode.MarkdownString('Sendet eine Zeichenfolge die im Zwischenspeicher hinterlegt ist.');
                items.push(winSendTextByPasteCommandCompletion);

                const winSendWindowCommandCompletion = new vscode.CompletionItem('winSendWindow');
                winSendWindowCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winSendWindowCommandCompletion.insertText = new vscode.SnippetString('winSendWindow(WINDOW_NAME = "$1")');
                winSendWindowCommandCompletion.documentation = new vscode.MarkdownString('Schickt eine Tastenfolge an ein Fenster.');
                items.push(winSendWindowCommandCompletion);

                const winStatusbarTextCommandCompletion = new vscode.CompletionItem('winStatusbarText');
                winStatusbarTextCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winStatusbarTextCommandCompletion.insertText = new vscode.SnippetString('winStatusbarText(WINDOW_NAME = "$1")');
                winStatusbarTextCommandCompletion.documentation = new vscode.MarkdownString('Liefert die Statusbar eines Fensters.');
                items.push(winStatusbarTextCommandCompletion);

                const winWaitCommandCompletion = new vscode.CompletionItem('winWait');
                winWaitCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winWaitCommandCompletion.insertText = new vscode.SnippetString('winWait(TITLE = "$1", TIMEOUT_IN_SECONDS = "$2")');
                winWaitCommandCompletion.documentation = new vscode.MarkdownString('Prüft ob ein Fenster existiert. Es muss nicht aktiv sein.');
                items.push(winWaitCommandCompletion);

                const winWaitActiveCommandCompletion = new vscode.CompletionItem('winWaitActive');
                winWaitActiveCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winWaitActiveCommandCompletion.insertText = new vscode.SnippetString('winWaitActive(TITLE = "$1", TIMEOUT_IN_SECONDS = "$2")');
                winWaitActiveCommandCompletion.documentation = new vscode.MarkdownString('Prüft ob ein Fenster existiert.');
                items.push(winWaitActiveCommandCompletion);

                const winWaitForWindowExistsCommandCompletion = new vscode.CompletionItem('winWaitForWindowExists');
                winWaitForWindowExistsCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winWaitForWindowExistsCommandCompletion.insertText = new vscode.SnippetString('winWaitForWindowExists(WINDOW_NAME = "$1", MATCH_MODE = "$2")');
                winWaitForWindowExistsCommandCompletion.documentation = new vscode.MarkdownString('Wartet bis ein bestimmtes Fenster existiert.');
                items.push(winWaitForWindowExistsCommandCompletion);

                const winWaitForWindowTextCommandCompletion = new vscode.CompletionItem('winWaitForWindowText');
                winWaitForWindowTextCommandCompletion.kind = vscode.CompletionItemKind.Function;
                winWaitForWindowTextCommandCompletion.insertText = new vscode.SnippetString('winWaitForWindowText(WINDOW_NAME = "$1", TEXT = "$2")');
                winWaitForWindowTextCommandCompletion.documentation = new vscode.MarkdownString('Wartet bis ein bestimmter Text in einem Fenster existiert.');
                items.push(winWaitForWindowTextCommandCompletion);

                const writePropertiesToStorageCommandCompletion = new vscode.CompletionItem('writePropertiesToStorage');
                writePropertiesToStorageCommandCompletion.kind = vscode.CompletionItemKind.Function;
                writePropertiesToStorageCommandCompletion.insertText = new vscode.SnippetString('writePropertiesToStorage()');
                writePropertiesToStorageCommandCompletion.documentation = new vscode.MarkdownString('Schreibt die Laufzeit-Properties in die Storage-Datei. Dabei wird vor die Keys aller herausgeschriebenen Properties das Prefix "runtime_property\:" gesetzt. Bereits bestehende Einträge mit diesem Präfix werden zuvor gelöscht, sodass nach Ausführung nur die aktuell gesetzten Parameterwerte in der Storag-Datei enthalten sind.');
                items.push(writePropertiesToStorageCommandCompletion);

                const writeToFileCommandCompletion = new vscode.CompletionItem('writeToFile');
                writeToFileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                writeToFileCommandCompletion.insertText = new vscode.SnippetString('writeToFile(VALUE = "$1", FILENAME = "$2")');
                writeToFileCommandCompletion.documentation = new vscode.MarkdownString('Schreibt den übergebenen Text in die übergebene Datei.');
                items.push(writeToFileCommandCompletion);

                const xml2CobolCommandCompletion = new vscode.CompletionItem('xml2Cobol');
                xml2CobolCommandCompletion.kind = vscode.CompletionItemKind.Function;
                xml2CobolCommandCompletion.insertText = new vscode.SnippetString('xml2Cobol(INPUT_XML = "$1", COPYBOOK = "$2", OUTPUT_BIN = "$3")');
                xml2CobolCommandCompletion.documentation = new vscode.MarkdownString('Kommando zum übersetzen einer Host XML mittels Copybook in eine binär-Datei. Es wird CP037 als Ausgabedialkt verwendet.');
                items.push(xml2CobolCommandCompletion);

                const zipFilesCommandCompletion = new vscode.CompletionItem('zipFiles');
                zipFilesCommandCompletion.kind = vscode.CompletionItemKind.Function;
                zipFilesCommandCompletion.insertText = new vscode.SnippetString('zipFiles(PATH_OF_FILES = "$1", PATH_OF_ARCHIVE = "$2")');
                zipFilesCommandCompletion.documentation = new vscode.MarkdownString('Speichert eine Auswahl an Dateien in einem ZIP-Archiv.');
                items.push(zipFilesCommandCompletion);

                const zoomMobileCommandCompletion = new vscode.CompletionItem('zoomMobile');
                zoomMobileCommandCompletion.kind = vscode.CompletionItemKind.Function;
                zoomMobileCommandCompletion.insertText = new vscode.SnippetString('zoomMobile(X_POSITION = "$1", Y_POSITION = "$2")');
                zoomMobileCommandCompletion.documentation = new vscode.MarkdownString('Führt eine Zoom Geste (zwei Finger auseinander bewegen) am definierten Punkt durch (Beispiel: zoomMobile("", "150", "150")). Warnung: Es sollte immer vermieden werden, Befehle auf dem Screen auszuführen, da Pixel angaben Device- und Auflösungsabhängig sind.');
                items.push(zoomMobileCommandCompletion);
            }


            if (/.*\s*addToText\s*\(.*/.test(linePrefix)) {

                const addToTextEXISTING_TEXTCompletion = new vscode.CompletionItem('EXISTING_TEXT');
                addToTextEXISTING_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                addToTextEXISTING_TEXTCompletion.insertText = new vscode.SnippetString("EXISTING_TEXT = \"${1}\"");
                addToTextEXISTING_TEXTCompletion.documentation = new vscode.MarkdownString('Zu erg\u00E4nzender Text');
                items.push(addToTextEXISTING_TEXTCompletion);

                const addToTextTEXT_TO_ADDCompletion = new vscode.CompletionItem('TEXT_TO_ADD');
                addToTextTEXT_TO_ADDCompletion.kind = vscode.CompletionItemKind.Field;
                addToTextTEXT_TO_ADDCompletion.insertText = new vscode.SnippetString("TEXT_TO_ADD = \"${1}\"");
                addToTextTEXT_TO_ADDCompletion.documentation = new vscode.MarkdownString('Hinzuzuf\u00FCgender Text');
                items.push(addToTextTEXT_TO_ADDCompletion);

                const addToTextIS_FILECompletion = new vscode.CompletionItem('IS_FILE');
                addToTextIS_FILECompletion.kind = vscode.CompletionItemKind.Field;
                addToTextIS_FILECompletion.insertText = new vscode.SnippetString("IS_FILE = \"${1}\"");
                addToTextIS_FILECompletion.documentation = new vscode.MarkdownString('Angabe, ob der zu erg\u00E4nzende Text ein Dateipfad ist. Default false');
                items.push(addToTextIS_FILECompletion);

                const addToTextTARGET_FILECompletion = new vscode.CompletionItem('TARGET_FILE');
                addToTextTARGET_FILECompletion.kind = vscode.CompletionItemKind.Field;
                addToTextTARGET_FILECompletion.insertText = new vscode.SnippetString("TARGET_FILE = \"${1}\"");
                addToTextTARGET_FILECompletion.documentation = new vscode.MarkdownString('Pfad, wenn Ergebnis direkt in Datei geschrieben werden soll.');
                items.push(addToTextTARGET_FILECompletion);

                const addToTextTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                addToTextTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                addToTextTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                addToTextTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den die bearbeitete Datei geschrieben wird.');
                items.push(addToTextTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*agentCallJava\s*\(.*/.test(linePrefix)) {

                const agentCallJavaMETHODCompletion = new vscode.CompletionItem('METHOD');
                agentCallJavaMETHODCompletion.kind = vscode.CompletionItemKind.Field;
                agentCallJavaMETHODCompletion.insertText = new vscode.SnippetString("METHOD = \"${1}\"");
                agentCallJavaMETHODCompletion.documentation = new vscode.MarkdownString('Auszuf\u00FChrende Methode der Komponente');
                items.push(agentCallJavaMETHODCompletion);

                const agentCallJavaPARAM1Completion = new vscode.CompletionItem('PARAM1');
                agentCallJavaPARAM1Completion.kind = vscode.CompletionItemKind.Field;
                agentCallJavaPARAM1Completion.insertText = new vscode.SnippetString("PARAM1 = \"${1}\"");
                agentCallJavaPARAM1Completion.documentation = new vscode.MarkdownString('1. Parameter der auszuf\u00FChrenden Methode');
                items.push(agentCallJavaPARAM1Completion);

                const agentCallJavaPARAM2Completion = new vscode.CompletionItem('PARAM2');
                agentCallJavaPARAM2Completion.kind = vscode.CompletionItemKind.Field;
                agentCallJavaPARAM2Completion.insertText = new vscode.SnippetString("PARAM2 = \"${1}\"");
                agentCallJavaPARAM2Completion.documentation = new vscode.MarkdownString('2. Parameter der auszuf\u00FChrenden Methode');
                items.push(agentCallJavaPARAM2Completion);

                const agentCallJavaPARAM3Completion = new vscode.CompletionItem('PARAM3');
                agentCallJavaPARAM3Completion.kind = vscode.CompletionItemKind.Field;
                agentCallJavaPARAM3Completion.insertText = new vscode.SnippetString("PARAM3 = \"${1}\"");
                agentCallJavaPARAM3Completion.documentation = new vscode.MarkdownString('3. Parameter der auszuf\u00FChrenden Methode');
                items.push(agentCallJavaPARAM3Completion);

                const agentCallJavaPARAM4Completion = new vscode.CompletionItem('PARAM4');
                agentCallJavaPARAM4Completion.kind = vscode.CompletionItemKind.Field;
                agentCallJavaPARAM4Completion.insertText = new vscode.SnippetString("PARAM4 = \"${1}\"");
                agentCallJavaPARAM4Completion.documentation = new vscode.MarkdownString('4. Parameter der auszuf\u00FChrenden Methode');
                items.push(agentCallJavaPARAM4Completion);

                const agentCallJavaPARAM5Completion = new vscode.CompletionItem('PARAM5');
                agentCallJavaPARAM5Completion.kind = vscode.CompletionItemKind.Field;
                agentCallJavaPARAM5Completion.insertText = new vscode.SnippetString("PARAM5 = \"${1}\"");
                agentCallJavaPARAM5Completion.documentation = new vscode.MarkdownString('5. Parameter der auszuf\u00FChrenden Methode');
                items.push(agentCallJavaPARAM5Completion);

                const agentCallJavaPARAM6Completion = new vscode.CompletionItem('PARAM6');
                agentCallJavaPARAM6Completion.kind = vscode.CompletionItemKind.Field;
                agentCallJavaPARAM6Completion.insertText = new vscode.SnippetString("PARAM6 = \"${1}\"");
                agentCallJavaPARAM6Completion.documentation = new vscode.MarkdownString('6. Parameter der auszuf\u00FChrenden Methode');
                items.push(agentCallJavaPARAM6Completion);

                const agentCallJavaPARAM7Completion = new vscode.CompletionItem('PARAM7');
                agentCallJavaPARAM7Completion.kind = vscode.CompletionItemKind.Field;
                agentCallJavaPARAM7Completion.insertText = new vscode.SnippetString("PARAM7 = \"${1}\"");
                agentCallJavaPARAM7Completion.documentation = new vscode.MarkdownString('7. Parameter der auszuf\u00FChrenden Methode');
                items.push(agentCallJavaPARAM7Completion);

                const agentCallJavaTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                agentCallJavaTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                agentCallJavaTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                agentCallJavaTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Schl\u00FCssel gesetzt werden, unter dem das Ergebnis dieser Operation gespeichert wird.');
                items.push(agentCallJavaTARGET_STORAGE_KEYCompletion);

                const agentCallJavaPARAM8Completion = new vscode.CompletionItem('PARAM8');
                agentCallJavaPARAM8Completion.kind = vscode.CompletionItemKind.Field;
                agentCallJavaPARAM8Completion.insertText = new vscode.SnippetString("PARAM8 = \"${1}\"");
                agentCallJavaPARAM8Completion.documentation = new vscode.MarkdownString('8. Parameter der auszuf\u00FChrenden Methode');
                items.push(agentCallJavaPARAM8Completion);
            }

            if (/.*\s*attachJava\s*\(.*/.test(linePrefix)) {

                const attachJavaNAMECompletion = new vscode.CompletionItem('NAME');
                attachJavaNAMECompletion.kind = vscode.CompletionItemKind.Field;
                attachJavaNAMECompletion.insertText = new vscode.SnippetString("NAME = \"${1}\"");
                attachJavaNAMECompletion.documentation = new vscode.MarkdownString('Name des Java Fensters');
                items.push(attachJavaNAMECompletion);
            }

            if (/.*\s*backup\s*\(.*/.test(linePrefix)) {

                const backupRESULT_LEVELCompletion = new vscode.CompletionItem('RESULT_LEVEL');
                backupRESULT_LEVELCompletion.kind = vscode.CompletionItemKind.Field;
                backupRESULT_LEVELCompletion.insertText = new vscode.SnippetString("RESULT_LEVEL = \"${1}\"");
                backupRESULT_LEVELCompletion.documentation = new vscode.MarkdownString('Ergebnisstatus (Result-Level), mit dem das Kommando abschlie\u00DFen soll. M\u00F6gliche Werte: Erfolg, Warnung, NoRun, Fehler, Abbruch, Timeout bzw. Successful, Warning, NoRun, Failed, Aborted, Timeout.');
                items.push(backupRESULT_LEVELCompletion);

                const backupMESSAGECompletion = new vscode.CompletionItem('MESSAGE');
                backupMESSAGECompletion.kind = vscode.CompletionItemKind.Field;
                backupMESSAGECompletion.insertText = new vscode.SnippetString("MESSAGE = \"${1}\"");
                backupMESSAGECompletion.documentation = new vscode.MarkdownString('Ergebnisnachricht, die im Bericht (Report) angezeigt werden soll.');
                items.push(backupMESSAGECompletion);
            }

            if (/.*\s*basicAutoItCommand\s*\(.*/.test(linePrefix)) {

                const basicAutoItCommandPARAM0Completion = new vscode.CompletionItem('PARAM0');
                basicAutoItCommandPARAM0Completion.kind = vscode.CompletionItemKind.Field;
                basicAutoItCommandPARAM0Completion.insertText = new vscode.SnippetString("PARAM0 = \"${1}\"");
                basicAutoItCommandPARAM0Completion.documentation = new vscode.MarkdownString('PARAM');
                items.push(basicAutoItCommandPARAM0Completion);

                const basicAutoItCommandPARAM1Completion = new vscode.CompletionItem('PARAM1');
                basicAutoItCommandPARAM1Completion.kind = vscode.CompletionItemKind.Field;
                basicAutoItCommandPARAM1Completion.insertText = new vscode.SnippetString("PARAM1 = \"${1}\"");
                basicAutoItCommandPARAM1Completion.documentation = new vscode.MarkdownString('PARAM');
                items.push(basicAutoItCommandPARAM1Completion);

                const basicAutoItCommandPARAM2Completion = new vscode.CompletionItem('PARAM2');
                basicAutoItCommandPARAM2Completion.kind = vscode.CompletionItemKind.Field;
                basicAutoItCommandPARAM2Completion.insertText = new vscode.SnippetString("PARAM2 = \"${1}\"");
                basicAutoItCommandPARAM2Completion.documentation = new vscode.MarkdownString('PARAM');
                items.push(basicAutoItCommandPARAM2Completion);

                const basicAutoItCommandPARAM3Completion = new vscode.CompletionItem('PARAM3');
                basicAutoItCommandPARAM3Completion.kind = vscode.CompletionItemKind.Field;
                basicAutoItCommandPARAM3Completion.insertText = new vscode.SnippetString("PARAM3 = \"${1}\"");
                basicAutoItCommandPARAM3Completion.documentation = new vscode.MarkdownString('PARAM');
                items.push(basicAutoItCommandPARAM3Completion);

                const basicAutoItCommandPARAM4Completion = new vscode.CompletionItem('PARAM4');
                basicAutoItCommandPARAM4Completion.kind = vscode.CompletionItemKind.Field;
                basicAutoItCommandPARAM4Completion.insertText = new vscode.SnippetString("PARAM4 = \"${1}\"");
                basicAutoItCommandPARAM4Completion.documentation = new vscode.MarkdownString('PARAM');
                items.push(basicAutoItCommandPARAM4Completion);

                const basicAutoItCommandPARAM5Completion = new vscode.CompletionItem('PARAM5');
                basicAutoItCommandPARAM5Completion.kind = vscode.CompletionItemKind.Field;
                basicAutoItCommandPARAM5Completion.insertText = new vscode.SnippetString("PARAM5 = \"${1}\"");
                basicAutoItCommandPARAM5Completion.documentation = new vscode.MarkdownString('PARAM');
                items.push(basicAutoItCommandPARAM5Completion);

                const basicAutoItCommandPARAM6Completion = new vscode.CompletionItem('PARAM6');
                basicAutoItCommandPARAM6Completion.kind = vscode.CompletionItemKind.Field;
                basicAutoItCommandPARAM6Completion.insertText = new vscode.SnippetString("PARAM6 = \"${1}\"");
                basicAutoItCommandPARAM6Completion.documentation = new vscode.MarkdownString('PARAM');
                items.push(basicAutoItCommandPARAM6Completion);

                const basicAutoItCommandPARAM7Completion = new vscode.CompletionItem('PARAM7');
                basicAutoItCommandPARAM7Completion.kind = vscode.CompletionItemKind.Field;
                basicAutoItCommandPARAM7Completion.insertText = new vscode.SnippetString("PARAM7 = \"${1}\"");
                basicAutoItCommandPARAM7Completion.documentation = new vscode.MarkdownString('PARAM');
                items.push(basicAutoItCommandPARAM7Completion);

                const basicAutoItCommandTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                basicAutoItCommandTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                basicAutoItCommandTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                basicAutoItCommandTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Schl\u00FCssel gesetzt werden, unter dem das Ergebnis dieser Operation gespeichert wird.');
                items.push(basicAutoItCommandTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*basicSapCommand\s*\(.*/.test(linePrefix)) {

                const basicSapCommandPARAM0Completion = new vscode.CompletionItem('PARAM0');
                basicSapCommandPARAM0Completion.kind = vscode.CompletionItemKind.Field;
                basicSapCommandPARAM0Completion.insertText = new vscode.SnippetString("PARAM0 = \"${1}\"");
                basicSapCommandPARAM0Completion.documentation = new vscode.MarkdownString('Erster Parameter f\u00FCr SAP Aufruf');
                items.push(basicSapCommandPARAM0Completion);

                const basicSapCommandPARAM1Completion = new vscode.CompletionItem('PARAM1');
                basicSapCommandPARAM1Completion.kind = vscode.CompletionItemKind.Field;
                basicSapCommandPARAM1Completion.insertText = new vscode.SnippetString("PARAM1 = \"${1}\"");
                basicSapCommandPARAM1Completion.documentation = new vscode.MarkdownString('Zweiter Parameter f\u00FCr SAP Aufruf');
                items.push(basicSapCommandPARAM1Completion);

                const basicSapCommandPARAM2Completion = new vscode.CompletionItem('PARAM2');
                basicSapCommandPARAM2Completion.kind = vscode.CompletionItemKind.Field;
                basicSapCommandPARAM2Completion.insertText = new vscode.SnippetString("PARAM2 = \"${1}\"");
                basicSapCommandPARAM2Completion.documentation = new vscode.MarkdownString('Dritter Parameter f\u00FCr SAP Aufruf');
                items.push(basicSapCommandPARAM2Completion);

                const basicSapCommandPARAM3Completion = new vscode.CompletionItem('PARAM3');
                basicSapCommandPARAM3Completion.kind = vscode.CompletionItemKind.Field;
                basicSapCommandPARAM3Completion.insertText = new vscode.SnippetString("PARAM3 = \"${1}\"");
                basicSapCommandPARAM3Completion.documentation = new vscode.MarkdownString('Vierter Parameter f\u00FCr SAP Aufruf');
                items.push(basicSapCommandPARAM3Completion);

                const basicSapCommandPARAM4Completion = new vscode.CompletionItem('PARAM4');
                basicSapCommandPARAM4Completion.kind = vscode.CompletionItemKind.Field;
                basicSapCommandPARAM4Completion.insertText = new vscode.SnippetString("PARAM4 = \"${1}\"");
                basicSapCommandPARAM4Completion.documentation = new vscode.MarkdownString('F\u00FCnfter Parameter f\u00FCr SAP Aufruf');
                items.push(basicSapCommandPARAM4Completion);

                const basicSapCommandPARAM5Completion = new vscode.CompletionItem('PARAM5');
                basicSapCommandPARAM5Completion.kind = vscode.CompletionItemKind.Field;
                basicSapCommandPARAM5Completion.insertText = new vscode.SnippetString("PARAM5 = \"${1}\"");
                basicSapCommandPARAM5Completion.documentation = new vscode.MarkdownString('Sechster Parameter f\u00FCr SAP Aufruf');
                items.push(basicSapCommandPARAM5Completion);

                const basicSapCommandPARAM6Completion = new vscode.CompletionItem('PARAM6');
                basicSapCommandPARAM6Completion.kind = vscode.CompletionItemKind.Field;
                basicSapCommandPARAM6Completion.insertText = new vscode.SnippetString("PARAM6 = \"${1}\"");
                basicSapCommandPARAM6Completion.documentation = new vscode.MarkdownString('Siebter Parameter f\u00FCr SAP Aufruf');
                items.push(basicSapCommandPARAM6Completion);

                const basicSapCommandPARAM7Completion = new vscode.CompletionItem('PARAM7');
                basicSapCommandPARAM7Completion.kind = vscode.CompletionItemKind.Field;
                basicSapCommandPARAM7Completion.insertText = new vscode.SnippetString("PARAM7 = \"${1}\"");
                basicSapCommandPARAM7Completion.documentation = new vscode.MarkdownString('Achter Parameter f\u00FCr SAP Aufruf');
                items.push(basicSapCommandPARAM7Completion);

                const basicSapCommandTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                basicSapCommandTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                basicSapCommandTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                basicSapCommandTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den ein potenzielles Ergebnis geschrieben werden soll.');
                items.push(basicSapCommandTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*break\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*changeStorageValue\s*\(.*/.test(linePrefix)) {

                const changeStorageValueSOURCE_STORAGE_KEYCompletion = new vscode.CompletionItem('SOURCE_STORAGE_KEY');
                changeStorageValueSOURCE_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                changeStorageValueSOURCE_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("SOURCE_STORAGE_KEY = \"${1}\"");
                changeStorageValueSOURCE_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel der zu modifizierenden Laufzeitvariable');
                items.push(changeStorageValueSOURCE_STORAGE_KEYCompletion);

                const changeStorageValueOPERATIONCompletion = new vscode.CompletionItem('OPERATION');
                changeStorageValueOPERATIONCompletion.kind = vscode.CompletionItemKind.Field;
                changeStorageValueOPERATIONCompletion.insertText = new vscode.SnippetString("OPERATION = \"${1}\"");
                changeStorageValueOPERATIONCompletion.documentation = new vscode.MarkdownString('Durchzuf\u00FChrende Operation. M\u00F6glich sind:            - entferne            - entferneLeerzeichen                                          - reset: setzt den Wert auf \'0\'            - addOrReplace: der Wert der Variable SOURCE_STORAGE_KEY wird durch den Wert in PARAM3 \u00FCberschrieben oder dieser wird neu hinzugef\u00FCgt. Wird PARAM3 auf den Wert {CLIPBOARD} gesetzt, so wird der aktuelle Wert der Zwischenablage in SOURCE_STORAGE_KEY gespeichert.       - extractSingleSqlResultFromJson: extrahiert einen einzelnen Wert aus der in PARAM3 gegebenen Spalte aus dem unter KEY als JSON-Array gespeicherten SQL-Ergebnis. Beispiel: [{\'ID\' :123 }] wird zu 1 wenn PARAM3 auf ID gesetzt wird.      Voraussetzung: die Variable enth\u00E4lt das Ergebnis genau eines ( also      nicht mehrerer ) SQL-Statements. Besteht das unter KEY gespeichert      SQL-Ergebnis aus mehreren Zeilen , wird per Default die erste Zeile      ausgelesen. Soll jedoch der Wert aus einer bestimmten Zeile      ausgelesen werden , kann diese in PARAM4 festgelegt werden.      Beispiel: [ \'ID\' :123 } ID\' :456 } wird zu 4 wenn PARAM3 auf ID      und PARAM4 auf 2 gesetzt wird. ( PARAM3=Spaltenname ( Pflicht )      PARAM4=Zeilenindex ( optional , Z\u00E4hlung ab 1)). Befinden sich Ergebnisse aus mehreren SQL-Kommandos in der Variablen, kann ein einzelner Eintrag \u00FCber einen Index in PARAM4 extrahiert werden (Voraussetzung: PARAM3 ist nicht gesetzt).       - regex: generiert und speichert einen Wert aus einer in PARAM3 \u00FCbergebenen Regular Expression             - regex_from_old: speichert den resultierenden String aus der Regular Expression (PARAM3) und dem Quellstring (SOURCE_STORAGE_VALUE)            - get_testscript_directory: speichert den absoluten Pfad des Testscript-Verzeichnisses in einer Variablen.            - replace_char: ersetzt in SOURCE_STORAGE_KEY eine gefundene Zeichenfolge (PARAM3) durch mitgegebene Zeichen (PARAM4) und speichert sie bei Bedarf in einer neuen Variablen.                                          - convert_date: wandelt das Format jjjj-MM-dd in das Format dd.MM.jjjj um.                                          - calculate_date: generiert ein String mit dem aktuellen Datum im Format jjjj-MM-dd, wenn PARAM3 und PARAM4 nicht gesetzt sind. \u00DCber PARAM3 eine Modifikation eines Datums gesetzt werden (Voraussetzung ist das Format jjjj-MM-dd). M\u00F6glich sind add_day, add_month, add_year, set_day, set_month und set_year mit dem ganzahligen Wert aus PARAM4.         ');
                items.push(changeStorageValueOPERATIONCompletion);

                const changeStorageValuePARAM3Completion = new vscode.CompletionItem('PARAM3');
                changeStorageValuePARAM3Completion.kind = vscode.CompletionItemKind.Field;
                changeStorageValuePARAM3Completion.insertText = new vscode.SnippetString("PARAM3 = \"${1}\"");
                changeStorageValuePARAM3Completion.documentation = new vscode.MarkdownString('Parameter abh\u00E4ngig von der Operation (siehe Parameter OPERATION).');
                items.push(changeStorageValuePARAM3Completion);

                const changeStorageValuePARAM4Completion = new vscode.CompletionItem('PARAM4');
                changeStorageValuePARAM4Completion.kind = vscode.CompletionItemKind.Field;
                changeStorageValuePARAM4Completion.insertText = new vscode.SnippetString("PARAM4 = \"${1}\"");
                changeStorageValuePARAM4Completion.documentation = new vscode.MarkdownString('Parameter abh\u00E4ngig von der Operation (siehe Parameter OPERATION).');
                items.push(changeStorageValuePARAM4Completion);

                const changeStorageValueTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                changeStorageValueTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                changeStorageValueTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                changeStorageValueTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein neuer Schl\u00FCssel gesetzt werden, unter dem das Ergebnis dieser Operation gespeichert wird. Ist TARGET_STORAGE_KEY nicht gesetzt, wird das Ergebnis wieder unter dem Schl\u00FCssel SOURCE_STORAGE_KEY gespeichert, d.h. ein evtl. bislang dort abgelegter Wert wird \u00FCberschrieben.');
                items.push(changeStorageValueTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*checkAlertWeb\s*\(.*/.test(linePrefix)) {

                const checkAlertWebALERT_MESSAGECompletion = new vscode.CompletionItem('ALERT_MESSAGE');
                checkAlertWebALERT_MESSAGECompletion.kind = vscode.CompletionItemKind.Field;
                checkAlertWebALERT_MESSAGECompletion.insertText = new vscode.SnippetString("ALERT_MESSAGE = \"${1}\"");
                checkAlertWebALERT_MESSAGECompletion.documentation = new vscode.MarkdownString('Vollst\u00E4ndige Warnung oder Teil (Substring) der Meldung, die zu pr\u00FCfen ist.');
                items.push(checkAlertWebALERT_MESSAGECompletion);

                const checkAlertWebACCEPT_ALERTCompletion = new vscode.CompletionItem('ACCEPT_ALERT');
                checkAlertWebACCEPT_ALERTCompletion.kind = vscode.CompletionItemKind.Field;
                checkAlertWebACCEPT_ALERTCompletion.insertText = new vscode.SnippetString("ACCEPT_ALERT = \"${1}\"");
                checkAlertWebACCEPT_ALERTCompletion.documentation = new vscode.MarkdownString('Auf False setzen, falls die Meldung nach Pr\u00FCfung nicht geschlossen werden soll. (Default True)');
                items.push(checkAlertWebACCEPT_ALERTCompletion);

                const checkAlertWebACCEPT_ALERT_ON_WARNINGCompletion = new vscode.CompletionItem('ACCEPT_ALERT_ON_WARNING');
                checkAlertWebACCEPT_ALERT_ON_WARNINGCompletion.kind = vscode.CompletionItemKind.Field;
                checkAlertWebACCEPT_ALERT_ON_WARNINGCompletion.insertText = new vscode.SnippetString("ACCEPT_ALERT_ON_WARNING = \"${1}\"");
                checkAlertWebACCEPT_ALERT_ON_WARNINGCompletion.documentation = new vscode.MarkdownString('Auf False setzen, falls die Meldung nicht geschlossen werden soll, nachdem gefunden wurde, dass ihr Inhalt nicht die ALERT_MESSAGE enth\u00E4lt. (Default True)');
                items.push(checkAlertWebACCEPT_ALERT_ON_WARNINGCompletion);

                const checkAlertWebTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                checkAlertWebTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                checkAlertWebTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                checkAlertWebTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Optionaler Schl\u00FCssel, unter dem der Inhalt der Alarm-Meldung in der Storage-Datei gespeichert werden kann.');
                items.push(checkAlertWebTARGET_STORAGE_KEYCompletion);

                const checkAlertWebWEB_DRIVER_WAIT_TIMEOUTCompletion = new vscode.CompletionItem('WEB_DRIVER_WAIT_TIMEOUT');
                checkAlertWebWEB_DRIVER_WAIT_TIMEOUTCompletion.kind = vscode.CompletionItemKind.Field;
                checkAlertWebWEB_DRIVER_WAIT_TIMEOUTCompletion.insertText = new vscode.SnippetString("WEB_DRIVER_WAIT_TIMEOUT = \"${1}\"");
                checkAlertWebWEB_DRIVER_WAIT_TIMEOUTCompletion.documentation = new vscode.MarkdownString('Wartet auf Timout.');
                items.push(checkAlertWebWEB_DRIVER_WAIT_TIMEOUTCompletion);
            }

            if (/.*\s*checkButtonIsSelectableWinEle\s*\(.*/.test(linePrefix)) {

                const checkButtonIsSelectableWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                checkButtonIsSelectableWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkButtonIsSelectableWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                checkButtonIsSelectableWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(checkButtonIsSelectableWinEleWINDOW_NAMECompletion);

                const checkButtonIsSelectableWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                checkButtonIsSelectableWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkButtonIsSelectableWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                checkButtonIsSelectableWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(checkButtonIsSelectableWinElePROCESS_NAMECompletion);

                const checkButtonIsSelectableWinEleBUTTON_NAMECompletion = new vscode.CompletionItem('BUTTON_NAME');
                checkButtonIsSelectableWinEleBUTTON_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkButtonIsSelectableWinEleBUTTON_NAMECompletion.insertText = new vscode.SnippetString("BUTTON_NAME = \"${1}\"");
                checkButtonIsSelectableWinEleBUTTON_NAMECompletion.documentation = new vscode.MarkdownString('Name des Buttons. Dieser ist h\u00E4ufig identisch mit seinem Text (z.B. \'OK\'). Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen Namen zu ermitteln.');
                items.push(checkButtonIsSelectableWinEleBUTTON_NAMECompletion);

                const checkButtonIsSelectableWinEleSHOULD_BECompletion = new vscode.CompletionItem('SHOULD_BE');
                checkButtonIsSelectableWinEleSHOULD_BECompletion.kind = vscode.CompletionItemKind.Field;
                checkButtonIsSelectableWinEleSHOULD_BECompletion.insertText = new vscode.SnippetString("SHOULD_BE = \"${1}\"");
                checkButtonIsSelectableWinEleSHOULD_BECompletion.documentation = new vscode.MarkdownString('Zustand, den der Button haben sollte. Entweder true oder false.');
                items.push(checkButtonIsSelectableWinEleSHOULD_BECompletion);
            }

            if (/.*\s*checkCheckboxIsSelectableWinEle\s*\(.*/.test(linePrefix)) {

                const checkCheckboxIsSelectableWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                checkCheckboxIsSelectableWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxIsSelectableWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                checkCheckboxIsSelectableWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(checkCheckboxIsSelectableWinEleWINDOW_NAMECompletion);

                const checkCheckboxIsSelectableWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                checkCheckboxIsSelectableWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxIsSelectableWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                checkCheckboxIsSelectableWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(checkCheckboxIsSelectableWinElePROCESS_NAMECompletion);

                const checkCheckboxIsSelectableWinEleCHECKBOX_NAMECompletion = new vscode.CompletionItem('CHECKBOX_NAME');
                checkCheckboxIsSelectableWinEleCHECKBOX_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxIsSelectableWinEleCHECKBOX_NAMECompletion.insertText = new vscode.SnippetString("CHECKBOX_NAME = \"${1}\"");
                checkCheckboxIsSelectableWinEleCHECKBOX_NAMECompletion.documentation = new vscode.MarkdownString('Name der Checkbox, die gesteuert werden soll. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen zu ermitteln.');
                items.push(checkCheckboxIsSelectableWinEleCHECKBOX_NAMECompletion);

                const checkCheckboxIsSelectableWinEleSHOULD_BECompletion = new vscode.CompletionItem('SHOULD_BE');
                checkCheckboxIsSelectableWinEleSHOULD_BECompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxIsSelectableWinEleSHOULD_BECompletion.insertText = new vscode.SnippetString("SHOULD_BE = \"${1}\"");
                checkCheckboxIsSelectableWinEleSHOULD_BECompletion.documentation = new vscode.MarkdownString('Eigenschaft, die das Element haben sollte. Es sind die Werte \'true\' oder \'false\' m\u00F6glich.');
                items.push(checkCheckboxIsSelectableWinEleSHOULD_BECompletion);

                const checkCheckboxIsSelectableWinEleCHECKBOX_INDEXCompletion = new vscode.CompletionItem('CHECKBOX_INDEX');
                checkCheckboxIsSelectableWinEleCHECKBOX_INDEXCompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxIsSelectableWinEleCHECKBOX_INDEXCompletion.insertText = new vscode.SnippetString("CHECKBOX_INDEX = \"${1}\"");
                checkCheckboxIsSelectableWinEleCHECKBOX_INDEXCompletion.documentation = new vscode.MarkdownString('Alternativ zum Namen kann ein Index angegeben werden, der sich auf alle Checkboxes des Fensers bezieht.');
                items.push(checkCheckboxIsSelectableWinEleCHECKBOX_INDEXCompletion);
            }

            if (/.*\s*checkCheckboxIsSelectedWinEle\s*\(.*/.test(linePrefix)) {

                const checkCheckboxIsSelectedWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                checkCheckboxIsSelectedWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxIsSelectedWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                checkCheckboxIsSelectedWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(checkCheckboxIsSelectedWinEleWINDOW_NAMECompletion);

                const checkCheckboxIsSelectedWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                checkCheckboxIsSelectedWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxIsSelectedWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                checkCheckboxIsSelectedWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(checkCheckboxIsSelectedWinElePROCESS_NAMECompletion);

                const checkCheckboxIsSelectedWinEleCHECKBOX_NAMECompletion = new vscode.CompletionItem('CHECKBOX_NAME');
                checkCheckboxIsSelectedWinEleCHECKBOX_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxIsSelectedWinEleCHECKBOX_NAMECompletion.insertText = new vscode.SnippetString("CHECKBOX_NAME = \"${1}\"");
                checkCheckboxIsSelectedWinEleCHECKBOX_NAMECompletion.documentation = new vscode.MarkdownString('Name der Checkbox, die gesteuert werden soll. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen zu ermitteln.');
                items.push(checkCheckboxIsSelectedWinEleCHECKBOX_NAMECompletion);

                const checkCheckboxIsSelectedWinEleSHOULD_BECompletion = new vscode.CompletionItem('SHOULD_BE');
                checkCheckboxIsSelectedWinEleSHOULD_BECompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxIsSelectedWinEleSHOULD_BECompletion.insertText = new vscode.SnippetString("SHOULD_BE = \"${1}\"");
                checkCheckboxIsSelectedWinEleSHOULD_BECompletion.documentation = new vscode.MarkdownString('Eigenschaft, die das Element haben sollte. Es sind die Werte \'true\' oder \'false\' m\u00F6glich.');
                items.push(checkCheckboxIsSelectedWinEleSHOULD_BECompletion);

                const checkCheckboxIsSelectedWinEleCHECKBOX_INDEXCompletion = new vscode.CompletionItem('CHECKBOX_INDEX');
                checkCheckboxIsSelectedWinEleCHECKBOX_INDEXCompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxIsSelectedWinEleCHECKBOX_INDEXCompletion.insertText = new vscode.SnippetString("CHECKBOX_INDEX = \"${1}\"");
                checkCheckboxIsSelectedWinEleCHECKBOX_INDEXCompletion.documentation = new vscode.MarkdownString('Alternativ zum Namen kann ein Index angegeben werden, der sich auf alle Checkboxes des Fensers bezieht.');
                items.push(checkCheckboxIsSelectedWinEleCHECKBOX_INDEXCompletion);
            }

            if (/.*\s*checkCheckboxSelectedWeb\s*\(.*/.test(linePrefix)) {

                const checkCheckboxSelectedWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                checkCheckboxSelectedWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxSelectedWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                checkCheckboxSelectedWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(checkCheckboxSelectedWebBY_CRITERIACompletion);

                const checkCheckboxSelectedWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                checkCheckboxSelectedWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxSelectedWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                checkCheckboxSelectedWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(checkCheckboxSelectedWebELEMENT_NAMECompletion);

                const checkCheckboxSelectedWebCHECK_SELECTEDCompletion = new vscode.CompletionItem('CHECK_SELECTED');
                checkCheckboxSelectedWebCHECK_SELECTEDCompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxSelectedWebCHECK_SELECTEDCompletion.insertText = new vscode.SnippetString("CHECK_SELECTED = \"${1}\"");
                checkCheckboxSelectedWebCHECK_SELECTEDCompletion.documentation = new vscode.MarkdownString('Wenn false, wird gepr\u00FCft, ob das Element nicht ausgew\u00E4hlt wurde. Wenn true, wird gepr\u00FCft, ob das Element ausgew\u00E4hlt wurde (Default: true)');
                items.push(checkCheckboxSelectedWebCHECK_SELECTEDCompletion);
            }

            if (/.*\s*checkCheckboxWinEle\s*\(.*/.test(linePrefix)) {

                const checkCheckboxWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                checkCheckboxWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                checkCheckboxWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(checkCheckboxWinEleWINDOW_NAMECompletion);

                const checkCheckboxWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                checkCheckboxWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                checkCheckboxWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(checkCheckboxWinElePROCESS_NAMECompletion);

                const checkCheckboxWinEleCHECKBOX_NAMECompletion = new vscode.CompletionItem('CHECKBOX_NAME');
                checkCheckboxWinEleCHECKBOX_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxWinEleCHECKBOX_NAMECompletion.insertText = new vscode.SnippetString("CHECKBOX_NAME = \"${1}\"");
                checkCheckboxWinEleCHECKBOX_NAMECompletion.documentation = new vscode.MarkdownString('Name der Checkbox, die gesteuert werden soll. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen zu ermitteln.');
                items.push(checkCheckboxWinEleCHECKBOX_NAMECompletion);

                const checkCheckboxWinEleCHECKBOX_INDEXCompletion = new vscode.CompletionItem('CHECKBOX_INDEX');
                checkCheckboxWinEleCHECKBOX_INDEXCompletion.kind = vscode.CompletionItemKind.Field;
                checkCheckboxWinEleCHECKBOX_INDEXCompletion.insertText = new vscode.SnippetString("CHECKBOX_INDEX = \"${1}\"");
                checkCheckboxWinEleCHECKBOX_INDEXCompletion.documentation = new vscode.MarkdownString('Alternativ zum Namen kann ein Index angegeben werden, der sich auf alle Checkboxes des Fensers bezieht.');
                items.push(checkCheckboxWinEleCHECKBOX_INDEXCompletion);
            }

            if (/.*\s*checkCurrentActivityAndroid\s*\(.*/.test(linePrefix)) {

                const checkCurrentActivityAndroidEXPECTED_ACTIVITY_NAMECompletion = new vscode.CompletionItem('EXPECTED_ACTIVITY_NAME');
                checkCurrentActivityAndroidEXPECTED_ACTIVITY_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkCurrentActivityAndroidEXPECTED_ACTIVITY_NAMECompletion.insertText = new vscode.SnippetString("EXPECTED_ACTIVITY_NAME = \"${1}\"");
                checkCurrentActivityAndroidEXPECTED_ACTIVITY_NAMECompletion.documentation = new vscode.MarkdownString('Der Parameter muss mit dem Namen der Activity belegt werden.');
                items.push(checkCurrentActivityAndroidEXPECTED_ACTIVITY_NAMECompletion);
            }

            if (/.*\s*checkDriverActive\s*\(.*/.test(linePrefix)) {

                const checkDriverActiveBROWSER_ABBREVIATIONCompletion = new vscode.CompletionItem('BROWSER_ABBREVIATION');
                checkDriverActiveBROWSER_ABBREVIATIONCompletion.kind = vscode.CompletionItemKind.Field;
                checkDriverActiveBROWSER_ABBREVIATIONCompletion.insertText = new vscode.SnippetString("BROWSER_ABBREVIATION = \"${1}\"");
                checkDriverActiveBROWSER_ABBREVIATIONCompletion.documentation = new vscode.MarkdownString('Abk\u00FCrzung f\u00FCr den Browser, der \u00FCberpr\u00FCft werden soll (FF=Firefox, IE=Internet Explorer, CH=Chrome, SA=Safari)');
                items.push(checkDriverActiveBROWSER_ABBREVIATIONCompletion);

                const checkDriverActiveBROWSER_ALIASCompletion = new vscode.CompletionItem('BROWSER_ALIAS');
                checkDriverActiveBROWSER_ALIASCompletion.kind = vscode.CompletionItemKind.Field;
                checkDriverActiveBROWSER_ALIASCompletion.insertText = new vscode.SnippetString("BROWSER_ALIAS = \"${1}\"");
                checkDriverActiveBROWSER_ALIASCompletion.documentation = new vscode.MarkdownString('(Wird in startWeb festgelegt). Falls mehrere gleichartige Browser ge\u00F6ffnet sind, eindeutiger Alias des zu pr\u00FCfenden Browsers.');
                items.push(checkDriverActiveBROWSER_ALIASCompletion);
            }

            if (/.*\s*checkDropDownIsSelectableWinEle\s*\(.*/.test(linePrefix)) {

                const checkDropDownIsSelectableWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                checkDropDownIsSelectableWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkDropDownIsSelectableWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                checkDropDownIsSelectableWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(checkDropDownIsSelectableWinEleWINDOW_NAMECompletion);

                const checkDropDownIsSelectableWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                checkDropDownIsSelectableWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkDropDownIsSelectableWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                checkDropDownIsSelectableWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(checkDropDownIsSelectableWinElePROCESS_NAMECompletion);

                const checkDropDownIsSelectableWinEleDROPDOWN_NAMECompletion = new vscode.CompletionItem('DROPDOWN_NAME');
                checkDropDownIsSelectableWinEleDROPDOWN_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkDropDownIsSelectableWinEleDROPDOWN_NAMECompletion.insertText = new vscode.SnippetString("DROPDOWN_NAME = \"${1}\"");
                checkDropDownIsSelectableWinEleDROPDOWN_NAMECompletion.documentation = new vscode.MarkdownString('Name des Dropdown Men\u00FCs. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen zu ermitteln.');
                items.push(checkDropDownIsSelectableWinEleDROPDOWN_NAMECompletion);

                const checkDropDownIsSelectableWinEleSHOULD_BECompletion = new vscode.CompletionItem('SHOULD_BE');
                checkDropDownIsSelectableWinEleSHOULD_BECompletion.kind = vscode.CompletionItemKind.Field;
                checkDropDownIsSelectableWinEleSHOULD_BECompletion.insertText = new vscode.SnippetString("SHOULD_BE = \"${1}\"");
                checkDropDownIsSelectableWinEleSHOULD_BECompletion.documentation = new vscode.MarkdownString('Eigenschaft, die das Element haben sollte. Es sind die Werte \'true\' oder \'false\' m\u00F6glich.');
                items.push(checkDropDownIsSelectableWinEleSHOULD_BECompletion);

                const checkDropDownIsSelectableWinEleDROPDOWN_INDEXCompletion = new vscode.CompletionItem('DROPDOWN_INDEX');
                checkDropDownIsSelectableWinEleDROPDOWN_INDEXCompletion.kind = vscode.CompletionItemKind.Field;
                checkDropDownIsSelectableWinEleDROPDOWN_INDEXCompletion.insertText = new vscode.SnippetString("DROPDOWN_INDEX = \"${1}\"");
                checkDropDownIsSelectableWinEleDROPDOWN_INDEXCompletion.documentation = new vscode.MarkdownString('Alternativ zum Namen kann ein Index angegeben werden, der sich auf alle Dropdown-menues des Fensers bezieht.');
                items.push(checkDropDownIsSelectableWinEleDROPDOWN_INDEXCompletion);
            }

            if (/.*\s*checkElementActiveWeb\s*\(.*/.test(linePrefix)) {

                const checkElementActiveWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                checkElementActiveWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                checkElementActiveWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                checkElementActiveWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(checkElementActiveWebBY_CRITERIACompletion);

                const checkElementActiveWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                checkElementActiveWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkElementActiveWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                checkElementActiveWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(checkElementActiveWebELEMENT_NAMECompletion);
            }

            if (/.*\s*checkElementAttributeEqualsWeb\s*\(.*/.test(linePrefix)) {

                const checkElementAttributeEqualsWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                checkElementAttributeEqualsWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                checkElementAttributeEqualsWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                checkElementAttributeEqualsWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(checkElementAttributeEqualsWebBY_CRITERIACompletion);

                const checkElementAttributeEqualsWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                checkElementAttributeEqualsWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkElementAttributeEqualsWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                checkElementAttributeEqualsWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(checkElementAttributeEqualsWebELEMENT_NAMECompletion);

                const checkElementAttributeEqualsWebTEXT_EQUALSCompletion = new vscode.CompletionItem('TEXT_EQUALS');
                checkElementAttributeEqualsWebTEXT_EQUALSCompletion.kind = vscode.CompletionItemKind.Field;
                checkElementAttributeEqualsWebTEXT_EQUALSCompletion.insertText = new vscode.SnippetString("TEXT_EQUALS = \"${1}\"");
                checkElementAttributeEqualsWebTEXT_EQUALSCompletion.documentation = new vscode.MarkdownString('Textueller Wert des Attribut-Wertes');
                items.push(checkElementAttributeEqualsWebTEXT_EQUALSCompletion);

                const checkElementAttributeEqualsWebATTRIBUTE_NAMECompletion = new vscode.CompletionItem('ATTRIBUTE_NAME');
                checkElementAttributeEqualsWebATTRIBUTE_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkElementAttributeEqualsWebATTRIBUTE_NAMECompletion.insertText = new vscode.SnippetString("ATTRIBUTE_NAME = \"${1}\"");
                checkElementAttributeEqualsWebATTRIBUTE_NAMECompletion.documentation = new vscode.MarkdownString('Name des zu \u00FCberpr\u00FCfenden Attributs');
                items.push(checkElementAttributeEqualsWebATTRIBUTE_NAMECompletion);

                const checkElementAttributeEqualsWebCONTAINSCompletion = new vscode.CompletionItem('CONTAINS');
                checkElementAttributeEqualsWebCONTAINSCompletion.kind = vscode.CompletionItemKind.Field;
                checkElementAttributeEqualsWebCONTAINSCompletion.insertText = new vscode.SnippetString("CONTAINS = \"${1}\"");
                checkElementAttributeEqualsWebCONTAINSCompletion.documentation = new vscode.MarkdownString('Wenn false, muss der gefundene Text dem TEXT_EQUALS w\u00F6rtlich entsprechen. Wenn true, muss der angegebene Text nur enthalten sein. Default: false.');
                items.push(checkElementAttributeEqualsWebCONTAINSCompletion);
            }

            if (/.*\s*checkElementCssEqualsWeb\s*\(.*/.test(linePrefix)) {

                const checkElementCssEqualsWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                checkElementCssEqualsWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                checkElementCssEqualsWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                checkElementCssEqualsWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(checkElementCssEqualsWebBY_CRITERIACompletion);

                const checkElementCssEqualsWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                checkElementCssEqualsWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkElementCssEqualsWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                checkElementCssEqualsWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(checkElementCssEqualsWebELEMENT_NAMECompletion);

                const checkElementCssEqualsWebTEXT_EQUALSCompletion = new vscode.CompletionItem('TEXT_EQUALS');
                checkElementCssEqualsWebTEXT_EQUALSCompletion.kind = vscode.CompletionItemKind.Field;
                checkElementCssEqualsWebTEXT_EQUALSCompletion.insertText = new vscode.SnippetString("TEXT_EQUALS = \"${1}\"");
                checkElementCssEqualsWebTEXT_EQUALSCompletion.documentation = new vscode.MarkdownString('Textueller Wert des Attribut-Wertes');
                items.push(checkElementCssEqualsWebTEXT_EQUALSCompletion);

                const checkElementCssEqualsWebCSS_ATTRIBUTE_NAMECompletion = new vscode.CompletionItem('CSS_ATTRIBUTE_NAME');
                checkElementCssEqualsWebCSS_ATTRIBUTE_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkElementCssEqualsWebCSS_ATTRIBUTE_NAMECompletion.insertText = new vscode.SnippetString("CSS_ATTRIBUTE_NAME = \"${1}\"");
                checkElementCssEqualsWebCSS_ATTRIBUTE_NAMECompletion.documentation = new vscode.MarkdownString('Name des zu \u00FCberpr\u00FCfenden Attributs');
                items.push(checkElementCssEqualsWebCSS_ATTRIBUTE_NAMECompletion);

                const checkElementCssEqualsWebCONTAINSCompletion = new vscode.CompletionItem('CONTAINS');
                checkElementCssEqualsWebCONTAINSCompletion.kind = vscode.CompletionItemKind.Field;
                checkElementCssEqualsWebCONTAINSCompletion.insertText = new vscode.SnippetString("CONTAINS = \"${1}\"");
                checkElementCssEqualsWebCONTAINSCompletion.documentation = new vscode.MarkdownString('Wenn false, muss der gefundene Text dem TEXT_EQUALS w\u00F6rtlich entsprechen. Wenn true, muss der angegebene Text nur enthalten sein. Default: false');
                items.push(checkElementCssEqualsWebCONTAINSCompletion);
            }

            if (/.*\s*checkElementEnabledWeb\s*\(.*/.test(linePrefix)) {

                const checkElementEnabledWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                checkElementEnabledWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                checkElementEnabledWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                checkElementEnabledWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(checkElementEnabledWebBY_CRITERIACompletion);

                const checkElementEnabledWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                checkElementEnabledWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkElementEnabledWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                checkElementEnabledWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(checkElementEnabledWebELEMENT_NAMECompletion);
            }

            if (/.*\s*checkElementNotPresent\s*\(.*/.test(linePrefix)) {

                const checkElementNotPresentBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                checkElementNotPresentBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                checkElementNotPresentBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                checkElementNotPresentBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(checkElementNotPresentBY_CRITERIACompletion);

                const checkElementNotPresentELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                checkElementNotPresentELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkElementNotPresentELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                checkElementNotPresentELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(checkElementNotPresentELEMENT_NAMECompletion);
            }

            if (/.*\s*checkElementNotPresentWeb\s*\(.*/.test(linePrefix)) {

                const checkElementNotPresentWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                checkElementNotPresentWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                checkElementNotPresentWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                checkElementNotPresentWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(checkElementNotPresentWebBY_CRITERIACompletion);

                const checkElementNotPresentWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                checkElementNotPresentWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkElementNotPresentWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                checkElementNotPresentWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(checkElementNotPresentWebELEMENT_NAMECompletion);
            }

            if (/.*\s*checkElementPresent\s*\(.*/.test(linePrefix)) {

                const checkElementPresentBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                checkElementPresentBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                checkElementPresentBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                checkElementPresentBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(checkElementPresentBY_CRITERIACompletion);

                const checkElementPresentELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                checkElementPresentELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkElementPresentELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                checkElementPresentELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(checkElementPresentELEMENT_NAMECompletion);
            }

            if (/.*\s*checkElementPresentWeb\s*\(.*/.test(linePrefix)) {

                const checkElementPresentWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                checkElementPresentWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                checkElementPresentWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                checkElementPresentWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(checkElementPresentWebBY_CRITERIACompletion);

                const checkElementPresentWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                checkElementPresentWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkElementPresentWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                checkElementPresentWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(checkElementPresentWebELEMENT_NAMECompletion);
            }

            if (/.*\s*checkElementSelectedWeb\s*\(.*/.test(linePrefix)) {

                const checkElementSelectedWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                checkElementSelectedWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                checkElementSelectedWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                checkElementSelectedWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(checkElementSelectedWebBY_CRITERIACompletion);

                const checkElementSelectedWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                checkElementSelectedWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkElementSelectedWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                checkElementSelectedWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(checkElementSelectedWebELEMENT_NAMECompletion);

                const checkElementSelectedWebCHECK_SELECTEDCompletion = new vscode.CompletionItem('CHECK_SELECTED');
                checkElementSelectedWebCHECK_SELECTEDCompletion.kind = vscode.CompletionItemKind.Field;
                checkElementSelectedWebCHECK_SELECTEDCompletion.insertText = new vscode.SnippetString("CHECK_SELECTED = \"${1}\"");
                checkElementSelectedWebCHECK_SELECTEDCompletion.documentation = new vscode.MarkdownString('Wenn false, wird gepr\u00FCft, ob das Element nicht ausgew\u00E4hlt wurde. Wenn true, wird gepr\u00FCft, ob das Element ausgew\u00E4hlt wurde (Default: true)');
                items.push(checkElementSelectedWebCHECK_SELECTEDCompletion);
            }

            if (/.*\s*checkElementTextEqualsWeb\s*\(.*/.test(linePrefix)) {

                const checkElementTextEqualsWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                checkElementTextEqualsWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                checkElementTextEqualsWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                checkElementTextEqualsWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(checkElementTextEqualsWebBY_CRITERIACompletion);

                const checkElementTextEqualsWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                checkElementTextEqualsWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkElementTextEqualsWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                checkElementTextEqualsWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(checkElementTextEqualsWebELEMENT_NAMECompletion);

                const checkElementTextEqualsWebTEXT_EQUALSCompletion = new vscode.CompletionItem('TEXT_EQUALS');
                checkElementTextEqualsWebTEXT_EQUALSCompletion.kind = vscode.CompletionItemKind.Field;
                checkElementTextEqualsWebTEXT_EQUALSCompletion.insertText = new vscode.SnippetString("TEXT_EQUALS = \"${1}\"");
                checkElementTextEqualsWebTEXT_EQUALSCompletion.documentation = new vscode.MarkdownString('Text, der enthalten sein soll.');
                items.push(checkElementTextEqualsWebTEXT_EQUALSCompletion);

                const checkElementTextEqualsWebCASE_SENSITIVECompletion = new vscode.CompletionItem('CASE_SENSITIVE');
                checkElementTextEqualsWebCASE_SENSITIVECompletion.kind = vscode.CompletionItemKind.Field;
                checkElementTextEqualsWebCASE_SENSITIVECompletion.insertText = new vscode.SnippetString("CASE_SENSITIVE = \"${1}\"");
                checkElementTextEqualsWebCASE_SENSITIVECompletion.documentation = new vscode.MarkdownString('{true, false} Gibt an, ob auch auf Gro\u00DF- und Kleinschreibung geachtet werden soll bei der \u00DCberpr\u00FCfung. Default: false.');
                items.push(checkElementTextEqualsWebCASE_SENSITIVECompletion);

                const checkElementTextEqualsWebCONTAINSCompletion = new vscode.CompletionItem('CONTAINS');
                checkElementTextEqualsWebCONTAINSCompletion.kind = vscode.CompletionItemKind.Field;
                checkElementTextEqualsWebCONTAINSCompletion.insertText = new vscode.SnippetString("CONTAINS = \"${1}\"");
                checkElementTextEqualsWebCONTAINSCompletion.documentation = new vscode.MarkdownString('{true, false} Gibt an, ob gezielt nach dem Wert gesucht werden soll (true) oder ob es enthalten sein soll (false)). Default: false.');
                items.push(checkElementTextEqualsWebCONTAINSCompletion);
            }

            if (/.*\s*checkElementVisibleWeb\s*\(.*/.test(linePrefix)) {

                const checkElementVisibleWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                checkElementVisibleWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                checkElementVisibleWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                checkElementVisibleWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(checkElementVisibleWebBY_CRITERIACompletion);

                const checkElementVisibleWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                checkElementVisibleWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkElementVisibleWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                checkElementVisibleWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(checkElementVisibleWebELEMENT_NAMECompletion);
            }

            if (/.*\s*checkFileContent\s*\(.*/.test(linePrefix)) {

                const checkFileContentFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                checkFileContentFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkFileContentFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                checkFileContentFILENAMECompletion.documentation = new vscode.MarkdownString('Name der zu durchsuchenden Datei');
                items.push(checkFileContentFILENAMECompletion);

                const checkFileContentTEXT_EQUALSCompletion = new vscode.CompletionItem('TEXT_EQUALS');
                checkFileContentTEXT_EQUALSCompletion.kind = vscode.CompletionItemKind.Field;
                checkFileContentTEXT_EQUALSCompletion.insertText = new vscode.SnippetString("TEXT_EQUALS = \"${1}\"");
                checkFileContentTEXT_EQUALSCompletion.documentation = new vscode.MarkdownString('In der Datei zu findender Text');
                items.push(checkFileContentTEXT_EQUALSCompletion);

                const checkFileContentWAIT_MILLISECONDSCompletion = new vscode.CompletionItem('WAIT_MILLISECONDS');
                checkFileContentWAIT_MILLISECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                checkFileContentWAIT_MILLISECONDSCompletion.insertText = new vscode.SnippetString("WAIT_MILLISECONDS = \"${1}\"");
                checkFileContentWAIT_MILLISECONDSCompletion.documentation = new vscode.MarkdownString('F\u00FCr so viele Millisekunden werden im Nachgang noch neue Daten verarbeitet');
                items.push(checkFileContentWAIT_MILLISECONDSCompletion);
            }

            if (/.*\s*checkFileExists\s*\(.*/.test(linePrefix)) {

                const checkFileExistsFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                checkFileExistsFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkFileExistsFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                checkFileExistsFILENAMECompletion.documentation = new vscode.MarkdownString('Name der zu suchenden Datei');
                items.push(checkFileExistsFILENAMECompletion);

                const checkFileExistsTRIESCompletion = new vscode.CompletionItem('TRIES');
                checkFileExistsTRIESCompletion.kind = vscode.CompletionItemKind.Field;
                checkFileExistsTRIESCompletion.insertText = new vscode.SnippetString("TRIES = \"${1}\"");
                checkFileExistsTRIESCompletion.documentation = new vscode.MarkdownString('Anzahl Versuche (ganzahlig), die nach der Datei gesucht werden soll.');
                items.push(checkFileExistsTRIESCompletion);

                const checkFileExistsWAIT_MILLISECONDS_BETWEEN_TRIESCompletion = new vscode.CompletionItem('WAIT_MILLISECONDS_BETWEEN_TRIES');
                checkFileExistsWAIT_MILLISECONDS_BETWEEN_TRIESCompletion.kind = vscode.CompletionItemKind.Field;
                checkFileExistsWAIT_MILLISECONDS_BETWEEN_TRIESCompletion.insertText = new vscode.SnippetString("WAIT_MILLISECONDS_BETWEEN_TRIES = \"${1}\"");
                checkFileExistsWAIT_MILLISECONDS_BETWEEN_TRIESCompletion.documentation = new vscode.MarkdownString('Wartezeit, nachdem die Datei nicht gefunden wurde in Millisekunden.');
                items.push(checkFileExistsWAIT_MILLISECONDS_BETWEEN_TRIESCompletion);
            }

            if (/.*\s*checkIfFileExists\s*\(.*/.test(linePrefix)) {

                const checkIfFileExistsFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                checkIfFileExistsFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkIfFileExistsFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                checkIfFileExistsFILENAMECompletion.documentation = new vscode.MarkdownString('Vollst\u00E4ndiger Dateipfad.');
                items.push(checkIfFileExistsFILENAMECompletion);

                const checkIfFileExistsMIN_SIZE_BYTESCompletion = new vscode.CompletionItem('MIN_SIZE_BYTES');
                checkIfFileExistsMIN_SIZE_BYTESCompletion.kind = vscode.CompletionItemKind.Field;
                checkIfFileExistsMIN_SIZE_BYTESCompletion.insertText = new vscode.SnippetString("MIN_SIZE_BYTES = \"${1}\"");
                checkIfFileExistsMIN_SIZE_BYTESCompletion.documentation = new vscode.MarkdownString('Minimale Dateigr\u00F6\u00DFe in Bytes, die gepr\u00FCft werden soll');
                items.push(checkIfFileExistsMIN_SIZE_BYTESCompletion);
            }

            if (/.*\s*checkIfStorageVariableIsSet\s*\(.*/.test(linePrefix)) {

                const checkIfStorageVariableIsSetSTORAGE_VARIABLECompletion = new vscode.CompletionItem('STORAGE_VARIABLE');
                checkIfStorageVariableIsSetSTORAGE_VARIABLECompletion.kind = vscode.CompletionItemKind.Field;
                checkIfStorageVariableIsSetSTORAGE_VARIABLECompletion.insertText = new vscode.SnippetString("STORAGE_VARIABLE = \"${1}\"");
                checkIfStorageVariableIsSetSTORAGE_VARIABLECompletion.documentation = new vscode.MarkdownString('Die zu \u00FCberpr\u00FCfende Storage Variable');
                items.push(checkIfStorageVariableIsSetSTORAGE_VARIABLECompletion);

                const checkIfStorageVariableIsSetIS_EMPTYCompletion = new vscode.CompletionItem('IS_EMPTY');
                checkIfStorageVariableIsSetIS_EMPTYCompletion.kind = vscode.CompletionItemKind.Field;
                checkIfStorageVariableIsSetIS_EMPTYCompletion.insertText = new vscode.SnippetString("IS_EMPTY = \"${1}\"");
                checkIfStorageVariableIsSetIS_EMPTYCompletion.documentation = new vscode.MarkdownString('Falls true, dann \u00FCberpr\u00FCfe ob die Storage Variable leer ist.');
                items.push(checkIfStorageVariableIsSetIS_EMPTYCompletion);
            }

            if (/.*\s*checkIfWindowExists\s*\(.*/.test(linePrefix)) {

                const checkIfWindowExistsWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                checkIfWindowExistsWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkIfWindowExistsWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                checkIfWindowExistsWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(checkIfWindowExistsWINDOW_NAMECompletion);

                const checkIfWindowExistsMATCH_MODECompletion = new vscode.CompletionItem('MATCH_MODE');
                checkIfWindowExistsMATCH_MODECompletion.kind = vscode.CompletionItemKind.Field;
                checkIfWindowExistsMATCH_MODECompletion.insertText = new vscode.SnippetString("MATCH_MODE = \"${1}\"");
                checkIfWindowExistsMATCH_MODECompletion.documentation = new vscode.MarkdownString('M\u00F6gliche Werte sind eine der folgenden Ziffern oder das Wort \'RegEx\':\n       1 = Der Titel eines Fensters muss mit dem angegebenen WINDOW_NAME beginnen, um eine \u00DCbereinstimmung zu erzielen.\n       2 = Der Titel eines Fensters kann WINDOW_NAME an beliebiger Stelle enthalten, um eine \u00DCbereinstimmung zu erzielen.\n       3 = Der Titel eines Fensters muss genau mit WINDOW_NAME \u00FCbereinstimmen, um eine \u00DCbereinstimmung zu erzielen.\n       RegEx = WINDOW_NAME wird als regul\u00E4rer Ausdruck behandelt.');
                items.push(checkIfWindowExistsMATCH_MODECompletion);
            }

            if (/.*\s*checkRadioButtonIsSelectableWinEle\s*\(.*/.test(linePrefix)) {

                const checkRadioButtonIsSelectableWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                checkRadioButtonIsSelectableWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkRadioButtonIsSelectableWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                checkRadioButtonIsSelectableWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(checkRadioButtonIsSelectableWinEleWINDOW_NAMECompletion);

                const checkRadioButtonIsSelectableWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                checkRadioButtonIsSelectableWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkRadioButtonIsSelectableWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                checkRadioButtonIsSelectableWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(checkRadioButtonIsSelectableWinElePROCESS_NAMECompletion);

                const checkRadioButtonIsSelectableWinEleRADIO_BUTTON_NAMECompletion = new vscode.CompletionItem('RADIO_BUTTON_NAME');
                checkRadioButtonIsSelectableWinEleRADIO_BUTTON_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkRadioButtonIsSelectableWinEleRADIO_BUTTON_NAMECompletion.insertText = new vscode.SnippetString("RADIO_BUTTON_NAME = \"${1}\"");
                checkRadioButtonIsSelectableWinEleRADIO_BUTTON_NAMECompletion.documentation = new vscode.MarkdownString('Name des Radio-Buttons, der gesteuert werden soll. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen zu ermitteln.');
                items.push(checkRadioButtonIsSelectableWinEleRADIO_BUTTON_NAMECompletion);

                const checkRadioButtonIsSelectableWinEleSHOULD_BECompletion = new vscode.CompletionItem('SHOULD_BE');
                checkRadioButtonIsSelectableWinEleSHOULD_BECompletion.kind = vscode.CompletionItemKind.Field;
                checkRadioButtonIsSelectableWinEleSHOULD_BECompletion.insertText = new vscode.SnippetString("SHOULD_BE = \"${1}\"");
                checkRadioButtonIsSelectableWinEleSHOULD_BECompletion.documentation = new vscode.MarkdownString('Eigenschaft, die das Element haben sollte. Es sind die Werte \'true\' oder \'false\' m\u00F6glich.');
                items.push(checkRadioButtonIsSelectableWinEleSHOULD_BECompletion);

                const checkRadioButtonIsSelectableWinEleRADIO_BUTTON_INDEXCompletion = new vscode.CompletionItem('RADIO_BUTTON_INDEX');
                checkRadioButtonIsSelectableWinEleRADIO_BUTTON_INDEXCompletion.kind = vscode.CompletionItemKind.Field;
                checkRadioButtonIsSelectableWinEleRADIO_BUTTON_INDEXCompletion.insertText = new vscode.SnippetString("RADIO_BUTTON_INDEX = \"${1}\"");
                checkRadioButtonIsSelectableWinEleRADIO_BUTTON_INDEXCompletion.documentation = new vscode.MarkdownString('Alternativ zum Namen kann ein Index angegeben werden, der sich auf alle Radiobuttons des Fensers bezieht.');
                items.push(checkRadioButtonIsSelectableWinEleRADIO_BUTTON_INDEXCompletion);
            }

            if (/.*\s*checkRadioButtonIsSelectedWinEle\s*\(.*/.test(linePrefix)) {

                const checkRadioButtonIsSelectedWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                checkRadioButtonIsSelectedWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkRadioButtonIsSelectedWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                checkRadioButtonIsSelectedWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(checkRadioButtonIsSelectedWinEleWINDOW_NAMECompletion);

                const checkRadioButtonIsSelectedWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                checkRadioButtonIsSelectedWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkRadioButtonIsSelectedWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                checkRadioButtonIsSelectedWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(checkRadioButtonIsSelectedWinElePROCESS_NAMECompletion);

                const checkRadioButtonIsSelectedWinEleRADIO_BUTTON_NAMECompletion = new vscode.CompletionItem('RADIO_BUTTON_NAME');
                checkRadioButtonIsSelectedWinEleRADIO_BUTTON_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkRadioButtonIsSelectedWinEleRADIO_BUTTON_NAMECompletion.insertText = new vscode.SnippetString("RADIO_BUTTON_NAME = \"${1}\"");
                checkRadioButtonIsSelectedWinEleRADIO_BUTTON_NAMECompletion.documentation = new vscode.MarkdownString('Name des Radio-Buttons, der gesteuert werden soll. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen zu ermitteln.');
                items.push(checkRadioButtonIsSelectedWinEleRADIO_BUTTON_NAMECompletion);

                const checkRadioButtonIsSelectedWinEleSHOULD_BECompletion = new vscode.CompletionItem('SHOULD_BE');
                checkRadioButtonIsSelectedWinEleSHOULD_BECompletion.kind = vscode.CompletionItemKind.Field;
                checkRadioButtonIsSelectedWinEleSHOULD_BECompletion.insertText = new vscode.SnippetString("SHOULD_BE = \"${1}\"");
                checkRadioButtonIsSelectedWinEleSHOULD_BECompletion.documentation = new vscode.MarkdownString('Status, den der RadioButton haben sollte. Entweder true oder false.');
                items.push(checkRadioButtonIsSelectedWinEleSHOULD_BECompletion);

                const checkRadioButtonIsSelectedWinEleRADIO_BUTTON_INDEXCompletion = new vscode.CompletionItem('RADIO_BUTTON_INDEX');
                checkRadioButtonIsSelectedWinEleRADIO_BUTTON_INDEXCompletion.kind = vscode.CompletionItemKind.Field;
                checkRadioButtonIsSelectedWinEleRADIO_BUTTON_INDEXCompletion.insertText = new vscode.SnippetString("RADIO_BUTTON_INDEX = \"${1}\"");
                checkRadioButtonIsSelectedWinEleRADIO_BUTTON_INDEXCompletion.documentation = new vscode.MarkdownString('Alternativ zum Namen kann ein Index angegeben werden, der sich auf alle Radiobuttons des Fensers bezieht.');
                items.push(checkRadioButtonIsSelectedWinEleRADIO_BUTTON_INDEXCompletion);
            }

            if (/.*\s*checkRadioButtonWinEle\s*\(.*/.test(linePrefix)) {

                const checkRadioButtonWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                checkRadioButtonWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkRadioButtonWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                checkRadioButtonWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(checkRadioButtonWinEleWINDOW_NAMECompletion);

                const checkRadioButtonWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                checkRadioButtonWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkRadioButtonWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                checkRadioButtonWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(checkRadioButtonWinElePROCESS_NAMECompletion);

                const checkRadioButtonWinEleRADIO_BUTTON_NAMECompletion = new vscode.CompletionItem('RADIO_BUTTON_NAME');
                checkRadioButtonWinEleRADIO_BUTTON_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkRadioButtonWinEleRADIO_BUTTON_NAMECompletion.insertText = new vscode.SnippetString("RADIO_BUTTON_NAME = \"${1}\"");
                checkRadioButtonWinEleRADIO_BUTTON_NAMECompletion.documentation = new vscode.MarkdownString('Name des Radio-Buttons, der gesteuert werden soll. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen zu ermitteln.');
                items.push(checkRadioButtonWinEleRADIO_BUTTON_NAMECompletion);

                const checkRadioButtonWinEleRADIO_BUTTON_INDEXCompletion = new vscode.CompletionItem('RADIO_BUTTON_INDEX');
                checkRadioButtonWinEleRADIO_BUTTON_INDEXCompletion.kind = vscode.CompletionItemKind.Field;
                checkRadioButtonWinEleRADIO_BUTTON_INDEXCompletion.insertText = new vscode.SnippetString("RADIO_BUTTON_INDEX = \"${1}\"");
                checkRadioButtonWinEleRADIO_BUTTON_INDEXCompletion.documentation = new vscode.MarkdownString('Alternativ zum Namen kann ein Index angegeben werden, der sich auf alle Radiobuttons des Fensers bezieht.');
                items.push(checkRadioButtonWinEleRADIO_BUTTON_INDEXCompletion);
            }

            if (/.*\s*checkResultByImageCP\s*\(.*/.test(linePrefix)) {

                const checkResultByImageCPIMAGE_PATHCompletion = new vscode.CompletionItem('IMAGE_PATH');
                checkResultByImageCPIMAGE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                checkResultByImageCPIMAGE_PATHCompletion.insertText = new vscode.SnippetString("IMAGE_PATH = \"${1}\"");
                checkResultByImageCPIMAGE_PATHCompletion.documentation = new vscode.MarkdownString('Gibt den Pfad zu dem Bild relativ zu der Testset-Datei an.');
                items.push(checkResultByImageCPIMAGE_PATHCompletion);

                const checkResultByImageCPBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                checkResultByImageCPBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                checkResultByImageCPBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                checkResultByImageCPBASEDIRCompletion.documentation = new vscode.MarkdownString('Gibt das Basisverzeichnis an.');
                items.push(checkResultByImageCPBASEDIRCompletion);
            }

            if (/.*\s*checkResultByImageWin\s*\(.*/.test(linePrefix)) {

                const checkResultByImageWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                checkResultByImageWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkResultByImageWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                checkResultByImageWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(checkResultByImageWinWINDOW_NAMECompletion);

                const checkResultByImageWinIMAGE_RELATIVE_PATHCompletion = new vscode.CompletionItem('IMAGE_RELATIVE_PATH');
                checkResultByImageWinIMAGE_RELATIVE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                checkResultByImageWinIMAGE_RELATIVE_PATHCompletion.insertText = new vscode.SnippetString("IMAGE_RELATIVE_PATH = \"${1}\"");
                checkResultByImageWinIMAGE_RELATIVE_PATHCompletion.documentation = new vscode.MarkdownString('Pfad zum Bild ');
                items.push(checkResultByImageWinIMAGE_RELATIVE_PATHCompletion);

                const checkResultByImageWinBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                checkResultByImageWinBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                checkResultByImageWinBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                checkResultByImageWinBASEDIRCompletion.documentation = new vscode.MarkdownString('Angabe des Basisverzeichnisses');
                items.push(checkResultByImageWinBASEDIRCompletion);
            }

            if (/.*\s*checkResultByTextWin\s*\(.*/.test(linePrefix)) {

                const checkResultByTextWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                checkResultByTextWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkResultByTextWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                checkResultByTextWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(checkResultByTextWinWINDOW_NAMECompletion);

                const checkResultByTextWinTEXT_EQUALSCompletion = new vscode.CompletionItem('TEXT_EQUALS');
                checkResultByTextWinTEXT_EQUALSCompletion.kind = vscode.CompletionItemKind.Field;
                checkResultByTextWinTEXT_EQUALSCompletion.insertText = new vscode.SnippetString("TEXT_EQUALS = \"${1}\"");
                checkResultByTextWinTEXT_EQUALSCompletion.documentation = new vscode.MarkdownString('Text, der gefunden werden muss.');
                items.push(checkResultByTextWinTEXT_EQUALSCompletion);
            }

            if (/.*\s*checkResultWeb\s*\(.*/.test(linePrefix)) {

                const checkResultWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                checkResultWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                checkResultWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                checkResultWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default: xpath.');
                items.push(checkResultWebBY_CRITERIACompletion);

                const checkResultWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                checkResultWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkResultWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                checkResultWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig von BY_CRITERIA');
                items.push(checkResultWebELEMENT_NAMECompletion);

                const checkResultWebTEXT_EQUALSCompletion = new vscode.CompletionItem('TEXT_EQUALS');
                checkResultWebTEXT_EQUALSCompletion.kind = vscode.CompletionItemKind.Field;
                checkResultWebTEXT_EQUALSCompletion.insertText = new vscode.SnippetString("TEXT_EQUALS = \"${1}\"");
                checkResultWebTEXT_EQUALSCompletion.documentation = new vscode.MarkdownString('Zu findender Text.');
                items.push(checkResultWebTEXT_EQUALSCompletion);

                const checkResultWebSEARCH_SUBSTRINGCompletion = new vscode.CompletionItem('SEARCH_SUBSTRING');
                checkResultWebSEARCH_SUBSTRINGCompletion.kind = vscode.CompletionItemKind.Field;
                checkResultWebSEARCH_SUBSTRINGCompletion.insertText = new vscode.SnippetString("SEARCH_SUBSTRING = \"${1}\"");
                checkResultWebSEARCH_SUBSTRINGCompletion.documentation = new vscode.MarkdownString('Wenn true, wird festgelegt, dass nur nach einem Teil-String im zu durchsuchenden Element gesucht werden soll.       Beim Default-Wert \'false\', muss hingegegen der komplette Text \u00FCbereinstimmen.');
                items.push(checkResultWebSEARCH_SUBSTRINGCompletion);
            }

            if (/.*\s*checkTextOnCitrixTextField\s*\(.*/.test(linePrefix)) {

                const checkTextOnCitrixTextFieldWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                checkTextOnCitrixTextFieldWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkTextOnCitrixTextFieldWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                checkTextOnCitrixTextFieldWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(checkTextOnCitrixTextFieldWINDOW_NAMECompletion);

                const checkTextOnCitrixTextFieldIMAGE_RELATIVE_PATHCompletion = new vscode.CompletionItem('IMAGE_RELATIVE_PATH');
                checkTextOnCitrixTextFieldIMAGE_RELATIVE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                checkTextOnCitrixTextFieldIMAGE_RELATIVE_PATHCompletion.insertText = new vscode.SnippetString("IMAGE_RELATIVE_PATH = \"${1}\"");
                checkTextOnCitrixTextFieldIMAGE_RELATIVE_PATHCompletion.documentation = new vscode.MarkdownString('Relativer Pfad zum Bild des Textfeldes, das gefunden werden soll.');
                items.push(checkTextOnCitrixTextFieldIMAGE_RELATIVE_PATHCompletion);

                const checkTextOnCitrixTextFieldTEXT_EQUALSCompletion = new vscode.CompletionItem('TEXT_EQUALS');
                checkTextOnCitrixTextFieldTEXT_EQUALSCompletion.kind = vscode.CompletionItemKind.Field;
                checkTextOnCitrixTextFieldTEXT_EQUALSCompletion.insertText = new vscode.SnippetString("TEXT_EQUALS = \"${1}\"");
                checkTextOnCitrixTextFieldTEXT_EQUALSCompletion.documentation = new vscode.MarkdownString('Zu \u00DCberpr\u00FCfender Text.');
                items.push(checkTextOnCitrixTextFieldTEXT_EQUALSCompletion);

                const checkTextOnCitrixTextFieldX_ORIENTATION_TO_CLICKCompletion = new vscode.CompletionItem('X_ORIENTATION_TO_CLICK');
                checkTextOnCitrixTextFieldX_ORIENTATION_TO_CLICKCompletion.kind = vscode.CompletionItemKind.Field;
                checkTextOnCitrixTextFieldX_ORIENTATION_TO_CLICKCompletion.insertText = new vscode.SnippetString("X_ORIENTATION_TO_CLICK = \"${1}\"");
                checkTextOnCitrixTextFieldX_ORIENTATION_TO_CLICKCompletion.documentation = new vscode.MarkdownString('Verschiebung zum eigentlichen Textfeld, da in der Regel die Beschriftung des Textfeldes als Bild angegeben werden wird.');
                items.push(checkTextOnCitrixTextFieldX_ORIENTATION_TO_CLICKCompletion);
            }

            if (/.*\s*checkTextboxReadOnlyFocussedWinEle\s*\(.*/.test(linePrefix)) {

                const checkTextboxReadOnlyFocussedWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                checkTextboxReadOnlyFocussedWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkTextboxReadOnlyFocussedWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                checkTextboxReadOnlyFocussedWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(checkTextboxReadOnlyFocussedWinEleWINDOW_NAMECompletion);

                const checkTextboxReadOnlyFocussedWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                checkTextboxReadOnlyFocussedWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                checkTextboxReadOnlyFocussedWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                checkTextboxReadOnlyFocussedWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(checkTextboxReadOnlyFocussedWinElePROCESS_NAMECompletion);

                const checkTextboxReadOnlyFocussedWinEleSHOULD_BECompletion = new vscode.CompletionItem('SHOULD_BE');
                checkTextboxReadOnlyFocussedWinEleSHOULD_BECompletion.kind = vscode.CompletionItemKind.Field;
                checkTextboxReadOnlyFocussedWinEleSHOULD_BECompletion.insertText = new vscode.SnippetString("SHOULD_BE = \"${1}\"");
                checkTextboxReadOnlyFocussedWinEleSHOULD_BECompletion.documentation = new vscode.MarkdownString('Eigenschaft, die das Element haben sollte. Es sind die Werte \'true\' oder \'false\' m\u00F6glich.');
                items.push(checkTextboxReadOnlyFocussedWinEleSHOULD_BECompletion);
            }

            if (/.*\s*clearFullscreenImageRenderer\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*clearOverlayImageRenderer\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*clearStorage\s*\(.*/.test(linePrefix)) {

                const clearStorageKEYS_TO_KEEPCompletion = new vscode.CompletionItem('KEYS_TO_KEEP');
                clearStorageKEYS_TO_KEEPCompletion.kind = vscode.CompletionItemKind.Field;
                clearStorageKEYS_TO_KEEPCompletion.insertText = new vscode.SnippetString("KEYS_TO_KEEP = \"${1}\"");
                clearStorageKEYS_TO_KEEPCompletion.documentation = new vscode.MarkdownString('Optionale komma-separierte Liste von Schl\u00FCsseln, deren zugeh\u00F6rige Eintr\u00E4ge nicht gel\u00F6scht werden sollen.');
                items.push(clearStorageKEYS_TO_KEEPCompletion);
            }

            if (/.*\s*clearStorageValue\s*\(.*/.test(linePrefix)) {

                const clearStorageValueTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                clearStorageValueTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                clearStorageValueTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                clearStorageValueTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Zu l\u00F6schender Schl\u00FCssel');
                items.push(clearStorageValueTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*clearTextRenderer\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*clearTextWeb\s*\(.*/.test(linePrefix)) {

                const clearTextWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                clearTextWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                clearTextWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                clearTextWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(clearTextWebBY_CRITERIACompletion);

                const clearTextWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                clearTextWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clearTextWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                clearTextWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des zu leerenden Elements, abh\u00E4ngig vom Kriterium.');
                items.push(clearTextWebELEMENT_NAMECompletion);
            }

            if (/.*\s*clickButtonAutomIdWinEle\s*\(.*/.test(linePrefix)) {

                const clickButtonAutomIdWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                clickButtonAutomIdWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickButtonAutomIdWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                clickButtonAutomIdWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(clickButtonAutomIdWinEleWINDOW_NAMECompletion);

                const clickButtonAutomIdWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                clickButtonAutomIdWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickButtonAutomIdWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                clickButtonAutomIdWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(clickButtonAutomIdWinElePROCESS_NAMECompletion);

                const clickButtonAutomIdWinEleBUTTON_AUTOMATION_IDCompletion = new vscode.CompletionItem('BUTTON_AUTOMATION_ID');
                clickButtonAutomIdWinEleBUTTON_AUTOMATION_IDCompletion.kind = vscode.CompletionItemKind.Field;
                clickButtonAutomIdWinEleBUTTON_AUTOMATION_IDCompletion.insertText = new vscode.SnippetString("BUTTON_AUTOMATION_ID = \"${1}\"");
                clickButtonAutomIdWinEleBUTTON_AUTOMATION_IDCompletion.documentation = new vscode.MarkdownString('Automation-ID des Buttons, der gesteuert werden soll. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diese zu ermitteln.');
                items.push(clickButtonAutomIdWinEleBUTTON_AUTOMATION_IDCompletion);
            }

            if (/.*\s*clickButtonWinEle\s*\(.*/.test(linePrefix)) {

                const clickButtonWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                clickButtonWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickButtonWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                clickButtonWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(clickButtonWinEleWINDOW_NAMECompletion);

                const clickButtonWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                clickButtonWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickButtonWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                clickButtonWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(clickButtonWinElePROCESS_NAMECompletion);

                const clickButtonWinEleBUTTON_NAMECompletion = new vscode.CompletionItem('BUTTON_NAME');
                clickButtonWinEleBUTTON_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickButtonWinEleBUTTON_NAMECompletion.insertText = new vscode.SnippetString("BUTTON_NAME = \"${1}\"");
                clickButtonWinEleBUTTON_NAMECompletion.documentation = new vscode.MarkdownString('Name des Buttons, der gesteuert werden soll. Dieser ist h\u00E4ufig identisch mit seinem Text (z.B. \'OK\'). Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen Namen zu ermitteln.');
                items.push(clickButtonWinEleBUTTON_NAMECompletion);
            }

            if (/.*\s*clickByIdWeb\s*\(.*/.test(linePrefix)) {

                const clickByIdWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                clickByIdWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickByIdWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                clickByIdWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Inhalt der id');
                items.push(clickByIdWebELEMENT_NAMECompletion);

                const clickByIdWebMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                clickByIdWebMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                clickByIdWebMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                clickByIdWebMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('{right, left} Gibt an, ob es sich um einen Links- oder Rechtsklick handelt. Default ist links');
                items.push(clickByIdWebMOUSE_BUTTONCompletion);
            }

            if (/.*\s*clickByTextJava\s*\(.*/.test(linePrefix)) {

                const clickByTextJavaTARGETCompletion = new vscode.CompletionItem('TARGET');
                clickByTextJavaTARGETCompletion.kind = vscode.CompletionItemKind.Field;
                clickByTextJavaTARGETCompletion.insertText = new vscode.SnippetString("TARGET = \"${1}\"");
                clickByTextJavaTARGETCompletion.documentation = new vscode.MarkdownString('Ziel');
                items.push(clickByTextJavaTARGETCompletion);

                const clickByTextJavaIS_DOUBLE_CLICKCompletion = new vscode.CompletionItem('IS_DOUBLE_CLICK');
                clickByTextJavaIS_DOUBLE_CLICKCompletion.kind = vscode.CompletionItemKind.Field;
                clickByTextJavaIS_DOUBLE_CLICKCompletion.insertText = new vscode.SnippetString("IS_DOUBLE_CLICK = \"${1}\"");
                clickByTextJavaIS_DOUBLE_CLICKCompletion.documentation = new vscode.MarkdownString('Gibt an, ob ein Doppelklick get\u00E4tigt werden soll.');
                items.push(clickByTextJavaIS_DOUBLE_CLICKCompletion);

                const clickByTextJavaIS_RIGHT_CLICKCompletion = new vscode.CompletionItem('IS_RIGHT_CLICK');
                clickByTextJavaIS_RIGHT_CLICKCompletion.kind = vscode.CompletionItemKind.Field;
                clickByTextJavaIS_RIGHT_CLICKCompletion.insertText = new vscode.SnippetString("IS_RIGHT_CLICK = \"${1}\"");
                clickByTextJavaIS_RIGHT_CLICKCompletion.documentation = new vscode.MarkdownString('Gibt an, ob die rechte Maustaste, anstatt der linken verwendet werden soll.');
                items.push(clickByTextJavaIS_RIGHT_CLICKCompletion);

                const clickByTextJavaCHECK_CONTAINSCompletion = new vscode.CompletionItem('CHECK_CONTAINS');
                clickByTextJavaCHECK_CONTAINSCompletion.kind = vscode.CompletionItemKind.Field;
                clickByTextJavaCHECK_CONTAINSCompletion.insertText = new vscode.SnippetString("CHECK_CONTAINS = \"${1}\"");
                clickByTextJavaCHECK_CONTAINSCompletion.documentation = new vscode.MarkdownString('True, falls eine Zeichenreihenfolge eine Teilzeichenfolge enth\u00E4lt');
                items.push(clickByTextJavaCHECK_CONTAINSCompletion);

                const clickByTextJavaWAIT_MILLISCompletion = new vscode.CompletionItem('WAIT_MILLIS');
                clickByTextJavaWAIT_MILLISCompletion.kind = vscode.CompletionItemKind.Field;
                clickByTextJavaWAIT_MILLISCompletion.insertText = new vscode.SnippetString("WAIT_MILLIS = \"${1}\"");
                clickByTextJavaWAIT_MILLISCompletion.documentation = new vscode.MarkdownString('Optionale Anzahl zu wartender Millisekunden bis das Element verf\u00FCgbar ist. Default 10000.');
                items.push(clickByTextJavaWAIT_MILLISCompletion);

                const clickByTextJavaX_OFFSETCompletion = new vscode.CompletionItem('X_OFFSET');
                clickByTextJavaX_OFFSETCompletion.kind = vscode.CompletionItemKind.Field;
                clickByTextJavaX_OFFSETCompletion.insertText = new vscode.SnippetString("X_OFFSET = \"${1}\"");
                clickByTextJavaX_OFFSETCompletion.documentation = new vscode.MarkdownString('Offset vom Mittelpunkt des Bildes nach rechts (positiv) oder links (negativ)');
                items.push(clickByTextJavaX_OFFSETCompletion);

                const clickByTextJavaY_OFFSETCompletion = new vscode.CompletionItem('Y_OFFSET');
                clickByTextJavaY_OFFSETCompletion.kind = vscode.CompletionItemKind.Field;
                clickByTextJavaY_OFFSETCompletion.insertText = new vscode.SnippetString("Y_OFFSET = \"${1}\"");
                clickByTextJavaY_OFFSETCompletion.documentation = new vscode.MarkdownString('Offset vom Mittelpunkt des Bildes nach unten (positiv) oder oben (negativ)');
                items.push(clickByTextJavaY_OFFSETCompletion);
            }

            if (/.*\s*clickByTextWeb\s*\(.*/.test(linePrefix)) {

                const clickByTextWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                clickByTextWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickByTextWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                clickByTextWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Inhalt des linktext.');
                items.push(clickByTextWebELEMENT_NAMECompletion);

                const clickByTextWebMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                clickByTextWebMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                clickByTextWebMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                clickByTextWebMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('{right, left} Gibt an, ob es sich um einen Links- oder Rechtsklick handelt. Default ist links');
                items.push(clickByTextWebMOUSE_BUTTONCompletion);
            }

            if (/.*\s*clickCoordinateWin\s*\(.*/.test(linePrefix)) {

                const clickCoordinateWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                clickCoordinateWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickCoordinateWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                clickCoordinateWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(clickCoordinateWinWINDOW_NAMECompletion);

                const clickCoordinateWinXCompletion = new vscode.CompletionItem('X');
                clickCoordinateWinXCompletion.kind = vscode.CompletionItemKind.Field;
                clickCoordinateWinXCompletion.insertText = new vscode.SnippetString("X = \"${1}\"");
                clickCoordinateWinXCompletion.documentation = new vscode.MarkdownString('X-Koordinate des anzuklickenden Punktes');
                items.push(clickCoordinateWinXCompletion);

                const clickCoordinateWinYCompletion = new vscode.CompletionItem('Y');
                clickCoordinateWinYCompletion.kind = vscode.CompletionItemKind.Field;
                clickCoordinateWinYCompletion.insertText = new vscode.SnippetString("Y = \"${1}\"");
                clickCoordinateWinYCompletion.documentation = new vscode.MarkdownString('X-Koordinate des anzuklickenden Punktes');
                items.push(clickCoordinateWinYCompletion);

                const clickCoordinateWinMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                clickCoordinateWinMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                clickCoordinateWinMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                clickCoordinateWinMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('{links,rechts} links ist default, muss daher nicht angegeben werden.');
                items.push(clickCoordinateWinMOUSE_BUTTONCompletion);
            }

            if (/.*\s*clickCursorWin\s*\(.*/.test(linePrefix)) {

                const clickCursorWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                clickCursorWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickCursorWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                clickCursorWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(clickCursorWinWINDOW_NAMECompletion);

                const clickCursorWinMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                clickCursorWinMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                clickCursorWinMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                clickCursorWinMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('{links,rechts} links ist default, muss daher nicht angegeben werden.');
                items.push(clickCursorWinMOUSE_BUTTONCompletion);
            }

            if (/.*\s*clickImageCP\s*\(.*/.test(linePrefix)) {

                const clickImageCPIMAGE_PATHCompletion = new vscode.CompletionItem('IMAGE_PATH');
                clickImageCPIMAGE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                clickImageCPIMAGE_PATHCompletion.insertText = new vscode.SnippetString("IMAGE_PATH = \"${1}\"");
                clickImageCPIMAGE_PATHCompletion.documentation = new vscode.MarkdownString('Gibt den Pfad zu dem Bild relativ zu der Testset-Datei an.');
                items.push(clickImageCPIMAGE_PATHCompletion);

                const clickImageCPBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                clickImageCPBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                clickImageCPBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                clickImageCPBASEDIRCompletion.documentation = new vscode.MarkdownString('Gibt das Basisverzeichnis an.');
                items.push(clickImageCPBASEDIRCompletion);

                const clickImageCPOFFSET_XCompletion = new vscode.CompletionItem('OFFSET_X');
                clickImageCPOFFSET_XCompletion.kind = vscode.CompletionItemKind.Field;
                clickImageCPOFFSET_XCompletion.insertText = new vscode.SnippetString("OFFSET_X = \"${1}\"");
                clickImageCPOFFSET_XCompletion.documentation = new vscode.MarkdownString('Offset vom Mittelpunkt des Bildes nach rechts (positiv) oder links (negativ)');
                items.push(clickImageCPOFFSET_XCompletion);

                const clickImageCPOFFSET_YCompletion = new vscode.CompletionItem('OFFSET_Y');
                clickImageCPOFFSET_YCompletion.kind = vscode.CompletionItemKind.Field;
                clickImageCPOFFSET_YCompletion.insertText = new vscode.SnippetString("OFFSET_Y = \"${1}\"");
                clickImageCPOFFSET_YCompletion.documentation = new vscode.MarkdownString('Offset vom Mittelpunkt des Bildes nach unten (positiv) oder oben (negativ)');
                items.push(clickImageCPOFFSET_YCompletion);
            }

            if (/.*\s*clickImageWin\s*\(.*/.test(linePrefix)) {

                const clickImageWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                clickImageWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickImageWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                clickImageWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(clickImageWinWINDOW_NAMECompletion);

                const clickImageWinIMAGE_RELATIVE_PATHCompletion = new vscode.CompletionItem('IMAGE_RELATIVE_PATH');
                clickImageWinIMAGE_RELATIVE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                clickImageWinIMAGE_RELATIVE_PATHCompletion.insertText = new vscode.SnippetString("IMAGE_RELATIVE_PATH = \"${1}\"");
                clickImageWinIMAGE_RELATIVE_PATHCompletion.documentation = new vscode.MarkdownString('Pfad zum Bild ');
                items.push(clickImageWinIMAGE_RELATIVE_PATHCompletion);

                const clickImageWinBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                clickImageWinBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                clickImageWinBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                clickImageWinBASEDIRCompletion.documentation = new vscode.MarkdownString('Angabe des Basisverzeichnisses');
                items.push(clickImageWinBASEDIRCompletion);

                const clickImageWinMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                clickImageWinMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                clickImageWinMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                clickImageWinMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('{links,rechts} links ist default, muss daher nicht angegeben werden.');
                items.push(clickImageWinMOUSE_BUTTONCompletion);

                const clickImageWinRELATIVE_XCompletion = new vscode.CompletionItem('RELATIVE_X');
                clickImageWinRELATIVE_XCompletion.kind = vscode.CompletionItemKind.Field;
                clickImageWinRELATIVE_XCompletion.insertText = new vscode.SnippetString("RELATIVE_X = \"${1}\"");
                clickImageWinRELATIVE_XCompletion.documentation = new vscode.MarkdownString('Verschiebung auf der X-Achse. Links: Negativ. Rechts: Positiv');
                items.push(clickImageWinRELATIVE_XCompletion);

                const clickImageWinRELATIVE_YCompletion = new vscode.CompletionItem('RELATIVE_Y');
                clickImageWinRELATIVE_YCompletion.kind = vscode.CompletionItemKind.Field;
                clickImageWinRELATIVE_YCompletion.insertText = new vscode.SnippetString("RELATIVE_Y = \"${1}\"");
                clickImageWinRELATIVE_YCompletion.documentation = new vscode.MarkdownString('Verschiebung auf der Y-Achse. Oben: Negativ. Unten: Positiv');
                items.push(clickImageWinRELATIVE_YCompletion);
            }

            if (/.*\s*clickItemByTextJava\s*\(.*/.test(linePrefix)) {

                const clickItemByTextJavaTARGETCompletion = new vscode.CompletionItem('TARGET');
                clickItemByTextJavaTARGETCompletion.kind = vscode.CompletionItemKind.Field;
                clickItemByTextJavaTARGETCompletion.insertText = new vscode.SnippetString("TARGET = \"${1}\"");
                clickItemByTextJavaTARGETCompletion.documentation = new vscode.MarkdownString('Ziel');
                items.push(clickItemByTextJavaTARGETCompletion);

                const clickItemByTextJavaIS_DOUBLE_CLICKCompletion = new vscode.CompletionItem('IS_DOUBLE_CLICK');
                clickItemByTextJavaIS_DOUBLE_CLICKCompletion.kind = vscode.CompletionItemKind.Field;
                clickItemByTextJavaIS_DOUBLE_CLICKCompletion.insertText = new vscode.SnippetString("IS_DOUBLE_CLICK = \"${1}\"");
                clickItemByTextJavaIS_DOUBLE_CLICKCompletion.documentation = new vscode.MarkdownString('Gibt an, ob ein Doppelklick get\u00E4tigt werden soll.');
                items.push(clickItemByTextJavaIS_DOUBLE_CLICKCompletion);

                const clickItemByTextJavaIS_RIGHT_CLICKCompletion = new vscode.CompletionItem('IS_RIGHT_CLICK');
                clickItemByTextJavaIS_RIGHT_CLICKCompletion.kind = vscode.CompletionItemKind.Field;
                clickItemByTextJavaIS_RIGHT_CLICKCompletion.insertText = new vscode.SnippetString("IS_RIGHT_CLICK = \"${1}\"");
                clickItemByTextJavaIS_RIGHT_CLICKCompletion.documentation = new vscode.MarkdownString('Gibt an, ob die rechte Maustaste, anstatt der linken verwendet werden soll.');
                items.push(clickItemByTextJavaIS_RIGHT_CLICKCompletion);

                const clickItemByTextJavaTEXTCompletion = new vscode.CompletionItem('TEXT');
                clickItemByTextJavaTEXTCompletion.kind = vscode.CompletionItemKind.Field;
                clickItemByTextJavaTEXTCompletion.insertText = new vscode.SnippetString("TEXT = \"${1}\"");
                clickItemByTextJavaTEXTCompletion.documentation = new vscode.MarkdownString('Text, welcher in dem Element geklickt werden soll');
                items.push(clickItemByTextJavaTEXTCompletion);

                const clickItemByTextJavaOFFSETCompletion = new vscode.CompletionItem('OFFSET');
                clickItemByTextJavaOFFSETCompletion.kind = vscode.CompletionItemKind.Field;
                clickItemByTextJavaOFFSETCompletion.insertText = new vscode.SnippetString("OFFSET = \"${1}\"");
                clickItemByTextJavaOFFSETCompletion.documentation = new vscode.MarkdownString('Offset falls mehrere Elemente existieren');
                items.push(clickItemByTextJavaOFFSETCompletion);

                const clickItemByTextJavaWAIT_MILLISCompletion = new vscode.CompletionItem('WAIT_MILLIS');
                clickItemByTextJavaWAIT_MILLISCompletion.kind = vscode.CompletionItemKind.Field;
                clickItemByTextJavaWAIT_MILLISCompletion.insertText = new vscode.SnippetString("WAIT_MILLIS = \"${1}\"");
                clickItemByTextJavaWAIT_MILLISCompletion.documentation = new vscode.MarkdownString('Optionale Anzahl zu wartender Millisekunden bis das Element verf\u00FCgbar ist. Default 10000.');
                items.push(clickItemByTextJavaWAIT_MILLISCompletion);

                const clickItemByTextJavaX_OFFSETCompletion = new vscode.CompletionItem('X_OFFSET');
                clickItemByTextJavaX_OFFSETCompletion.kind = vscode.CompletionItemKind.Field;
                clickItemByTextJavaX_OFFSETCompletion.insertText = new vscode.SnippetString("X_OFFSET = \"${1}\"");
                clickItemByTextJavaX_OFFSETCompletion.documentation = new vscode.MarkdownString('Offset vom Mittelpunkt des Bildes nach rechts (positiv) oder links (negativ)');
                items.push(clickItemByTextJavaX_OFFSETCompletion);

                const clickItemByTextJavaY_OFFSETCompletion = new vscode.CompletionItem('Y_OFFSET');
                clickItemByTextJavaY_OFFSETCompletion.kind = vscode.CompletionItemKind.Field;
                clickItemByTextJavaY_OFFSETCompletion.insertText = new vscode.SnippetString("Y_OFFSET = \"${1}\"");
                clickItemByTextJavaY_OFFSETCompletion.documentation = new vscode.MarkdownString('Offset vom Mittelpunkt des Bildes nach unten (positiv) oder oben (negativ)');
                items.push(clickItemByTextJavaY_OFFSETCompletion);

                const clickItemByTextJavaBY_NAMECompletion = new vscode.CompletionItem('BY_NAME');
                clickItemByTextJavaBY_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickItemByTextJavaBY_NAMECompletion.insertText = new vscode.SnippetString("BY_NAME = \"${1}\"");
                clickItemByTextJavaBY_NAMECompletion.documentation = new vscode.MarkdownString('Flag, \u00FCber den gekennzeichnet werden kann, dass das Element \u00FCber den Namen und nicht den Identifier (z.B. JButton1) angesprochen wird.');
                items.push(clickItemByTextJavaBY_NAMECompletion);

                const clickItemByTextJavaCONTAINSCompletion = new vscode.CompletionItem('CONTAINS');
                clickItemByTextJavaCONTAINSCompletion.kind = vscode.CompletionItemKind.Field;
                clickItemByTextJavaCONTAINSCompletion.insertText = new vscode.SnippetString("CONTAINS = \"${1}\"");
                clickItemByTextJavaCONTAINSCompletion.documentation = new vscode.MarkdownString('True, falls eine Zeichenreihenfolge eine Teilzeichenfolge enth\u00E4lt');
                items.push(clickItemByTextJavaCONTAINSCompletion);
            }

            if (/.*\s*clickJava\s*\(.*/.test(linePrefix)) {

                const clickJavaTARGETCompletion = new vscode.CompletionItem('TARGET');
                clickJavaTARGETCompletion.kind = vscode.CompletionItemKind.Field;
                clickJavaTARGETCompletion.insertText = new vscode.SnippetString("TARGET = \"${1}\"");
                clickJavaTARGETCompletion.documentation = new vscode.MarkdownString('Ziel');
                items.push(clickJavaTARGETCompletion);

                const clickJavaIS_DOUBLE_CLICKCompletion = new vscode.CompletionItem('IS_DOUBLE_CLICK');
                clickJavaIS_DOUBLE_CLICKCompletion.kind = vscode.CompletionItemKind.Field;
                clickJavaIS_DOUBLE_CLICKCompletion.insertText = new vscode.SnippetString("IS_DOUBLE_CLICK = \"${1}\"");
                clickJavaIS_DOUBLE_CLICKCompletion.documentation = new vscode.MarkdownString('Gibt an, ob ein Doppelklick get\u00E4tigt werden soll.');
                items.push(clickJavaIS_DOUBLE_CLICKCompletion);

                const clickJavaIS_RIGHT_CLICKCompletion = new vscode.CompletionItem('IS_RIGHT_CLICK');
                clickJavaIS_RIGHT_CLICKCompletion.kind = vscode.CompletionItemKind.Field;
                clickJavaIS_RIGHT_CLICKCompletion.insertText = new vscode.SnippetString("IS_RIGHT_CLICK = \"${1}\"");
                clickJavaIS_RIGHT_CLICKCompletion.documentation = new vscode.MarkdownString('Gibt an, ob die rechte Maustaste, anstatt der linken verwendet werden soll.');
                items.push(clickJavaIS_RIGHT_CLICKCompletion);

                const clickJavaWAIT_MILLISCompletion = new vscode.CompletionItem('WAIT_MILLIS');
                clickJavaWAIT_MILLISCompletion.kind = vscode.CompletionItemKind.Field;
                clickJavaWAIT_MILLISCompletion.insertText = new vscode.SnippetString("WAIT_MILLIS = \"${1}\"");
                clickJavaWAIT_MILLISCompletion.documentation = new vscode.MarkdownString('Optionale Anzahl zu wartender Millisekunden bis das Element verf\u00FCgbar ist. Default 10000.');
                items.push(clickJavaWAIT_MILLISCompletion);

                const clickJavaBY_NAMECompletion = new vscode.CompletionItem('BY_NAME');
                clickJavaBY_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickJavaBY_NAMECompletion.insertText = new vscode.SnippetString("BY_NAME = \"${1}\"");
                clickJavaBY_NAMECompletion.documentation = new vscode.MarkdownString('Flag, \u00FCber den gekennzeichnet werden kann, dass das Element \u00FCber den Namen und nicht den Identifier (z.B. JButton1) angesprochen wird.');
                items.push(clickJavaBY_NAMECompletion);

                const clickJavaX_OFFSETCompletion = new vscode.CompletionItem('X_OFFSET');
                clickJavaX_OFFSETCompletion.kind = vscode.CompletionItemKind.Field;
                clickJavaX_OFFSETCompletion.insertText = new vscode.SnippetString("X_OFFSET = \"${1}\"");
                clickJavaX_OFFSETCompletion.documentation = new vscode.MarkdownString('Offset vom Mittelpunkt des Bildes nach rechts (positiv) oder links (negativ)');
                items.push(clickJavaX_OFFSETCompletion);

                const clickJavaY_OFFSETCompletion = new vscode.CompletionItem('Y_OFFSET');
                clickJavaY_OFFSETCompletion.kind = vscode.CompletionItemKind.Field;
                clickJavaY_OFFSETCompletion.insertText = new vscode.SnippetString("Y_OFFSET = \"${1}\"");
                clickJavaY_OFFSETCompletion.documentation = new vscode.MarkdownString('Offset vom Mittelpunkt des Bildes nach unten (positiv) oder oben (negativ)');
                items.push(clickJavaY_OFFSETCompletion);
            }

            if (/.*\s*clickJsWeb\s*\(.*/.test(linePrefix)) {

                const clickJsWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                clickJsWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                clickJsWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                clickJsWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(clickJsWebBY_CRITERIACompletion);

                const clickJsWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                clickJsWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickJsWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                clickJsWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(clickJsWebELEMENT_NAMECompletion);
            }

            if (/.*\s*clickMenuAutomIdWinEle\s*\(.*/.test(linePrefix)) {

                const clickMenuAutomIdWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                clickMenuAutomIdWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuAutomIdWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                clickMenuAutomIdWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(clickMenuAutomIdWinEleWINDOW_NAMECompletion);

                const clickMenuAutomIdWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                clickMenuAutomIdWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuAutomIdWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                clickMenuAutomIdWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(clickMenuAutomIdWinElePROCESS_NAMECompletion);

                const clickMenuAutomIdWinEleMENUBAR_NAMECompletion = new vscode.CompletionItem('MENUBAR_NAME');
                clickMenuAutomIdWinEleMENUBAR_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuAutomIdWinEleMENUBAR_NAMECompletion.insertText = new vscode.SnippetString("MENUBAR_NAME = \"${1}\"");
                clickMenuAutomIdWinEleMENUBAR_NAMECompletion.documentation = new vscode.MarkdownString('Name der Men\u00FC-Leiste, die gesteuert werden soll. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen Namen zu ermitteln.');
                items.push(clickMenuAutomIdWinEleMENUBAR_NAMECompletion);

                const clickMenuAutomIdWinEleMENU_AUTOMATION_IDCompletion = new vscode.CompletionItem('MENU_AUTOMATION_ID');
                clickMenuAutomIdWinEleMENU_AUTOMATION_IDCompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuAutomIdWinEleMENU_AUTOMATION_IDCompletion.insertText = new vscode.SnippetString("MENU_AUTOMATION_ID = \"${1}\"");
                clickMenuAutomIdWinEleMENU_AUTOMATION_IDCompletion.documentation = new vscode.MarkdownString('Automation-ID des Men\u00FCpunktes, der gesteuert werden soll. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diese zu ermitteln.');
                items.push(clickMenuAutomIdWinEleMENU_AUTOMATION_IDCompletion);

                const clickMenuAutomIdWinEleMENU_ITEM_AUTOMATION_IDCompletion = new vscode.CompletionItem('MENU_ITEM_AUTOMATION_ID');
                clickMenuAutomIdWinEleMENU_ITEM_AUTOMATION_IDCompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuAutomIdWinEleMENU_ITEM_AUTOMATION_IDCompletion.insertText = new vscode.SnippetString("MENU_ITEM_AUTOMATION_ID = \"${1}\"");
                clickMenuAutomIdWinEleMENU_ITEM_AUTOMATION_IDCompletion.documentation = new vscode.MarkdownString('Automation-ID des Untermen\u00FC-Punktes, der gesteuert werden soll. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diese zu ermitteln.');
                items.push(clickMenuAutomIdWinEleMENU_ITEM_AUTOMATION_IDCompletion);
            }

            if (/.*\s*clickMenuWinEle\s*\(.*/.test(linePrefix)) {

                const clickMenuWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                clickMenuWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                clickMenuWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(clickMenuWinEleWINDOW_NAMECompletion);

                const clickMenuWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                clickMenuWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                clickMenuWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(clickMenuWinElePROCESS_NAMECompletion);

                const clickMenuWinEleMENUBAR_NAMECompletion = new vscode.CompletionItem('MENUBAR_NAME');
                clickMenuWinEleMENUBAR_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuWinEleMENUBAR_NAMECompletion.insertText = new vscode.SnippetString("MENUBAR_NAME = \"${1}\"");
                clickMenuWinEleMENUBAR_NAMECompletion.documentation = new vscode.MarkdownString('Name der Men\u00FC-Leiste, die gesteuert werden soll. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen Namen zu ermitteln.');
                items.push(clickMenuWinEleMENUBAR_NAMECompletion);

                const clickMenuWinEleMENU_NAMECompletion = new vscode.CompletionItem('MENU_NAME');
                clickMenuWinEleMENU_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuWinEleMENU_NAMECompletion.insertText = new vscode.SnippetString("MENU_NAME = \"${1}\"");
                clickMenuWinEleMENU_NAMECompletion.documentation = new vscode.MarkdownString('Name des Men\u00FC-Punktes, der gesteuert werden soll. Dieser ist h\u00E4ufig identisch mit seinem Text (z.B. \'Datei\'). Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen Namen zu ermitteln.');
                items.push(clickMenuWinEleMENU_NAMECompletion);

                const clickMenuWinEleMENU_ITEM_NAMECompletion = new vscode.CompletionItem('MENU_ITEM_NAME');
                clickMenuWinEleMENU_ITEM_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuWinEleMENU_ITEM_NAMECompletion.insertText = new vscode.SnippetString("MENU_ITEM_NAME = \"${1}\"");
                clickMenuWinEleMENU_ITEM_NAMECompletion.documentation = new vscode.MarkdownString('Name des Untermen\u00FC-Punktes, der gesteuert werden soll. Dieser ist h\u00E4ufig identisch mit seinem Text (z.B. \'Speichern\'). Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen Namen zu ermitteln.');
                items.push(clickMenuWinEleMENU_ITEM_NAMECompletion);
            }

            if (/.*\s*clickMenuWindowWin\s*\(.*/.test(linePrefix)) {

                const clickMenuWindowWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                clickMenuWindowWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuWindowWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                clickMenuWindowWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(clickMenuWindowWinWINDOW_NAMECompletion);

                const clickMenuWindowWinMENU_IMAGE_RELATIVE_PATHCompletion = new vscode.CompletionItem('MENU_IMAGE_RELATIVE_PATH');
                clickMenuWindowWinMENU_IMAGE_RELATIVE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuWindowWinMENU_IMAGE_RELATIVE_PATHCompletion.insertText = new vscode.SnippetString("MENU_IMAGE_RELATIVE_PATH = \"${1}\"");
                clickMenuWindowWinMENU_IMAGE_RELATIVE_PATHCompletion.documentation = new vscode.MarkdownString('Relativer Pfad zum Men\u00FC-Bild');
                items.push(clickMenuWindowWinMENU_IMAGE_RELATIVE_PATHCompletion);

                const clickMenuWindowWinBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                clickMenuWindowWinBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuWindowWinBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                clickMenuWindowWinBASEDIRCompletion.documentation = new vscode.MarkdownString('Angabe des Basisverzeichnisses');
                items.push(clickMenuWindowWinBASEDIRCompletion);

                const clickMenuWindowWinWAIT_TIME_BETWEEN_CLICKSCompletion = new vscode.CompletionItem('WAIT_TIME_BETWEEN_CLICKS');
                clickMenuWindowWinWAIT_TIME_BETWEEN_CLICKSCompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuWindowWinWAIT_TIME_BETWEEN_CLICKSCompletion.insertText = new vscode.SnippetString("WAIT_TIME_BETWEEN_CLICKS = \"${1}\"");
                clickMenuWindowWinWAIT_TIME_BETWEEN_CLICKSCompletion.documentation = new vscode.MarkdownString('Wartezeit zwischen Klick auf Men\u00FC-Bild und Untermen\u00FCpunkt-Bild');
                items.push(clickMenuWindowWinWAIT_TIME_BETWEEN_CLICKSCompletion);

                const clickMenuWindowWinMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                clickMenuWindowWinMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuWindowWinMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                clickMenuWindowWinMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('{links,rechts} links ist default, muss daher nicht angegeben werden.');
                items.push(clickMenuWindowWinMOUSE_BUTTONCompletion);

                const clickMenuWindowWinSUBMENU_IMAGE_RELATIVE_PATHCompletion = new vscode.CompletionItem('SUBMENU_IMAGE_RELATIVE_PATH');
                clickMenuWindowWinSUBMENU_IMAGE_RELATIVE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                clickMenuWindowWinSUBMENU_IMAGE_RELATIVE_PATHCompletion.insertText = new vscode.SnippetString("SUBMENU_IMAGE_RELATIVE_PATH = \"${1}\"");
                clickMenuWindowWinSUBMENU_IMAGE_RELATIVE_PATHCompletion.documentation = new vscode.MarkdownString('Relativer Pfad zum Untermen\u00FCpunkt-Bild');
                items.push(clickMenuWindowWinSUBMENU_IMAGE_RELATIVE_PATHCompletion);
            }

            if (/.*\s*clickTabWinEle\s*\(.*/.test(linePrefix)) {

                const clickTabWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                clickTabWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickTabWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                clickTabWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(clickTabWinElePROCESS_NAMECompletion);

                const clickTabWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                clickTabWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickTabWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                clickTabWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(clickTabWinEleWINDOW_NAMECompletion);

                const clickTabWinEleTAB_NAMECompletion = new vscode.CompletionItem('TAB_NAME');
                clickTabWinEleTAB_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickTabWinEleTAB_NAMECompletion.insertText = new vscode.SnippetString("TAB_NAME = \"${1}\"");
                clickTabWinEleTAB_NAMECompletion.documentation = new vscode.MarkdownString('Name des Tabs, das ausgew\u00E4hlt werden soll. Dieser ist h\u00E4ufig identisch mit seinem Text (z.B. \'OK\'). Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen Namen zu ermitteln.');
                items.push(clickTabWinEleTAB_NAMECompletion);
            }

            if (/.*\s*clickTextInPicture\s*\(.*/.test(linePrefix)) {

                const clickTextInPictureWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                clickTextInPictureWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickTextInPictureWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                clickTextInPictureWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters');
                items.push(clickTextInPictureWINDOW_NAMECompletion);

                const clickTextInPictureFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                clickTextInPictureFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickTextInPictureFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                clickTextInPictureFILENAMECompletion.documentation = new vscode.MarkdownString('Name der Bilddatei, die untersucht werden soll. Wenn keine Bilddatei angegeben wird, wird der Zwischenspeicher nach Bilddaten durchsucht. Ist auch hier kein Bild vorhanden, wird ein Screenshot erstellt.');
                items.push(clickTextInPictureFILENAMECompletion);

                const clickTextInPictureBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                clickTextInPictureBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                clickTextInPictureBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                clickTextInPictureBASEDIRCompletion.documentation = new vscode.MarkdownString('Gibt das Basisverzeichnis an.');
                items.push(clickTextInPictureBASEDIRCompletion);

                const clickTextInPictureTEXT_TO_CLICKCompletion = new vscode.CompletionItem('TEXT_TO_CLICK');
                clickTextInPictureTEXT_TO_CLICKCompletion.kind = vscode.CompletionItemKind.Field;
                clickTextInPictureTEXT_TO_CLICKCompletion.insertText = new vscode.SnippetString("TEXT_TO_CLICK = \"${1}\"");
                clickTextInPictureTEXT_TO_CLICKCompletion.documentation = new vscode.MarkdownString('Text der gesucht werden und dessen Position angeklickt werden soll');
                items.push(clickTextInPictureTEXT_TO_CLICKCompletion);

                const clickTextInPictureX1Completion = new vscode.CompletionItem('X1');
                clickTextInPictureX1Completion.kind = vscode.CompletionItemKind.Field;
                clickTextInPictureX1Completion.insertText = new vscode.SnippetString("X1 = \"${1}\"");
                clickTextInPictureX1Completion.documentation = new vscode.MarkdownString('Wenn nur ein Bildschnitt untersucht werden soll: X-Koordinate der linken oberen Ecke.');
                items.push(clickTextInPictureX1Completion);

                const clickTextInPictureY1Completion = new vscode.CompletionItem('Y1');
                clickTextInPictureY1Completion.kind = vscode.CompletionItemKind.Field;
                clickTextInPictureY1Completion.insertText = new vscode.SnippetString("Y1 = \"${1}\"");
                clickTextInPictureY1Completion.documentation = new vscode.MarkdownString('Wenn nur ein Bildschnitt untersucht werden soll: Y-Koordinate der linken oberen Ecke.');
                items.push(clickTextInPictureY1Completion);

                const clickTextInPictureX2Completion = new vscode.CompletionItem('X2');
                clickTextInPictureX2Completion.kind = vscode.CompletionItemKind.Field;
                clickTextInPictureX2Completion.insertText = new vscode.SnippetString("X2 = \"${1}\"");
                clickTextInPictureX2Completion.documentation = new vscode.MarkdownString('Wenn nur ein Bildschnitt untersucht werden soll: X-Koordinate der rechten unteren Ecke.');
                items.push(clickTextInPictureX2Completion);

                const clickTextInPictureY2Completion = new vscode.CompletionItem('Y2');
                clickTextInPictureY2Completion.kind = vscode.CompletionItemKind.Field;
                clickTextInPictureY2Completion.insertText = new vscode.SnippetString("Y2 = \"${1}\"");
                clickTextInPictureY2Completion.documentation = new vscode.MarkdownString('Wenn nur ein Bildschnitt untersucht werden soll: Y-Koordinate der rechten unteren Ecke.');
                items.push(clickTextInPictureY2Completion);

                const clickTextInPictureOCR_IMPLEMENTATIONCompletion = new vscode.CompletionItem('OCR_IMPLEMENTATION');
                clickTextInPictureOCR_IMPLEMENTATIONCompletion.kind = vscode.CompletionItemKind.Field;
                clickTextInPictureOCR_IMPLEMENTATIONCompletion.insertText = new vscode.SnippetString("OCR_IMPLEMENTATION = \"${1}\"");
                clickTextInPictureOCR_IMPLEMENTATIONCompletion.documentation = new vscode.MarkdownString('Wahl der verwendeten OCR Implementierung. GCP oder TESSERACT.');
                items.push(clickTextInPictureOCR_IMPLEMENTATIONCompletion);
            }

            if (/.*\s*clickWeb\s*\(.*/.test(linePrefix)) {

                const clickWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                clickWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                clickWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                clickWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(clickWebBY_CRITERIACompletion);

                const clickWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                clickWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                clickWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(clickWebELEMENT_NAMECompletion);

                const clickWebNEXT_ELEMENT_BY_CRITERIACompletion = new vscode.CompletionItem('NEXT_ELEMENT_BY_CRITERIA');
                clickWebNEXT_ELEMENT_BY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                clickWebNEXT_ELEMENT_BY_CRITERIACompletion.insertText = new vscode.SnippetString("NEXT_ELEMENT_BY_CRITERIA = \"${1}\"");
                clickWebNEXT_ELEMENT_BY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das n\u00E4chste Element ermittelt werden soll.');
                items.push(clickWebNEXT_ELEMENT_BY_CRITERIACompletion);

                const clickWebNEXT_ELEMENT_NAMECompletion = new vscode.CompletionItem('NEXT_ELEMENT_NAME');
                clickWebNEXT_ELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickWebNEXT_ELEMENT_NAMECompletion.insertText = new vscode.SnippetString("NEXT_ELEMENT_NAME = \"${1}\"");
                clickWebNEXT_ELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Name des n\u00E4chsten Elements, das nach dem Klicken auf das eigentliche Element verf\u00FCgbar sein soll.');
                items.push(clickWebNEXT_ELEMENT_NAMECompletion);

                const clickWebMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                clickWebMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                clickWebMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                clickWebMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('{right, left} Gibt an, ob es sich um einen Links- oder Rechtsklick handelt. Default ist links');
                items.push(clickWebMOUSE_BUTTONCompletion);
            }

            if (/.*\s*clickWebFast\s*\(.*/.test(linePrefix)) {

                const clickWebFastBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                clickWebFastBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                clickWebFastBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                clickWebFastBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(clickWebFastBY_CRITERIACompletion);

                const clickWebFastELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                clickWebFastELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                clickWebFastELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                clickWebFastELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(clickWebFastELEMENT_NAMECompletion);

                const clickWebFastNO_VISIBILITY_CHECKCompletion = new vscode.CompletionItem('NO_VISIBILITY_CHECK');
                clickWebFastNO_VISIBILITY_CHECKCompletion.kind = vscode.CompletionItemKind.Field;
                clickWebFastNO_VISIBILITY_CHECKCompletion.insertText = new vscode.SnippetString("NO_VISIBILITY_CHECK = \"${1}\"");
                clickWebFastNO_VISIBILITY_CHECKCompletion.documentation = new vscode.MarkdownString('Wenn true, wird vor dem Klick nicht \u00FCberpr\u00FCft ob (bzw. gewartet bis) das Element sichtbar ist (Default: false)');
                items.push(clickWebFastNO_VISIBILITY_CHECKCompletion);
            }

            if (/.*\s*closeApplication\s*\(.*/.test(linePrefix)) {

                const closeApplicationTITLECompletion = new vscode.CompletionItem('TITLE');
                closeApplicationTITLECompletion.kind = vscode.CompletionItemKind.Field;
                closeApplicationTITLECompletion.insertText = new vscode.SnippetString("TITLE = \"${1}\"");
                closeApplicationTITLECompletion.documentation = new vscode.MarkdownString('Titel des zu beendenden Fensters');
                items.push(closeApplicationTITLECompletion);
            }

            if (/.*\s*closeApplicationCP\s*\(.*/.test(linePrefix)) {

                const closeApplicationCPWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                closeApplicationCPWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                closeApplicationCPWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                closeApplicationCPWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des zu schlie\u00DFenden Fensters.');
                items.push(closeApplicationCPWINDOW_NAMECompletion);
            }

            if (/.*\s*closeApplicationWin\s*\(.*/.test(linePrefix)) {

                const closeApplicationWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                closeApplicationWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                closeApplicationWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                closeApplicationWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(closeApplicationWinWINDOW_NAMECompletion);

                const closeApplicationWinMATCH_MODECompletion = new vscode.CompletionItem('MATCH_MODE');
                closeApplicationWinMATCH_MODECompletion.kind = vscode.CompletionItemKind.Field;
                closeApplicationWinMATCH_MODECompletion.insertText = new vscode.SnippetString("MATCH_MODE = \"${1}\"");
                closeApplicationWinMATCH_MODECompletion.documentation = new vscode.MarkdownString('M\u00F6gliche Werte sind eine der folgenden Ziffern oder das Wort \'RegEx\':\n       1 = Der Titel eines Fensters muss mit dem angegebenen WINDOW_NAME beginnen, um eine \u00DCbereinstimmung zu erzielen.\n       2 = Der Titel eines Fensters kann WINDOW_NAME an beliebiger Stelle enthalten, um eine \u00DCbereinstimmung zu erzielen.\n       3 = Der Titel eines Fensters muss genau mit WINDOW_NAME \u00FCbereinstimmen, um eine \u00DCbereinstimmung zu erzielen.\n       RegEx = WINDOW_NAME wird als regul\u00E4rer Ausdruck behandelt.');
                items.push(closeApplicationWinMATCH_MODECompletion);
            }

            if (/.*\s*closeApplicationWinEle\s*\(.*/.test(linePrefix)) {

                const closeApplicationWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                closeApplicationWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                closeApplicationWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                closeApplicationWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(closeApplicationWinEleWINDOW_NAMECompletion);

                const closeApplicationWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                closeApplicationWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                closeApplicationWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                closeApplicationWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(closeApplicationWinElePROCESS_NAMECompletion);
            }

            if (/.*\s*closeSql\s*\(.*/.test(linePrefix)) {

                const closeSqlCONNECTION_NAMECompletion = new vscode.CompletionItem('CONNECTION_NAME');
                closeSqlCONNECTION_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                closeSqlCONNECTION_NAMECompletion.insertText = new vscode.SnippetString("CONNECTION_NAME = \"${1}\"");
                closeSqlCONNECTION_NAMECompletion.documentation = new vscode.MarkdownString('Name der bestehenden Datenbankverbindung');
                items.push(closeSqlCONNECTION_NAMECompletion);
            }

            if (/.*\s*cobol2Xml\s*\(.*/.test(linePrefix)) {

                const cobol2XmlINPUT_BINCompletion = new vscode.CompletionItem('INPUT_BIN');
                cobol2XmlINPUT_BINCompletion.kind = vscode.CompletionItemKind.Field;
                cobol2XmlINPUT_BINCompletion.insertText = new vscode.SnippetString("INPUT_BIN = \"${1}\"");
                cobol2XmlINPUT_BINCompletion.documentation = new vscode.MarkdownString('Zu verwendendes Eingangs-BIN');
                items.push(cobol2XmlINPUT_BINCompletion);

                const cobol2XmlCOPYBOOKCompletion = new vscode.CompletionItem('COPYBOOK');
                cobol2XmlCOPYBOOKCompletion.kind = vscode.CompletionItemKind.Field;
                cobol2XmlCOPYBOOKCompletion.insertText = new vscode.SnippetString("COPYBOOK = \"${1}\"");
                cobol2XmlCOPYBOOKCompletion.documentation = new vscode.MarkdownString('Host Copybook');
                items.push(cobol2XmlCOPYBOOKCompletion);

                const cobol2XmlOUTPUT_XMLCompletion = new vscode.CompletionItem('OUTPUT_XML');
                cobol2XmlOUTPUT_XMLCompletion.kind = vscode.CompletionItemKind.Field;
                cobol2XmlOUTPUT_XMLCompletion.insertText = new vscode.SnippetString("OUTPUT_XML = \"${1}\"");
                cobol2XmlOUTPUT_XMLCompletion.documentation = new vscode.MarkdownString('Zu erstellende XML Datei');
                items.push(cobol2XmlOUTPUT_XMLCompletion);

                const cobol2XmlFONTCompletion = new vscode.CompletionItem('FONT');
                cobol2XmlFONTCompletion.kind = vscode.CompletionItemKind.Field;
                cobol2XmlFONTCompletion.insertText = new vscode.SnippetString("FONT = \"${1}\"");
                cobol2XmlFONTCompletion.documentation = new vscode.MarkdownString('Zu verwendendes Charset der Cobol Datei');
                items.push(cobol2XmlFONTCompletion);
            }

            if (/.*\s*comfortClickWin\s*\(.*/.test(linePrefix)) {

                const comfortClickWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                comfortClickWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                comfortClickWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                comfortClickWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(comfortClickWinWINDOW_NAMECompletion);

                const comfortClickWinRELATIVE_PATH_IMAGECompletion = new vscode.CompletionItem('RELATIVE_PATH_IMAGE');
                comfortClickWinRELATIVE_PATH_IMAGECompletion.kind = vscode.CompletionItemKind.Field;
                comfortClickWinRELATIVE_PATH_IMAGECompletion.insertText = new vscode.SnippetString("RELATIVE_PATH_IMAGE = \"${1}\"");
                comfortClickWinRELATIVE_PATH_IMAGECompletion.documentation = new vscode.MarkdownString('Pfad zum Bild ');
                items.push(comfortClickWinRELATIVE_PATH_IMAGECompletion);

                const comfortClickWinBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                comfortClickWinBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                comfortClickWinBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                comfortClickWinBASEDIRCompletion.documentation = new vscode.MarkdownString('Angabe des Basisverzeichnisses');
                items.push(comfortClickWinBASEDIRCompletion);

                const comfortClickWinTIMEOUTCompletion = new vscode.CompletionItem('TIMEOUT');
                comfortClickWinTIMEOUTCompletion.kind = vscode.CompletionItemKind.Field;
                comfortClickWinTIMEOUTCompletion.insertText = new vscode.SnippetString("TIMEOUT = \"${1}\"");
                comfortClickWinTIMEOUTCompletion.documentation = new vscode.MarkdownString('Zeit, nach der das Warten mit einem Fehler abgebrochen wird.');
                items.push(comfortClickWinTIMEOUTCompletion);

                const comfortClickWinMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                comfortClickWinMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                comfortClickWinMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                comfortClickWinMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('{links,rechts} links ist default, muss daher nicht angegeben werden.');
                items.push(comfortClickWinMOUSE_BUTTONCompletion);

                const comfortClickWinRELATIVE_XCompletion = new vscode.CompletionItem('RELATIVE_X');
                comfortClickWinRELATIVE_XCompletion.kind = vscode.CompletionItemKind.Field;
                comfortClickWinRELATIVE_XCompletion.insertText = new vscode.SnippetString("RELATIVE_X = \"${1}\"");
                comfortClickWinRELATIVE_XCompletion.documentation = new vscode.MarkdownString('Verschiebung des Klicks relativ zum Mittelpunkt des Bildes. Links: Negativ. Rechts: Positiv');
                items.push(comfortClickWinRELATIVE_XCompletion);

                const comfortClickWinRELATIVE_YCompletion = new vscode.CompletionItem('RELATIVE_Y');
                comfortClickWinRELATIVE_YCompletion.kind = vscode.CompletionItemKind.Field;
                comfortClickWinRELATIVE_YCompletion.insertText = new vscode.SnippetString("RELATIVE_Y = \"${1}\"");
                comfortClickWinRELATIVE_YCompletion.documentation = new vscode.MarkdownString('Verschiebung des Klicks relativ zum Mittelpunkt des Bildes. Oben: Negativ. Unten: Positiv');
                items.push(comfortClickWinRELATIVE_YCompletion);

                const comfortClickWinX1Completion = new vscode.CompletionItem('X1');
                comfortClickWinX1Completion.kind = vscode.CompletionItemKind.Field;
                comfortClickWinX1Completion.insertText = new vscode.SnippetString("X1 = \"${1}\"");
                comfortClickWinX1Completion.documentation = new vscode.MarkdownString('Linke Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(comfortClickWinX1Completion);

                const comfortClickWinY1Completion = new vscode.CompletionItem('Y1');
                comfortClickWinY1Completion.kind = vscode.CompletionItemKind.Field;
                comfortClickWinY1Completion.insertText = new vscode.SnippetString("Y1 = \"${1}\"");
                comfortClickWinY1Completion.documentation = new vscode.MarkdownString('Obere Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(comfortClickWinY1Completion);

                const comfortClickWinX2Completion = new vscode.CompletionItem('X2');
                comfortClickWinX2Completion.kind = vscode.CompletionItemKind.Field;
                comfortClickWinX2Completion.insertText = new vscode.SnippetString("X2 = \"${1}\"");
                comfortClickWinX2Completion.documentation = new vscode.MarkdownString('Rechte Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(comfortClickWinX2Completion);

                const comfortClickWinY2Completion = new vscode.CompletionItem('Y2');
                comfortClickWinY2Completion.kind = vscode.CompletionItemKind.Field;
                comfortClickWinY2Completion.insertText = new vscode.SnippetString("Y2 = \"${1}\"");
                comfortClickWinY2Completion.documentation = new vscode.MarkdownString('Untere Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(comfortClickWinY2Completion);

                const comfortClickWinMATCH_MODECompletion = new vscode.CompletionItem('MATCH_MODE');
                comfortClickWinMATCH_MODECompletion.kind = vscode.CompletionItemKind.Field;
                comfortClickWinMATCH_MODECompletion.insertText = new vscode.SnippetString("MATCH_MODE = \"${1}\"");
                comfortClickWinMATCH_MODECompletion.documentation = new vscode.MarkdownString('M\u00F6gliche Werte sind eine der folgenden Ziffern oder das Wort \'RegEx\':\n       1 = Der Titel eines Fensters muss mit dem angegebenen WINDOW_NAME beginnen, um eine \u00DCbereinstimmung zu erzielen.\n       2 = Der Titel eines Fensters kann WINDOW_NAME an beliebiger Stelle enthalten, um eine \u00DCbereinstimmung zu erzielen.\n       3 = Der Titel eines Fensters muss genau mit WINDOW_NAME \u00FCbereinstimmen, um eine \u00DCbereinstimmung zu erzielen.\n       RegEx = WINDOW_NAME wird als regul\u00E4rer Ausdruck behandelt.');
                items.push(comfortClickWinMATCH_MODECompletion);
            }

            if (/.*\s*comfortSendTextWin\s*\(.*/.test(linePrefix)) {

                const comfortSendTextWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                comfortSendTextWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                comfortSendTextWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                comfortSendTextWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(comfortSendTextWinWINDOW_NAMECompletion);

                const comfortSendTextWinRELATIVE_PATH_IMAGECompletion = new vscode.CompletionItem('RELATIVE_PATH_IMAGE');
                comfortSendTextWinRELATIVE_PATH_IMAGECompletion.kind = vscode.CompletionItemKind.Field;
                comfortSendTextWinRELATIVE_PATH_IMAGECompletion.insertText = new vscode.SnippetString("RELATIVE_PATH_IMAGE = \"${1}\"");
                comfortSendTextWinRELATIVE_PATH_IMAGECompletion.documentation = new vscode.MarkdownString('Pfad zum Bild ');
                items.push(comfortSendTextWinRELATIVE_PATH_IMAGECompletion);

                const comfortSendTextWinBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                comfortSendTextWinBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                comfortSendTextWinBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                comfortSendTextWinBASEDIRCompletion.documentation = new vscode.MarkdownString('Angabe des Basisverzeichnisses');
                items.push(comfortSendTextWinBASEDIRCompletion);

                const comfortSendTextWinTIMEOUTCompletion = new vscode.CompletionItem('TIMEOUT');
                comfortSendTextWinTIMEOUTCompletion.kind = vscode.CompletionItemKind.Field;
                comfortSendTextWinTIMEOUTCompletion.insertText = new vscode.SnippetString("TIMEOUT = \"${1}\"");
                comfortSendTextWinTIMEOUTCompletion.documentation = new vscode.MarkdownString('Zeit, nach der ein Fehler gemeldet wird.');
                items.push(comfortSendTextWinTIMEOUTCompletion);

                const comfortSendTextWinMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                comfortSendTextWinMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                comfortSendTextWinMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                comfortSendTextWinMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('{links,rechts} links ist default, muss daher nicht angegeben werden.');
                items.push(comfortSendTextWinMOUSE_BUTTONCompletion);

                const comfortSendTextWinRELATIVE_XCompletion = new vscode.CompletionItem('RELATIVE_X');
                comfortSendTextWinRELATIVE_XCompletion.kind = vscode.CompletionItemKind.Field;
                comfortSendTextWinRELATIVE_XCompletion.insertText = new vscode.SnippetString("RELATIVE_X = \"${1}\"");
                comfortSendTextWinRELATIVE_XCompletion.documentation = new vscode.MarkdownString('Verschiebung des Klicks relativ zum Mittelpunkt des Bildes. Links: Negativ. Rechts: Positiv');
                items.push(comfortSendTextWinRELATIVE_XCompletion);

                const comfortSendTextWinRELATIVE_YCompletion = new vscode.CompletionItem('RELATIVE_Y');
                comfortSendTextWinRELATIVE_YCompletion.kind = vscode.CompletionItemKind.Field;
                comfortSendTextWinRELATIVE_YCompletion.insertText = new vscode.SnippetString("RELATIVE_Y = \"${1}\"");
                comfortSendTextWinRELATIVE_YCompletion.documentation = new vscode.MarkdownString('Verschiebung des Klicks relativ zum Mittelpunkt des Bildes. Oben: Negativ. Unten: Positiv');
                items.push(comfortSendTextWinRELATIVE_YCompletion);

                const comfortSendTextWinX1Completion = new vscode.CompletionItem('X1');
                comfortSendTextWinX1Completion.kind = vscode.CompletionItemKind.Field;
                comfortSendTextWinX1Completion.insertText = new vscode.SnippetString("X1 = \"${1}\"");
                comfortSendTextWinX1Completion.documentation = new vscode.MarkdownString('Linke Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(comfortSendTextWinX1Completion);

                const comfortSendTextWinY1Completion = new vscode.CompletionItem('Y1');
                comfortSendTextWinY1Completion.kind = vscode.CompletionItemKind.Field;
                comfortSendTextWinY1Completion.insertText = new vscode.SnippetString("Y1 = \"${1}\"");
                comfortSendTextWinY1Completion.documentation = new vscode.MarkdownString('Obere Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(comfortSendTextWinY1Completion);

                const comfortSendTextWinX2Completion = new vscode.CompletionItem('X2');
                comfortSendTextWinX2Completion.kind = vscode.CompletionItemKind.Field;
                comfortSendTextWinX2Completion.insertText = new vscode.SnippetString("X2 = \"${1}\"");
                comfortSendTextWinX2Completion.documentation = new vscode.MarkdownString('Rechte Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(comfortSendTextWinX2Completion);

                const comfortSendTextWinY2Completion = new vscode.CompletionItem('Y2');
                comfortSendTextWinY2Completion.kind = vscode.CompletionItemKind.Field;
                comfortSendTextWinY2Completion.insertText = new vscode.SnippetString("Y2 = \"${1}\"");
                comfortSendTextWinY2Completion.documentation = new vscode.MarkdownString('Untere Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(comfortSendTextWinY2Completion);

                const comfortSendTextWinTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                comfortSendTextWinTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                comfortSendTextWinTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                comfortSendTextWinTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('Zu sendender (schreibender) Text');
                items.push(comfortSendTextWinTEXT_TO_SENDCompletion);

                const comfortSendTextWinMATCH_MODECompletion = new vscode.CompletionItem('MATCH_MODE');
                comfortSendTextWinMATCH_MODECompletion.kind = vscode.CompletionItemKind.Field;
                comfortSendTextWinMATCH_MODECompletion.insertText = new vscode.SnippetString("MATCH_MODE = \"${1}\"");
                comfortSendTextWinMATCH_MODECompletion.documentation = new vscode.MarkdownString('M\u00F6gliche Werte sind eine der folgenden Ziffern oder das Wort \'RegEx\':\n       1 = Der Titel eines Fensters muss mit dem angegebenen WINDOW_NAME beginnen, um eine \u00DCbereinstimmung zu erzielen.\n       2 = Der Titel eines Fensters kann WINDOW_NAME an beliebiger Stelle enthalten, um eine \u00DCbereinstimmung zu erzielen.\n       3 = Der Titel eines Fensters muss genau mit WINDOW_NAME \u00FCbereinstimmen, um eine \u00DCbereinstimmung zu erzielen.\n       RegEx = WINDOW_NAME wird als regul\u00E4rer Ausdruck behandelt.');
                items.push(comfortSendTextWinMATCH_MODECompletion);
            }

            if (/.*\s*comfortWaitWindow\s*\(.*/.test(linePrefix)) {

                const comfortWaitWindowWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                comfortWaitWindowWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                comfortWaitWindowWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                comfortWaitWindowWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(comfortWaitWindowWINDOW_NAMECompletion);

                const comfortWaitWindowMATCH_MODECompletion = new vscode.CompletionItem('MATCH_MODE');
                comfortWaitWindowMATCH_MODECompletion.kind = vscode.CompletionItemKind.Field;
                comfortWaitWindowMATCH_MODECompletion.insertText = new vscode.SnippetString("MATCH_MODE = \"${1}\"");
                comfortWaitWindowMATCH_MODECompletion.documentation = new vscode.MarkdownString('M\u00F6gliche Werte sind eine der folgenden Ziffern oder das Wort \'RegEx\':\n       1 = Der Titel eines Fensters muss mit dem angegebenen WINDOW_NAME beginnen, um eine \u00DCbereinstimmung zu erzielen.\n       2 = Der Titel eines Fensters kann WINDOW_NAME an beliebiger Stelle enthalten, um eine \u00DCbereinstimmung zu erzielen.\n       3 = Der Titel eines Fensters muss genau mit WINDOW_NAME \u00FCbereinstimmen, um eine \u00DCbereinstimmung zu erzielen.\n       RegEx = WINDOW_NAME wird als regul\u00E4rer Ausdruck behandelt.');
                items.push(comfortWaitWindowMATCH_MODECompletion);

                const comfortWaitWindowTIMEOUTCompletion = new vscode.CompletionItem('TIMEOUT');
                comfortWaitWindowTIMEOUTCompletion.kind = vscode.CompletionItemKind.Field;
                comfortWaitWindowTIMEOUTCompletion.insertText = new vscode.SnippetString("TIMEOUT = \"${1}\"");
                comfortWaitWindowTIMEOUTCompletion.documentation = new vscode.MarkdownString('Zeit, nach der ein Fehler gemeldet wird.');
                items.push(comfortWaitWindowTIMEOUTCompletion);
            }

            if (/.*\s*comment\s*\(.*/.test(linePrefix)) {

                const commentTEXTCompletion = new vscode.CompletionItem('TEXT');
                commentTEXTCompletion.kind = vscode.CompletionItemKind.Field;
                commentTEXTCompletion.insertText = new vscode.SnippetString("TEXT = \"${1}\"");
                commentTEXTCompletion.documentation = new vscode.MarkdownString('Der darzustellende Kommentar');
                items.push(commentTEXTCompletion);
            }

            if (/.*\s*compareChangesSql\s*\(.*/.test(linePrefix)) {

                const compareChangesSqlCONNECTION_NAMECompletion = new vscode.CompletionItem('CONNECTION_NAME');
                compareChangesSqlCONNECTION_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                compareChangesSqlCONNECTION_NAMECompletion.insertText = new vscode.SnippetString("CONNECTION_NAME = \"${1}\"");
                compareChangesSqlCONNECTION_NAMECompletion.documentation = new vscode.MarkdownString('Name der bestehenden Datenbankverbindung');
                items.push(compareChangesSqlCONNECTION_NAMECompletion);

                const compareChangesSqlTABLE_BEFORECompletion = new vscode.CompletionItem('TABLE_BEFORE');
                compareChangesSqlTABLE_BEFORECompletion.kind = vscode.CompletionItemKind.Field;
                compareChangesSqlTABLE_BEFORECompletion.insertText = new vscode.SnippetString("TABLE_BEFORE = \"${1}\"");
                compareChangesSqlTABLE_BEFORECompletion.documentation = new vscode.MarkdownString('Name der ersten zu vergleichenden Tabelle');
                items.push(compareChangesSqlTABLE_BEFORECompletion);

                const compareChangesSqlTABLE_AFTERCompletion = new vscode.CompletionItem('TABLE_AFTER');
                compareChangesSqlTABLE_AFTERCompletion.kind = vscode.CompletionItemKind.Field;
                compareChangesSqlTABLE_AFTERCompletion.insertText = new vscode.SnippetString("TABLE_AFTER = \"${1}\"");
                compareChangesSqlTABLE_AFTERCompletion.documentation = new vscode.MarkdownString('Name der zweiten zu vergleichenden Tabelle');
                items.push(compareChangesSqlTABLE_AFTERCompletion);

                const compareChangesSqlPRIMARY_KEYSCompletion = new vscode.CompletionItem('PRIMARY_KEYS');
                compareChangesSqlPRIMARY_KEYSCompletion.kind = vscode.CompletionItemKind.Field;
                compareChangesSqlPRIMARY_KEYSCompletion.insertText = new vscode.SnippetString("PRIMARY_KEYS = \"${1}\"");
                compareChangesSqlPRIMARY_KEYSCompletion.documentation = new vscode.MarkdownString('Komma-separierte Liste der Namen der Prim\u00E4rschl\u00FCssel-Spalten');
                items.push(compareChangesSqlPRIMARY_KEYSCompletion);

                const compareChangesSqlIGNORE_FIELD_LISTCompletion = new vscode.CompletionItem('IGNORE_FIELD_LIST');
                compareChangesSqlIGNORE_FIELD_LISTCompletion.kind = vscode.CompletionItemKind.Field;
                compareChangesSqlIGNORE_FIELD_LISTCompletion.insertText = new vscode.SnippetString("IGNORE_FIELD_LIST = \"${1}\"");
                compareChangesSqlIGNORE_FIELD_LISTCompletion.documentation = new vscode.MarkdownString('Komma-separierte Liste der Namen der Spalten, die beim Vergleich zu ignorieren sind');
                items.push(compareChangesSqlIGNORE_FIELD_LISTCompletion);

                const compareChangesSqlVERBOSECompletion = new vscode.CompletionItem('VERBOSE');
                compareChangesSqlVERBOSECompletion.kind = vscode.CompletionItemKind.Field;
                compareChangesSqlVERBOSECompletion.insertText = new vscode.SnippetString("VERBOSE = \"${1}\"");
                compareChangesSqlVERBOSECompletion.documentation = new vscode.MarkdownString('Auf true zu setzen, um in der Weboberfl\u00E4che eine detaillierte Zusammenfassung des Vergleichs zu erhalten. (Default: false)');
                items.push(compareChangesSqlVERBOSECompletion);

                const compareChangesSqlOUTPUT_FILE_CSVCompletion = new vscode.CompletionItem('OUTPUT_FILE_CSV');
                compareChangesSqlOUTPUT_FILE_CSVCompletion.kind = vscode.CompletionItemKind.Field;
                compareChangesSqlOUTPUT_FILE_CSVCompletion.insertText = new vscode.SnippetString("OUTPUT_FILE_CSV = \"${1}\"");
                compareChangesSqlOUTPUT_FILE_CSVCompletion.documentation = new vscode.MarkdownString('Pfad zu der CSV-Datei, in die das Vergleichsergebnis geschrieben wird.  -    Dabei werden f\u00FCr jede Zeile alle Spalten aufgef\u00FChrt, in denen in mindestens einer Zeile \u00C4nderungen gefunden wurden, sowie die Prim\u00E4rschl\u00FCsselspalten.  -    Achtung: bereits vorhandene Inhalte in der Datei werden \u00DCberschrieben.');
                items.push(compareChangesSqlOUTPUT_FILE_CSVCompletion);

                const compareChangesSqlSUCCESS_ON_NO_CHANGECompletion = new vscode.CompletionItem('SUCCESS_ON_NO_CHANGE');
                compareChangesSqlSUCCESS_ON_NO_CHANGECompletion.kind = vscode.CompletionItemKind.Field;
                compareChangesSqlSUCCESS_ON_NO_CHANGECompletion.insertText = new vscode.SnippetString("SUCCESS_ON_NO_CHANGE = \"${1}\"");
                compareChangesSqlSUCCESS_ON_NO_CHANGECompletion.documentation = new vscode.MarkdownString('Ist dieser Wert false (default), gibt das Kommando das Resultat \'Warnung\' aus, wenn mindestens eine \u00C4nderung gefunden wurde und ansonsten \'Erfolg\'.  -    Ist der Wert true, ist das Verhalten umgekehrt.');
                items.push(compareChangesSqlSUCCESS_ON_NO_CHANGECompletion);

                const compareChangesSqlENCODINGCompletion = new vscode.CompletionItem('ENCODING');
                compareChangesSqlENCODINGCompletion.kind = vscode.CompletionItemKind.Field;
                compareChangesSqlENCODINGCompletion.insertText = new vscode.SnippetString("ENCODING = \"${1}\"");
                compareChangesSqlENCODINGCompletion.documentation = new vscode.MarkdownString('Encoding der Output-Files (Default: UTF-8)');
                items.push(compareChangesSqlENCODINGCompletion);

                const compareChangesSqlOUTPUT_FILE_REPORTCompletion = new vscode.CompletionItem('OUTPUT_FILE_REPORT');
                compareChangesSqlOUTPUT_FILE_REPORTCompletion.kind = vscode.CompletionItemKind.Field;
                compareChangesSqlOUTPUT_FILE_REPORTCompletion.insertText = new vscode.SnippetString("OUTPUT_FILE_REPORT = \"${1}\"");
                compareChangesSqlOUTPUT_FILE_REPORTCompletion.documentation = new vscode.MarkdownString('Pfad zur Text-Datei, in die eine detaillierte Zusammenfassung des Vergleichs zu schreiben ist. Achtung: bereits vorhandene Inhalte in der Datei werden \u00DCberschrieben.');
                items.push(compareChangesSqlOUTPUT_FILE_REPORTCompletion);

                const compareChangesSqlCSV_DELIMITERCompletion = new vscode.CompletionItem('CSV_DELIMITER');
                compareChangesSqlCSV_DELIMITERCompletion.kind = vscode.CompletionItemKind.Field;
                compareChangesSqlCSV_DELIMITERCompletion.insertText = new vscode.SnippetString("CSV_DELIMITER = \"${1}\"");
                compareChangesSqlCSV_DELIMITERCompletion.documentation = new vscode.MarkdownString('Trennzeichen zwischen den in der CSV-Datei vorzunehmenden Eintr\u00E4gen. Zul\u00E4ssig sind 1 bis 5 Zeichen. (Default: ,)');
                items.push(compareChangesSqlCSV_DELIMITERCompletion);
            }

            if (/.*\s*compareText\s*\(.*/.test(linePrefix)) {

                const compareTextTEXT1Completion = new vscode.CompletionItem('TEXT1');
                compareTextTEXT1Completion.kind = vscode.CompletionItemKind.Field;
                compareTextTEXT1Completion.insertText = new vscode.SnippetString("TEXT1 = \"${1}\"");
                compareTextTEXT1Completion.documentation = new vscode.MarkdownString('Text oder vollst\u00E4ndig qualifizierter Dateiname einer Textdatei.');
                items.push(compareTextTEXT1Completion);

                const compareTextTEXT2Completion = new vscode.CompletionItem('TEXT2');
                compareTextTEXT2Completion.kind = vscode.CompletionItemKind.Field;
                compareTextTEXT2Completion.insertText = new vscode.SnippetString("TEXT2 = \"${1}\"");
                compareTextTEXT2Completion.documentation = new vscode.MarkdownString('Text oder vollst\u00E4ndig qualifizierter Dateiname einer Textdatei.');
                items.push(compareTextTEXT2Completion);

                const compareTextLINES_TO_IGNORECompletion = new vscode.CompletionItem('LINES_TO_IGNORE');
                compareTextLINES_TO_IGNORECompletion.kind = vscode.CompletionItemKind.Field;
                compareTextLINES_TO_IGNORECompletion.insertText = new vscode.SnippetString("LINES_TO_IGNORE = \"${1}\"");
                compareTextLINES_TO_IGNORECompletion.documentation = new vscode.MarkdownString('Liste von Ganzzahlen, die Zeilen angeben, die vom Vergleich ausgenommen werden. Erlaubte Trennzeichen sind \',\' f\u00FCr Einzelwerte und \'-\' f\u00FCr Wertebereiche (z. B. \'3, 7, 8-10, 12, 19-21\', um Zeilen 3, 7, 8, 9, 10, 12, 19, 20, 21 auszunehmen). Achtung: Die Zeilen werden in beiden Texten ignoriert.');
                items.push(compareTextLINES_TO_IGNORECompletion);

                const compareTextLINES_TO_COMPARECompletion = new vscode.CompletionItem('LINES_TO_COMPARE');
                compareTextLINES_TO_COMPARECompletion.kind = vscode.CompletionItemKind.Field;
                compareTextLINES_TO_COMPARECompletion.insertText = new vscode.SnippetString("LINES_TO_COMPARE = \"${1}\"");
                compareTextLINES_TO_COMPARECompletion.documentation = new vscode.MarkdownString('Liste von Ganzzahlen, die Zeilen angeben, die zu vergleichen sind. Erlaubte Trennzeichen sind \',\' f\u00FCr Einzelwerte und \'-\' f\u00FCr Wertebereiche (z. B. \'3, 7, 8-10\', um alle Zeilen au\u00DFer 3, 7, 8, 9, 10 auszunehmen). Bestehen \u00DCberschneidungen zwischen LINES_TO_KEEP und LINES_TO_IGNORE, so werden Zeilen in LINES_TO_IGNORE in jedem Fall ausgenommen.');
                items.push(compareTextLINES_TO_COMPARECompletion);

                const compareTextTEXT1_IS_FILECompletion = new vscode.CompletionItem('TEXT1_IS_FILE');
                compareTextTEXT1_IS_FILECompletion.kind = vscode.CompletionItemKind.Field;
                compareTextTEXT1_IS_FILECompletion.insertText = new vscode.SnippetString("TEXT1_IS_FILE = \"${1}\"");
                compareTextTEXT1_IS_FILECompletion.documentation = new vscode.MarkdownString('Ist TEXT1 ein Dateiname? (true\/false, default: false)');
                items.push(compareTextTEXT1_IS_FILECompletion);

                const compareTextTEXT2_IS_FILECompletion = new vscode.CompletionItem('TEXT2_IS_FILE');
                compareTextTEXT2_IS_FILECompletion.kind = vscode.CompletionItemKind.Field;
                compareTextTEXT2_IS_FILECompletion.insertText = new vscode.SnippetString("TEXT2_IS_FILE = \"${1}\"");
                compareTextTEXT2_IS_FILECompletion.documentation = new vscode.MarkdownString('Ist TEXT2 ein Dateiname? (true\/false, default: false)');
                items.push(compareTextTEXT2_IS_FILECompletion);

                const compareTextENCODING_TEXT1Completion = new vscode.CompletionItem('ENCODING_TEXT1');
                compareTextENCODING_TEXT1Completion.kind = vscode.CompletionItemKind.Field;
                compareTextENCODING_TEXT1Completion.insertText = new vscode.SnippetString("ENCODING_TEXT1 = \"${1}\"");
                compareTextENCODING_TEXT1Completion.documentation = new vscode.MarkdownString('Falls TEXT1 eine Datei ist, mit welcher Kodierung soll diese eingelesen werden? (Default: UTF-8, Optionen: US-ASCII, ISO-8859-1, UTF-8, UTF-16BE, UTF-16LE, UTF-16)');
                items.push(compareTextENCODING_TEXT1Completion);

                const compareTextENCODING_TEXT2Completion = new vscode.CompletionItem('ENCODING_TEXT2');
                compareTextENCODING_TEXT2Completion.kind = vscode.CompletionItemKind.Field;
                compareTextENCODING_TEXT2Completion.insertText = new vscode.SnippetString("ENCODING_TEXT2 = \"${1}\"");
                compareTextENCODING_TEXT2Completion.documentation = new vscode.MarkdownString('Analog zu ENCODING_TEXT1 f\u00FCr TEXT2');
                items.push(compareTextENCODING_TEXT2Completion);

                const compareTextTRIM_LINESCompletion = new vscode.CompletionItem('TRIM_LINES');
                compareTextTRIM_LINESCompletion.kind = vscode.CompletionItemKind.Field;
                compareTextTRIM_LINESCompletion.insertText = new vscode.SnippetString("TRIM_LINES = \"${1}\"");
                compareTextTRIM_LINESCompletion.documentation = new vscode.MarkdownString('Sollen Leerzeichen an Anfang und Ende jeder Zeile vor Vergleich entfernt werden? (true\/false, default: false)');
                items.push(compareTextTRIM_LINESCompletion);

                const compareTextSKIP_EMPTY_LINESCompletion = new vscode.CompletionItem('SKIP_EMPTY_LINES');
                compareTextSKIP_EMPTY_LINESCompletion.kind = vscode.CompletionItemKind.Field;
                compareTextSKIP_EMPTY_LINESCompletion.insertText = new vscode.SnippetString("SKIP_EMPTY_LINES = \"${1}\"");
                compareTextSKIP_EMPTY_LINESCompletion.documentation = new vscode.MarkdownString('Sollen Leerzeilen aus den Texten bei Vergleich \u00FCbersprungen werden? (true\/false, default: false). Bsp: Beide Texte werden gerade in Zeile 2 verglichen. TEXT_2 hat in Zeile 2 eine Leerzeile, TEXT_1, Zeile 2 ist nicht leer. Dann wird stattdessen die n\u00E4chste Nicht-Leerzeile in TEXT_2 (z.B. TEXT_2, Zeile 4) mit TEXT_1, Zeile 2 verglichen. Die folgenden zu vergleichenden Zeilen verschieben sich analog. Im Beispielfall w\u00FCrde also als n\u00E4chstes TEXT_2, Zeile 5 mit TEXT_1, Zeile 3 verglichen werden.');
                items.push(compareTextSKIP_EMPTY_LINESCompletion);
            }

            if (/.*\s*containsAlpha\s*\(.*/.test(linePrefix)) {

                const containsAlphaTEXTCompletion = new vscode.CompletionItem('TEXT');
                containsAlphaTEXTCompletion.kind = vscode.CompletionItemKind.Field;
                containsAlphaTEXTCompletion.insertText = new vscode.SnippetString("TEXT = \"${1}\"");
                containsAlphaTEXTCompletion.documentation = new vscode.MarkdownString('Der Text, der den Wert enthalten soll');
                items.push(containsAlphaTEXTCompletion);

                const containsAlphaVALUECompletion = new vscode.CompletionItem('VALUE');
                containsAlphaVALUECompletion.kind = vscode.CompletionItemKind.Field;
                containsAlphaVALUECompletion.insertText = new vscode.SnippetString("VALUE = \"${1}\"");
                containsAlphaVALUECompletion.documentation = new vscode.MarkdownString('Wert, der enthalten sein soll');
                items.push(containsAlphaVALUECompletion);
            }

            if (/.*\s*continue\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*controlClick\s*\(.*/.test(linePrefix)) {

                const controlClickWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                controlClickWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                controlClickWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                controlClickWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Der Titel\/hWnd\/Klasse des Fensters, auf das zugegriffen werden soll.');
                items.push(controlClickWINDOW_NAMECompletion);

                const controlClickCONTROLCompletion = new vscode.CompletionItem('CONTROL');
                controlClickCONTROLCompletion.kind = vscode.CompletionItemKind.Field;
                controlClickCONTROLCompletion.insertText = new vscode.SnippetString("CONTROL = \"${1}\"");
                controlClickCONTROLCompletion.documentation = new vscode.MarkdownString('Die ID des Controls, das beeinflusst werden soll. ');
                items.push(controlClickCONTROLCompletion);

                const controlClickMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                controlClickMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                controlClickMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                controlClickMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('Die zu dr\u00FCckende Maustaste, left, right, middle, menu, primary, secondary. Standard ist left.');
                items.push(controlClickMOUSE_BUTTONCompletion);

                const controlClickXCompletion = new vscode.CompletionItem('X');
                controlClickXCompletion.kind = vscode.CompletionItemKind.Field;
                controlClickXCompletion.insertText = new vscode.SnippetString("X = \"${1}\"");
                controlClickXCompletion.documentation = new vscode.MarkdownString('Die x-Position innerhalb des Controls, die geklickt werden soll. Standard ist die Mitte');
                items.push(controlClickXCompletion);

                const controlClickYCompletion = new vscode.CompletionItem('Y');
                controlClickYCompletion.kind = vscode.CompletionItemKind.Field;
                controlClickYCompletion.insertText = new vscode.SnippetString("Y = \"${1}\"");
                controlClickYCompletion.documentation = new vscode.MarkdownString('LDie y-Position innerhalb des Controls, die geklickt werden soll. Standard ist die Mitte');
                items.push(controlClickYCompletion);
            }

            if (/.*\s*controlCommand\s*\(.*/.test(linePrefix)) {

                const controlCommandWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                controlCommandWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                controlCommandWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                controlCommandWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Der Titel\/hWnd\/Klasse des Fensters, auf das zugegriffen werden soll.');
                items.push(controlCommandWINDOW_NAMECompletion);

                const controlCommandCONTROLCompletion = new vscode.CompletionItem('CONTROL');
                controlCommandCONTROLCompletion.kind = vscode.CompletionItemKind.Field;
                controlCommandCONTROLCompletion.insertText = new vscode.SnippetString("CONTROL = \"${1}\"");
                controlCommandCONTROLCompletion.documentation = new vscode.MarkdownString('Die ID des Controls, das beeinflusst werden soll. ');
                items.push(controlCommandCONTROLCompletion);

                const controlCommandMODECompletion = new vscode.CompletionItem('MODE');
                controlCommandMODECompletion.kind = vscode.CompletionItemKind.Field;
                controlCommandMODECompletion.insertText = new vscode.SnippetString("MODE = \"${1}\"");
                controlCommandMODECompletion.documentation = new vscode.MarkdownString('Der zu sendende Modus (z.B. stringSelect). ');
                items.push(controlCommandMODECompletion);

                const controlCommandOPTION1Completion = new vscode.CompletionItem('OPTION1');
                controlCommandOPTION1Completion.kind = vscode.CompletionItemKind.Field;
                controlCommandOPTION1Completion.insertText = new vscode.SnippetString("OPTION1 = \"${1}\"");
                controlCommandOPTION1Completion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(controlCommandOPTION1Completion);

                const controlCommandTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                controlCommandTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                controlCommandTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                controlCommandTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Fenster-Text geschrieben werden soll.');
                items.push(controlCommandTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*controlDisable\s*\(.*/.test(linePrefix)) {

                const controlDisableWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                controlDisableWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                controlDisableWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                controlDisableWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Der Titel\/hWnd\/Klasse des Fensters, auf das zugegriffen werden soll.');
                items.push(controlDisableWINDOW_NAMECompletion);

                const controlDisableCONTROLCompletion = new vscode.CompletionItem('CONTROL');
                controlDisableCONTROLCompletion.kind = vscode.CompletionItemKind.Field;
                controlDisableCONTROLCompletion.insertText = new vscode.SnippetString("CONTROL = \"${1}\"");
                controlDisableCONTROLCompletion.documentation = new vscode.MarkdownString('Die ID des Controls, das beeinflusst werden soll. ');
                items.push(controlDisableCONTROLCompletion);
            }

            if (/.*\s*controlDoubleClick\s*\(.*/.test(linePrefix)) {

                const controlDoubleClickWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                controlDoubleClickWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                controlDoubleClickWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                controlDoubleClickWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Der Titel\/hWnd\/Klasse des Fensters, auf das zugegriffen werden soll.');
                items.push(controlDoubleClickWINDOW_NAMECompletion);

                const controlDoubleClickCONTROLCompletion = new vscode.CompletionItem('CONTROL');
                controlDoubleClickCONTROLCompletion.kind = vscode.CompletionItemKind.Field;
                controlDoubleClickCONTROLCompletion.insertText = new vscode.SnippetString("CONTROL = \"${1}\"");
                controlDoubleClickCONTROLCompletion.documentation = new vscode.MarkdownString('Die ID des Controls, das beeinflusst werden soll. ');
                items.push(controlDoubleClickCONTROLCompletion);

                const controlDoubleClickMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                controlDoubleClickMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                controlDoubleClickMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                controlDoubleClickMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('Die zu dr\u00FCckende Maustaste, left, right, middle, menu, primary, secondary. Standard ist left.');
                items.push(controlDoubleClickMOUSE_BUTTONCompletion);

                const controlDoubleClickXCompletion = new vscode.CompletionItem('X');
                controlDoubleClickXCompletion.kind = vscode.CompletionItemKind.Field;
                controlDoubleClickXCompletion.insertText = new vscode.SnippetString("X = \"${1}\"");
                controlDoubleClickXCompletion.documentation = new vscode.MarkdownString('Die x-Position innerhalb des Controls, die geklickt werden soll. Standard ist die Mitte');
                items.push(controlDoubleClickXCompletion);

                const controlDoubleClickYCompletion = new vscode.CompletionItem('Y');
                controlDoubleClickYCompletion.kind = vscode.CompletionItemKind.Field;
                controlDoubleClickYCompletion.insertText = new vscode.SnippetString("Y = \"${1}\"");
                controlDoubleClickYCompletion.documentation = new vscode.MarkdownString('LDie y-Position innerhalb des Controls, die geklickt werden soll. Standard ist die Mitte');
                items.push(controlDoubleClickYCompletion);
            }

            if (/.*\s*controlEnable\s*\(.*/.test(linePrefix)) {

                const controlEnableWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                controlEnableWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                controlEnableWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                controlEnableWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Der Titel\/hWnd\/Klasse des Fensters, auf das zugegriffen werden soll.');
                items.push(controlEnableWINDOW_NAMECompletion);

                const controlEnableCONTROLCompletion = new vscode.CompletionItem('CONTROL');
                controlEnableCONTROLCompletion.kind = vscode.CompletionItemKind.Field;
                controlEnableCONTROLCompletion.insertText = new vscode.SnippetString("CONTROL = \"${1}\"");
                controlEnableCONTROLCompletion.documentation = new vscode.MarkdownString('Die ID des Controls, das beeinflusst werden soll. ');
                items.push(controlEnableCONTROLCompletion);
            }

            if (/.*\s*controlFocus\s*\(.*/.test(linePrefix)) {

                const controlFocusWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                controlFocusWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                controlFocusWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                controlFocusWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Der Titel\/hWnd\/Klasse des Fensters, auf das zugegriffen werden soll.');
                items.push(controlFocusWINDOW_NAMECompletion);

                const controlFocusCONTROLCompletion = new vscode.CompletionItem('CONTROL');
                controlFocusCONTROLCompletion.kind = vscode.CompletionItemKind.Field;
                controlFocusCONTROLCompletion.insertText = new vscode.SnippetString("CONTROL = \"${1}\"");
                controlFocusCONTROLCompletion.documentation = new vscode.MarkdownString('Die ID des Controls, das beeinflusst werden soll. ');
                items.push(controlFocusCONTROLCompletion);
            }

            if (/.*\s*controlGetText\s*\(.*/.test(linePrefix)) {

                const controlGetTextWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                controlGetTextWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                controlGetTextWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                controlGetTextWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Der Titel\/hWnd\/Klasse des Fensters, auf das zugegriffen werden soll.');
                items.push(controlGetTextWINDOW_NAMECompletion);

                const controlGetTextCONTROLCompletion = new vscode.CompletionItem('CONTROL');
                controlGetTextCONTROLCompletion.kind = vscode.CompletionItemKind.Field;
                controlGetTextCONTROLCompletion.insertText = new vscode.SnippetString("CONTROL = \"${1}\"");
                controlGetTextCONTROLCompletion.documentation = new vscode.MarkdownString('Die ID des Controls, das beeinflusst werden soll. ');
                items.push(controlGetTextCONTROLCompletion);

                const controlGetTextTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                controlGetTextTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                controlGetTextTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                controlGetTextTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Fenster-Text geschrieben werden soll.');
                items.push(controlGetTextTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*controlHide\s*\(.*/.test(linePrefix)) {

                const controlHideWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                controlHideWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                controlHideWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                controlHideWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Der Titel\/hWnd\/Klasse des Fensters, auf das zugegriffen werden soll.');
                items.push(controlHideWINDOW_NAMECompletion);

                const controlHideCONTROLCompletion = new vscode.CompletionItem('CONTROL');
                controlHideCONTROLCompletion.kind = vscode.CompletionItemKind.Field;
                controlHideCONTROLCompletion.insertText = new vscode.SnippetString("CONTROL = \"${1}\"");
                controlHideCONTROLCompletion.documentation = new vscode.MarkdownString('Die ID des Controls, das beeinflusst werden soll. ');
                items.push(controlHideCONTROLCompletion);
            }

            if (/.*\s*controlListView\s*\(.*/.test(linePrefix)) {

                const controlListViewWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                controlListViewWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                controlListViewWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                controlListViewWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Der Titel\/hWnd\/Klasse des Fensters, auf das zugegriffen werden soll.');
                items.push(controlListViewWINDOW_NAMECompletion);

                const controlListViewCONTROLCompletion = new vscode.CompletionItem('CONTROL');
                controlListViewCONTROLCompletion.kind = vscode.CompletionItemKind.Field;
                controlListViewCONTROLCompletion.insertText = new vscode.SnippetString("CONTROL = \"${1}\"");
                controlListViewCONTROLCompletion.documentation = new vscode.MarkdownString('Die ID des Controls, das beeinflusst werden soll. ');
                items.push(controlListViewCONTROLCompletion);

                const controlListViewMODECompletion = new vscode.CompletionItem('MODE');
                controlListViewMODECompletion.kind = vscode.CompletionItemKind.Field;
                controlListViewMODECompletion.insertText = new vscode.SnippetString("MODE = \"${1}\"");
                controlListViewMODECompletion.documentation = new vscode.MarkdownString('Der zu sendende Modus (z.B. Select). ');
                items.push(controlListViewMODECompletion);

                const controlListViewOPTION1Completion = new vscode.CompletionItem('OPTION1');
                controlListViewOPTION1Completion.kind = vscode.CompletionItemKind.Field;
                controlListViewOPTION1Completion.insertText = new vscode.SnippetString("OPTION1 = \"${1}\"");
                controlListViewOPTION1Completion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(controlListViewOPTION1Completion);

                const controlListViewOPTION2Completion = new vscode.CompletionItem('OPTION2');
                controlListViewOPTION2Completion.kind = vscode.CompletionItemKind.Field;
                controlListViewOPTION2Completion.insertText = new vscode.SnippetString("OPTION2 = \"${1}\"");
                controlListViewOPTION2Completion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(controlListViewOPTION2Completion);

                const controlListViewTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                controlListViewTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                controlListViewTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                controlListViewTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Fenster-Text geschrieben werden soll.');
                items.push(controlListViewTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*controlSend\s*\(.*/.test(linePrefix)) {

                const controlSendWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                controlSendWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                controlSendWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                controlSendWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Der Titel\/hWnd\/Klasse des Fensters, auf das zugegriffen werden soll.');
                items.push(controlSendWINDOW_NAMECompletion);

                const controlSendCONTROLCompletion = new vscode.CompletionItem('CONTROL');
                controlSendCONTROLCompletion.kind = vscode.CompletionItemKind.Field;
                controlSendCONTROLCompletion.insertText = new vscode.SnippetString("CONTROL = \"${1}\"");
                controlSendCONTROLCompletion.documentation = new vscode.MarkdownString('Die ID des Controls, das beeinflusst werden soll. ');
                items.push(controlSendCONTROLCompletion);

                const controlSendTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                controlSendTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                controlSendTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                controlSendTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('Text der versendet werden soll. ');
                items.push(controlSendTEXT_TO_SENDCompletion);
            }

            if (/.*\s*controlSetText\s*\(.*/.test(linePrefix)) {

                const controlSetTextWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                controlSetTextWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                controlSetTextWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                controlSetTextWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Der Titel\/hWnd\/Klasse des Fensters, auf das zugegriffen werden soll.');
                items.push(controlSetTextWINDOW_NAMECompletion);

                const controlSetTextCONTROLCompletion = new vscode.CompletionItem('CONTROL');
                controlSetTextCONTROLCompletion.kind = vscode.CompletionItemKind.Field;
                controlSetTextCONTROLCompletion.insertText = new vscode.SnippetString("CONTROL = \"${1}\"");
                controlSetTextCONTROLCompletion.documentation = new vscode.MarkdownString('Die ID des Controls, das beeinflusst werden soll. ');
                items.push(controlSetTextCONTROLCompletion);

                const controlSetTextTEXT_TO_SETCompletion = new vscode.CompletionItem('TEXT_TO_SET');
                controlSetTextTEXT_TO_SETCompletion.kind = vscode.CompletionItemKind.Field;
                controlSetTextTEXT_TO_SETCompletion.insertText = new vscode.SnippetString("TEXT_TO_SET = \"${1}\"");
                controlSetTextTEXT_TO_SETCompletion.documentation = new vscode.MarkdownString('Text der gesetzt werden soll. ');
                items.push(controlSetTextTEXT_TO_SETCompletion);
            }

            if (/.*\s*controlShow\s*\(.*/.test(linePrefix)) {

                const controlShowWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                controlShowWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                controlShowWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                controlShowWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Der Titel\/hWnd\/Klasse des Fensters, auf das zugegriffen werden soll.');
                items.push(controlShowWINDOW_NAMECompletion);

                const controlShowCONTROLCompletion = new vscode.CompletionItem('CONTROL');
                controlShowCONTROLCompletion.kind = vscode.CompletionItemKind.Field;
                controlShowCONTROLCompletion.insertText = new vscode.SnippetString("CONTROL = \"${1}\"");
                controlShowCONTROLCompletion.documentation = new vscode.MarkdownString('Die ID des Controls, das beeinflusst werden soll. ');
                items.push(controlShowCONTROLCompletion);
            }

            if (/.*\s*controlTreeView\s*\(.*/.test(linePrefix)) {

                const controlTreeViewWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                controlTreeViewWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                controlTreeViewWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                controlTreeViewWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Der Titel\/hWnd\/Klasse des Fensters, auf das zugegriffen werden soll.');
                items.push(controlTreeViewWINDOW_NAMECompletion);

                const controlTreeViewCONTROLCompletion = new vscode.CompletionItem('CONTROL');
                controlTreeViewCONTROLCompletion.kind = vscode.CompletionItemKind.Field;
                controlTreeViewCONTROLCompletion.insertText = new vscode.SnippetString("CONTROL = \"${1}\"");
                controlTreeViewCONTROLCompletion.documentation = new vscode.MarkdownString('Die ID des Controls, das beeinflusst werden soll. ');
                items.push(controlTreeViewCONTROLCompletion);

                const controlTreeViewMODECompletion = new vscode.CompletionItem('MODE');
                controlTreeViewMODECompletion.kind = vscode.CompletionItemKind.Field;
                controlTreeViewMODECompletion.insertText = new vscode.SnippetString("MODE = \"${1}\"");
                controlTreeViewMODECompletion.documentation = new vscode.MarkdownString('Der zu sendende Modus (z.B. Select). ');
                items.push(controlTreeViewMODECompletion);

                const controlTreeViewOPTION1Completion = new vscode.CompletionItem('OPTION1');
                controlTreeViewOPTION1Completion.kind = vscode.CompletionItemKind.Field;
                controlTreeViewOPTION1Completion.insertText = new vscode.SnippetString("OPTION1 = \"${1}\"");
                controlTreeViewOPTION1Completion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(controlTreeViewOPTION1Completion);

                const controlTreeViewTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                controlTreeViewTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                controlTreeViewTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                controlTreeViewTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Fenster-Text geschrieben werden soll.');
                items.push(controlTreeViewTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*controlWaitFor\s*\(.*/.test(linePrefix)) {

                const controlWaitForWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                controlWaitForWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                controlWaitForWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                controlWaitForWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Der Titel\/hWnd\/Klasse des Fensters, auf das zugegriffen werden soll.');
                items.push(controlWaitForWINDOW_NAMECompletion);

                const controlWaitForCONTROLCompletion = new vscode.CompletionItem('CONTROL');
                controlWaitForCONTROLCompletion.kind = vscode.CompletionItemKind.Field;
                controlWaitForCONTROLCompletion.insertText = new vscode.SnippetString("CONTROL = \"${1}\"");
                controlWaitForCONTROLCompletion.documentation = new vscode.MarkdownString('Die ID des Controls, das beeinflusst werden soll. ');
                items.push(controlWaitForCONTROLCompletion);

                const controlWaitForMAX_SECONDS_TO_WAITCompletion = new vscode.CompletionItem('MAX_SECONDS_TO_WAIT');
                controlWaitForMAX_SECONDS_TO_WAITCompletion.kind = vscode.CompletionItemKind.Field;
                controlWaitForMAX_SECONDS_TO_WAITCompletion.insertText = new vscode.SnippetString("MAX_SECONDS_TO_WAIT = \"${1}\"");
                controlWaitForMAX_SECONDS_TO_WAITCompletion.documentation = new vscode.MarkdownString('Maximale Wartezeit bevor das Kommando mit Fehler abbricht.');
                items.push(controlWaitForMAX_SECONDS_TO_WAITCompletion);
            }

            if (/.*\s*convertExcelToCsv\s*\(.*/.test(linePrefix)) {

                const convertExcelToCsvFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                convertExcelToCsvFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                convertExcelToCsvFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                convertExcelToCsvFILENAMECompletion.documentation = new vscode.MarkdownString('Der vollst\u00E4ndige Dateipfad zur Excel-Datei, die konvertiert werden soll.');
                items.push(convertExcelToCsvFILENAMECompletion);

                const convertExcelToCsvSHEET_INDEXCompletion = new vscode.CompletionItem('SHEET_INDEX');
                convertExcelToCsvSHEET_INDEXCompletion.kind = vscode.CompletionItemKind.Field;
                convertExcelToCsvSHEET_INDEXCompletion.insertText = new vscode.SnippetString("SHEET_INDEX = \"${1}\"");
                convertExcelToCsvSHEET_INDEXCompletion.documentation = new vscode.MarkdownString('Index (Nummer) des Tabellenblatts das ausgegeben werden soll.');
                items.push(convertExcelToCsvSHEET_INDEXCompletion);

                const convertExcelToCsvDEST_FILENAMECompletion = new vscode.CompletionItem('DEST_FILENAME');
                convertExcelToCsvDEST_FILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                convertExcelToCsvDEST_FILENAMECompletion.insertText = new vscode.SnippetString("DEST_FILENAME = \"${1}\"");
                convertExcelToCsvDEST_FILENAMECompletion.documentation = new vscode.MarkdownString('Der vollst\u00E4ndige Pfad der Zieldatei.');
                items.push(convertExcelToCsvDEST_FILENAMECompletion);

                const convertExcelToCsvEVALUATE_FORMULASCompletion = new vscode.CompletionItem('EVALUATE_FORMULAS');
                convertExcelToCsvEVALUATE_FORMULASCompletion.kind = vscode.CompletionItemKind.Field;
                convertExcelToCsvEVALUATE_FORMULASCompletion.insertText = new vscode.SnippetString("EVALUATE_FORMULAS = \"${1}\"");
                convertExcelToCsvEVALUATE_FORMULASCompletion.documentation = new vscode.MarkdownString('True\/False gibt an, ob Formeln ausgewertet, oder als Formel     ausgegeben werden sollen (optional, standard=true)');
                items.push(convertExcelToCsvEVALUATE_FORMULASCompletion);
            }

            if (/.*\s*copyFile\s*\(.*/.test(linePrefix)) {

                const copyFileFILENAME_FROMCompletion = new vscode.CompletionItem('FILENAME_FROM');
                copyFileFILENAME_FROMCompletion.kind = vscode.CompletionItemKind.Field;
                copyFileFILENAME_FROMCompletion.insertText = new vscode.SnippetString("FILENAME_FROM = \"${1}\"");
                copyFileFILENAME_FROMCompletion.documentation = new vscode.MarkdownString('Quelle');
                items.push(copyFileFILENAME_FROMCompletion);

                const copyFileFILENAME_TOCompletion = new vscode.CompletionItem('FILENAME_TO');
                copyFileFILENAME_TOCompletion.kind = vscode.CompletionItemKind.Field;
                copyFileFILENAME_TOCompletion.insertText = new vscode.SnippetString("FILENAME_TO = \"${1}\"");
                copyFileFILENAME_TOCompletion.documentation = new vscode.MarkdownString('Ziel');
                items.push(copyFileFILENAME_TOCompletion);
            }

            if (/.*\s*copyTextCP\s*\(.*/.test(linePrefix)) {

                const copyTextCPTAB_COUNTCompletion = new vscode.CompletionItem('TAB_COUNT');
                copyTextCPTAB_COUNTCompletion.kind = vscode.CompletionItemKind.Field;
                copyTextCPTAB_COUNTCompletion.insertText = new vscode.SnippetString("TAB_COUNT = \"${1}\"");
                copyTextCPTAB_COUNTCompletion.documentation = new vscode.MarkdownString('Angabe, wie oft die Tabulator-Taste gedrueckt werden soll.');
                items.push(copyTextCPTAB_COUNTCompletion);

                const copyTextCPTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                copyTextCPTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                copyTextCPTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                copyTextCPTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Angabe, ob und wo der Clipboard Wert gespeichert werden soll.');
                items.push(copyTextCPTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*createDir\s*\(.*/.test(linePrefix)) {

                const createDirDIR_ABSOLUTE_PATHCompletion = new vscode.CompletionItem('DIR_ABSOLUTE_PATH');
                createDirDIR_ABSOLUTE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                createDirDIR_ABSOLUTE_PATHCompletion.insertText = new vscode.SnippetString("DIR_ABSOLUTE_PATH = \"${1}\"");
                createDirDIR_ABSOLUTE_PATHCompletion.documentation = new vscode.MarkdownString('Absoluter Pfad des Verzeichnisses, das erstellt werden soll');
                items.push(createDirDIR_ABSOLUTE_PATHCompletion);

                const createDirCREATE_PARENT_DIRSCompletion = new vscode.CompletionItem('CREATE_PARENT_DIRS');
                createDirCREATE_PARENT_DIRSCompletion.kind = vscode.CompletionItemKind.Field;
                createDirCREATE_PARENT_DIRSCompletion.insertText = new vscode.SnippetString("CREATE_PARENT_DIRS = \"${1}\"");
                createDirCREATE_PARENT_DIRSCompletion.documentation = new vscode.MarkdownString('Sollen nicht existierende \u00FCbergeordnete Ordner auch erstellt werden?       Falls \'false\' und \u00FCbergeordnete Ordner nicht existieren, schl\u00E4gt das Kommando fehl.       Falls \'true\', k\u00F6nnten bei einem anderweitig verursachten Fehlschlagen des Kommandos zumindest einige der \u00FCbergeordneten Verzeichnisse erstellt worden sein.      {true, false} Default: false');
                items.push(createDirCREATE_PARENT_DIRSCompletion);
            }

            if (/.*\s*csvToJson\s*\(.*/.test(linePrefix)) {

                const csvToJsonCSVCompletion = new vscode.CompletionItem('CSV');
                csvToJsonCSVCompletion.kind = vscode.CompletionItemKind.Field;
                csvToJsonCSVCompletion.insertText = new vscode.SnippetString("CSV = \"${1}\"");
                csvToJsonCSVCompletion.documentation = new vscode.MarkdownString('Inhalte im CSV Format oder Dateipfad');
                items.push(csvToJsonCSVCompletion);

                const csvToJsonIS_FILECompletion = new vscode.CompletionItem('IS_FILE');
                csvToJsonIS_FILECompletion.kind = vscode.CompletionItemKind.Field;
                csvToJsonIS_FILECompletion.insertText = new vscode.SnippetString("IS_FILE = \"${1}\"");
                csvToJsonIS_FILECompletion.documentation = new vscode.MarkdownString('Wenn true, wird ein Dateipfad zur CSV Datei erwartet. False per Default.');
                items.push(csvToJsonIS_FILECompletion);

                const csvToJsonTO_FILECompletion = new vscode.CompletionItem('TO_FILE');
                csvToJsonTO_FILECompletion.kind = vscode.CompletionItemKind.Field;
                csvToJsonTO_FILECompletion.insertText = new vscode.SnippetString("TO_FILE = \"${1}\"");
                csvToJsonTO_FILECompletion.documentation = new vscode.MarkdownString('Dateipfad, in welcher die json Datei gespeichert werden soll. Optional.');
                items.push(csvToJsonTO_FILECompletion);

                const csvToJsonTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                csvToJsonTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                csvToJsonTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                csvToJsonTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Element-Text geschrieben werden soll.');
                items.push(csvToJsonTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*deleteAllCookiesMobile\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*deleteCookiesWeb\s*\(.*/.test(linePrefix)) {

                const deleteCookiesWebURLCompletion = new vscode.CompletionItem('URL');
                deleteCookiesWebURLCompletion.kind = vscode.CompletionItemKind.Field;
                deleteCookiesWebURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                deleteCookiesWebURLCompletion.documentation = new vscode.MarkdownString('URL zu welcher die Cookies gel\u00F6scht werden sollen');
                items.push(deleteCookiesWebURLCompletion);

                const deleteCookiesWebCOOKIE_NAMECompletion = new vscode.CompletionItem('COOKIE_NAME');
                deleteCookiesWebCOOKIE_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                deleteCookiesWebCOOKIE_NAMECompletion.insertText = new vscode.SnippetString("COOKIE_NAME = \"${1}\"");
                deleteCookiesWebCOOKIE_NAMECompletion.documentation = new vscode.MarkdownString('Name des zu l\u00F6schenden Cookies');
                items.push(deleteCookiesWebCOOKIE_NAMECompletion);
            }

            if (/.*\s*deleteDir\s*\(.*/.test(linePrefix)) {

                const deleteDirFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                deleteDirFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                deleteDirFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                deleteDirFILENAMECompletion.documentation = new vscode.MarkdownString('Pfad zum Ordner, der gel\u00F6scht werden soll');
                items.push(deleteDirFILENAMECompletion);

                const deleteDirMUST_DELETECompletion = new vscode.CompletionItem('MUST_DELETE');
                deleteDirMUST_DELETECompletion.kind = vscode.CompletionItemKind.Field;
                deleteDirMUST_DELETECompletion.insertText = new vscode.SnippetString("MUST_DELETE = \"${1}\"");
                deleteDirMUST_DELETECompletion.documentation = new vscode.MarkdownString('Muss etwas gel\u00F6scht werden? {true, false} Wenn true, gibt das Kommando bei einem Fehlschlagen des L\u00F6schens einen Fehler zur\u00FCck. Default: true');
                items.push(deleteDirMUST_DELETECompletion);
            }

            if (/.*\s*deleteFile\s*\(.*/.test(linePrefix)) {

                const deleteFileFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                deleteFileFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                deleteFileFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                deleteFileFILENAMECompletion.documentation = new vscode.MarkdownString('Dateiname oder Ordnername. Falls Ordnername, werden alle Dateien im Ordner gel\u00F6scht');
                items.push(deleteFileFILENAMECompletion);

                const deleteFileMUST_DELETECompletion = new vscode.CompletionItem('MUST_DELETE');
                deleteFileMUST_DELETECompletion.kind = vscode.CompletionItemKind.Field;
                deleteFileMUST_DELETECompletion.insertText = new vscode.SnippetString("MUST_DELETE = \"${1}\"");
                deleteFileMUST_DELETECompletion.documentation = new vscode.MarkdownString('Muss etwas gel\u00F6scht werden? {true, false} Default: true');
                items.push(deleteFileMUST_DELETECompletion);

                const deleteFileOLDER_THAN_DAYSCompletion = new vscode.CompletionItem('OLDER_THAN_DAYS');
                deleteFileOLDER_THAN_DAYSCompletion.kind = vscode.CompletionItemKind.Field;
                deleteFileOLDER_THAN_DAYSCompletion.insertText = new vscode.SnippetString("OLDER_THAN_DAYS = \"${1}\"");
                deleteFileOLDER_THAN_DAYSCompletion.documentation = new vscode.MarkdownString('Alle Dateien in einem Verzeichnis (angegeben \u00FCber den FILENAME) l\u00F6schen, die \u00E4lter als die angegebene Zahl Tage sind.');
                items.push(deleteFileOLDER_THAN_DAYSCompletion);

                const deleteFileDELETE_DIRECTORYCompletion = new vscode.CompletionItem('DELETE_DIRECTORY');
                deleteFileDELETE_DIRECTORYCompletion.kind = vscode.CompletionItemKind.Field;
                deleteFileDELETE_DIRECTORYCompletion.insertText = new vscode.SnippetString("DELETE_DIRECTORY = \"${1}\"");
                deleteFileDELETE_DIRECTORYCompletion.documentation = new vscode.MarkdownString('{true, false} Wenn FILENAME den Pfad eines Ordners angibt und nicht nur die Inhalte des Ordners sondern auch der Ordner selbst gel\u00F6scht werden soll,       ist hier true anzugeben. Default: false');
                items.push(deleteFileDELETE_DIRECTORYCompletion);
            }

            if (/.*\s*deleteInText\s*\(.*/.test(linePrefix)) {

                const deleteInTextTEXT_OR_FILECompletion = new vscode.CompletionItem('TEXT_OR_FILE');
                deleteInTextTEXT_OR_FILECompletion.kind = vscode.CompletionItemKind.Field;
                deleteInTextTEXT_OR_FILECompletion.insertText = new vscode.SnippetString("TEXT_OR_FILE = \"${1}\"");
                deleteInTextTEXT_OR_FILECompletion.documentation = new vscode.MarkdownString('Vollst\u00E4ndiger Text oder Dateipfad');
                items.push(deleteInTextTEXT_OR_FILECompletion);

                const deleteInTextWORDCompletion = new vscode.CompletionItem('WORD');
                deleteInTextWORDCompletion.kind = vscode.CompletionItemKind.Field;
                deleteInTextWORDCompletion.insertText = new vscode.SnippetString("WORD = \"${1}\"");
                deleteInTextWORDCompletion.documentation = new vscode.MarkdownString('Zu l\u00F6schender Text');
                items.push(deleteInTextWORDCompletion);

                const deleteInTextIS_FILECompletion = new vscode.CompletionItem('IS_FILE');
                deleteInTextIS_FILECompletion.kind = vscode.CompletionItemKind.Field;
                deleteInTextIS_FILECompletion.insertText = new vscode.SnippetString("IS_FILE = \"${1}\"");
                deleteInTextIS_FILECompletion.documentation = new vscode.MarkdownString('Angabe, ob der zu erg\u00E4nzende Text ein Dateipfad ist. Default false');
                items.push(deleteInTextIS_FILECompletion);

                const deleteInTextTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                deleteInTextTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                deleteInTextTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                deleteInTextTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der resultierende Text geschrieben wird.');
                items.push(deleteInTextTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*deleteMail\s*\(.*/.test(linePrefix)) {

                const deleteMailSERVERCompletion = new vscode.CompletionItem('SERVER');
                deleteMailSERVERCompletion.kind = vscode.CompletionItemKind.Field;
                deleteMailSERVERCompletion.insertText = new vscode.SnippetString("SERVER = \"${1}\"");
                deleteMailSERVERCompletion.documentation = new vscode.MarkdownString('Servername des Mailanbieters.');
                items.push(deleteMailSERVERCompletion);

                const deleteMailUSERCompletion = new vscode.CompletionItem('USER');
                deleteMailUSERCompletion.kind = vscode.CompletionItemKind.Field;
                deleteMailUSERCompletion.insertText = new vscode.SnippetString("USER = \"${1}\"");
                deleteMailUSERCompletion.documentation = new vscode.MarkdownString('Benutzername f\u00FCr das Mailkonto');
                items.push(deleteMailUSERCompletion);

                const deleteMailPASSWORDCompletion = new vscode.CompletionItem('PASSWORD');
                deleteMailPASSWORDCompletion.kind = vscode.CompletionItemKind.Field;
                deleteMailPASSWORDCompletion.insertText = new vscode.SnippetString("PASSWORD = \"${1}\"");
                deleteMailPASSWORDCompletion.documentation = new vscode.MarkdownString('Passwort f\u00FCr das Mailkonto');
                items.push(deleteMailPASSWORDCompletion);

                const deleteMailFOLDERCompletion = new vscode.CompletionItem('FOLDER');
                deleteMailFOLDERCompletion.kind = vscode.CompletionItemKind.Field;
                deleteMailFOLDERCompletion.insertText = new vscode.SnippetString("FOLDER = \"${1}\"");
                deleteMailFOLDERCompletion.documentation = new vscode.MarkdownString('Name des Ordners, auf den zugegeriffen werden soll.');
                items.push(deleteMailFOLDERCompletion);

                const deleteMailSUBJECTCompletion = new vscode.CompletionItem('SUBJECT');
                deleteMailSUBJECTCompletion.kind = vscode.CompletionItemKind.Field;
                deleteMailSUBJECTCompletion.insertText = new vscode.SnippetString("SUBJECT = \"${1}\"");
                deleteMailSUBJECTCompletion.documentation = new vscode.MarkdownString('Betreff der Mail(s), die gel\u00F6scht werden soll(en).');
                items.push(deleteMailSUBJECTCompletion);

                const deleteMailSENDERCompletion = new vscode.CompletionItem('SENDER');
                deleteMailSENDERCompletion.kind = vscode.CompletionItemKind.Field;
                deleteMailSENDERCompletion.insertText = new vscode.SnippetString("SENDER = \"${1}\"");
                deleteMailSENDERCompletion.documentation = new vscode.MarkdownString('Absender-Adresse, von welcher empfangene E-Mails gel\u00F6scht werden sollen');
                items.push(deleteMailSENDERCompletion);

                const deleteMailMUST_DELETECompletion = new vscode.CompletionItem('MUST_DELETE');
                deleteMailMUST_DELETECompletion.kind = vscode.CompletionItemKind.Field;
                deleteMailMUST_DELETECompletion.insertText = new vscode.SnippetString("MUST_DELETE = \"${1}\"");
                deleteMailMUST_DELETECompletion.documentation = new vscode.MarkdownString('Der Parameter gibt an, ob Mails gefunden und gel\u00F6scht werden m\u00FCssen.      Bei \'false\' ist das L\u00F6schen also optional. {true\/false}');
                items.push(deleteMailMUST_DELETECompletion);

                const deleteMailPORTCompletion = new vscode.CompletionItem('PORT');
                deleteMailPORTCompletion.kind = vscode.CompletionItemKind.Field;
                deleteMailPORTCompletion.insertText = new vscode.SnippetString("PORT = \"${1}\"");
                deleteMailPORTCompletion.documentation = new vscode.MarkdownString('Port des Servers');
                items.push(deleteMailPORTCompletion);
            }

            if (/.*\s*do\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*doubleClickImageCP\s*\(.*/.test(linePrefix)) {

                const doubleClickImageCPIMAGE_PATHCompletion = new vscode.CompletionItem('IMAGE_PATH');
                doubleClickImageCPIMAGE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                doubleClickImageCPIMAGE_PATHCompletion.insertText = new vscode.SnippetString("IMAGE_PATH = \"${1}\"");
                doubleClickImageCPIMAGE_PATHCompletion.documentation = new vscode.MarkdownString('Gibt den Pfad zu dem Bild relativ zu der Testset-Datei an.');
                items.push(doubleClickImageCPIMAGE_PATHCompletion);

                const doubleClickImageCPBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                doubleClickImageCPBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                doubleClickImageCPBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                doubleClickImageCPBASEDIRCompletion.documentation = new vscode.MarkdownString('Gibt das Basisverzeichnis an.');
                items.push(doubleClickImageCPBASEDIRCompletion);

                const doubleClickImageCPOFFSET_XCompletion = new vscode.CompletionItem('OFFSET_X');
                doubleClickImageCPOFFSET_XCompletion.kind = vscode.CompletionItemKind.Field;
                doubleClickImageCPOFFSET_XCompletion.insertText = new vscode.SnippetString("OFFSET_X = \"${1}\"");
                doubleClickImageCPOFFSET_XCompletion.documentation = new vscode.MarkdownString('Offset vom Mittelpunkt des Bildes nach rechts (positiv) oder links (negativ)');
                items.push(doubleClickImageCPOFFSET_XCompletion);

                const doubleClickImageCPOFFSET_YCompletion = new vscode.CompletionItem('OFFSET_Y');
                doubleClickImageCPOFFSET_YCompletion.kind = vscode.CompletionItemKind.Field;
                doubleClickImageCPOFFSET_YCompletion.insertText = new vscode.SnippetString("OFFSET_Y = \"${1}\"");
                doubleClickImageCPOFFSET_YCompletion.documentation = new vscode.MarkdownString('Offset vom Mittelpunkt des Bildes nach unten (positiv) oder oben (negativ)');
                items.push(doubleClickImageCPOFFSET_YCompletion);
            }

            if (/.*\s*doubleClickImageWin\s*\(.*/.test(linePrefix)) {

                const doubleClickImageWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                doubleClickImageWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                doubleClickImageWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                doubleClickImageWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(doubleClickImageWinWINDOW_NAMECompletion);

                const doubleClickImageWinIMAGE_RELATIVE_PATHCompletion = new vscode.CompletionItem('IMAGE_RELATIVE_PATH');
                doubleClickImageWinIMAGE_RELATIVE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                doubleClickImageWinIMAGE_RELATIVE_PATHCompletion.insertText = new vscode.SnippetString("IMAGE_RELATIVE_PATH = \"${1}\"");
                doubleClickImageWinIMAGE_RELATIVE_PATHCompletion.documentation = new vscode.MarkdownString('Pfad zum Bild ');
                items.push(doubleClickImageWinIMAGE_RELATIVE_PATHCompletion);

                const doubleClickImageWinBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                doubleClickImageWinBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                doubleClickImageWinBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                doubleClickImageWinBASEDIRCompletion.documentation = new vscode.MarkdownString('Angabe des Basisverzeichnisses');
                items.push(doubleClickImageWinBASEDIRCompletion);

                const doubleClickImageWinRELATIVE_XCompletion = new vscode.CompletionItem('RELATIVE_X');
                doubleClickImageWinRELATIVE_XCompletion.kind = vscode.CompletionItemKind.Field;
                doubleClickImageWinRELATIVE_XCompletion.insertText = new vscode.SnippetString("RELATIVE_X = \"${1}\"");
                doubleClickImageWinRELATIVE_XCompletion.documentation = new vscode.MarkdownString('Verschiebung auf der X-Achse. Links: Negativ. Rechts: Positiv');
                items.push(doubleClickImageWinRELATIVE_XCompletion);

                const doubleClickImageWinRELATIVE_YCompletion = new vscode.CompletionItem('RELATIVE_Y');
                doubleClickImageWinRELATIVE_YCompletion.kind = vscode.CompletionItemKind.Field;
                doubleClickImageWinRELATIVE_YCompletion.insertText = new vscode.SnippetString("RELATIVE_Y = \"${1}\"");
                doubleClickImageWinRELATIVE_YCompletion.documentation = new vscode.MarkdownString('Verschiebung auf der Y-Achse. Oben: Negativ. Unten: Positiv');
                items.push(doubleClickImageWinRELATIVE_YCompletion);

                const doubleClickImageWinMATCH_MODECompletion = new vscode.CompletionItem('MATCH_MODE');
                doubleClickImageWinMATCH_MODECompletion.kind = vscode.CompletionItemKind.Field;
                doubleClickImageWinMATCH_MODECompletion.insertText = new vscode.SnippetString("MATCH_MODE = \"${1}\"");
                doubleClickImageWinMATCH_MODECompletion.documentation = new vscode.MarkdownString('M\u00F6gliche Werte sind eine der folgenden Ziffern oder das Wort \'RegEx\':\n       1 = Der Titel eines Fensters muss mit dem angegebenen WINDOW_NAME beginnen, um eine \u00DCbereinstimmung zu erzielen.\n       2 = Der Titel eines Fensters kann WINDOW_NAME an beliebiger Stelle enthalten, um eine \u00DCbereinstimmung zu erzielen.\n       3 = Der Titel eines Fensters muss genau mit WINDOW_NAME \u00FCbereinstimmen, um eine \u00DCbereinstimmung zu erzielen.\n       RegEx = WINDOW_NAME wird als regul\u00E4rer Ausdruck behandelt.');
                items.push(doubleClickImageWinMATCH_MODECompletion);
            }

            if (/.*\s*doubleclickWeb\s*\(.*/.test(linePrefix)) {

                const doubleclickWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                doubleclickWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                doubleclickWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                doubleclickWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(doubleclickWebBY_CRITERIACompletion);

                const doubleclickWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                doubleclickWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                doubleclickWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                doubleclickWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(doubleclickWebELEMENT_NAMECompletion);

                const doubleclickWebNEXT_ELEMENT_BY_CRITERIACompletion = new vscode.CompletionItem('NEXT_ELEMENT_BY_CRITERIA');
                doubleclickWebNEXT_ELEMENT_BY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                doubleclickWebNEXT_ELEMENT_BY_CRITERIACompletion.insertText = new vscode.SnippetString("NEXT_ELEMENT_BY_CRITERIA = \"${1}\"");
                doubleclickWebNEXT_ELEMENT_BY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das n\u00E4chste Element ermittelt werden soll.');
                items.push(doubleclickWebNEXT_ELEMENT_BY_CRITERIACompletion);

                const doubleclickWebNEXT_ELEMENT_NAMECompletion = new vscode.CompletionItem('NEXT_ELEMENT_NAME');
                doubleclickWebNEXT_ELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                doubleclickWebNEXT_ELEMENT_NAMECompletion.insertText = new vscode.SnippetString("NEXT_ELEMENT_NAME = \"${1}\"");
                doubleclickWebNEXT_ELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Name des n\u00E4chsten Elements, das nach dem Klicken auf das eigentliche Element verf\u00FCgbar sein soll.');
                items.push(doubleclickWebNEXT_ELEMENT_NAMECompletion);

                const doubleclickWebUSE_REAL_CLICKSCompletion = new vscode.CompletionItem('USE_REAL_CLICKS');
                doubleclickWebUSE_REAL_CLICKSCompletion.kind = vscode.CompletionItemKind.Field;
                doubleclickWebUSE_REAL_CLICKSCompletion.insertText = new vscode.SnippetString("USE_REAL_CLICKS = \"${1}\"");
                doubleclickWebUSE_REAL_CLICKSCompletion.documentation = new vscode.MarkdownString('Wenn true, werden zwei Selenium-Klicks einzeln hintereinander ausgef\u00FChrt. Wenn false, wird direkt die DoubleClick-Funktion von Selenium aufgerufen (Default: false).');
                items.push(doubleclickWebUSE_REAL_CLICKSCompletion);
            }

            if (/.*\s*dragAndDropWeb\s*\(.*/.test(linePrefix)) {

                const dragAndDropWebSTART_BY_CRITERIACompletion = new vscode.CompletionItem('START_BY_CRITERIA');
                dragAndDropWebSTART_BY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                dragAndDropWebSTART_BY_CRITERIACompletion.insertText = new vscode.SnippetString("START_BY_CRITERIA = \"${1}\"");
                dragAndDropWebSTART_BY_CRITERIACompletion.documentation = new vscode.MarkdownString('Suchstrategie f\u00FCr das Anfangselement.');
                items.push(dragAndDropWebSTART_BY_CRITERIACompletion);

                const dragAndDropWebSTART_ELEMENT_NAMECompletion = new vscode.CompletionItem('START_ELEMENT_NAME');
                dragAndDropWebSTART_ELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                dragAndDropWebSTART_ELEMENT_NAMECompletion.insertText = new vscode.SnippetString("START_ELEMENT_NAME = \"${1}\"");
                dragAndDropWebSTART_ELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Das Anfangselement.');
                items.push(dragAndDropWebSTART_ELEMENT_NAMECompletion);

                const dragAndDropWebEND_BY_CRITERIACompletion = new vscode.CompletionItem('END_BY_CRITERIA');
                dragAndDropWebEND_BY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                dragAndDropWebEND_BY_CRITERIACompletion.insertText = new vscode.SnippetString("END_BY_CRITERIA = \"${1}\"");
                dragAndDropWebEND_BY_CRITERIACompletion.documentation = new vscode.MarkdownString('Suchstrategie f\u00FCr das Zielelement.');
                items.push(dragAndDropWebEND_BY_CRITERIACompletion);

                const dragAndDropWebEND_ELEMENT_NAMECompletion = new vscode.CompletionItem('END_ELEMENT_NAME');
                dragAndDropWebEND_ELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                dragAndDropWebEND_ELEMENT_NAMECompletion.insertText = new vscode.SnippetString("END_ELEMENT_NAME = \"${1}\"");
                dragAndDropWebEND_ELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Das Zielelement.');
                items.push(dragAndDropWebEND_ELEMENT_NAMECompletion);

                const dragAndDropWebWITH_OFFSETCompletion = new vscode.CompletionItem('WITH_OFFSET');
                dragAndDropWebWITH_OFFSETCompletion.kind = vscode.CompletionItemKind.Field;
                dragAndDropWebWITH_OFFSETCompletion.insertText = new vscode.SnippetString("WITH_OFFSET = \"${1}\"");
                dragAndDropWebWITH_OFFSETCompletion.documentation = new vscode.MarkdownString('{true, false} Gibt an, ob mit Offset verschoben werden soll. Default: false.');
                items.push(dragAndDropWebWITH_OFFSETCompletion);

                const dragAndDropWebEND_OFFSET_XCompletion = new vscode.CompletionItem('END_OFFSET_X');
                dragAndDropWebEND_OFFSET_XCompletion.kind = vscode.CompletionItemKind.Field;
                dragAndDropWebEND_OFFSET_XCompletion.insertText = new vscode.SnippetString("END_OFFSET_X = \"${1}\"");
                dragAndDropWebEND_OFFSET_XCompletion.documentation = new vscode.MarkdownString('X-Offset');
                items.push(dragAndDropWebEND_OFFSET_XCompletion);

                const dragAndDropWebEND_OFFSET_YCompletion = new vscode.CompletionItem('END_OFFSET_Y');
                dragAndDropWebEND_OFFSET_YCompletion.kind = vscode.CompletionItemKind.Field;
                dragAndDropWebEND_OFFSET_YCompletion.insertText = new vscode.SnippetString("END_OFFSET_Y = \"${1}\"");
                dragAndDropWebEND_OFFSET_YCompletion.documentation = new vscode.MarkdownString('Y-Offset');
                items.push(dragAndDropWebEND_OFFSET_YCompletion);
            }

            if (/.*\s*dragByCoordinates\s*\(.*/.test(linePrefix)) {

                const dragByCoordinatesWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                dragByCoordinatesWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                dragByCoordinatesWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                dragByCoordinatesWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(dragByCoordinatesWINDOW_NAMECompletion);

                const dragByCoordinatesMOVE_FROM_XCompletion = new vscode.CompletionItem('MOVE_FROM_X');
                dragByCoordinatesMOVE_FROM_XCompletion.kind = vscode.CompletionItemKind.Field;
                dragByCoordinatesMOVE_FROM_XCompletion.insertText = new vscode.SnippetString("MOVE_FROM_X = \"${1}\"");
                dragByCoordinatesMOVE_FROM_XCompletion.documentation = new vscode.MarkdownString('Position (X-Koordinate), von wo aus das Bild verschoben werden soll.');
                items.push(dragByCoordinatesMOVE_FROM_XCompletion);

                const dragByCoordinatesMOVE_FROM_YCompletion = new vscode.CompletionItem('MOVE_FROM_Y');
                dragByCoordinatesMOVE_FROM_YCompletion.kind = vscode.CompletionItemKind.Field;
                dragByCoordinatesMOVE_FROM_YCompletion.insertText = new vscode.SnippetString("MOVE_FROM_Y = \"${1}\"");
                dragByCoordinatesMOVE_FROM_YCompletion.documentation = new vscode.MarkdownString('Position (Y-Koordinate), von wo aus das Bild verschoben werden soll.');
                items.push(dragByCoordinatesMOVE_FROM_YCompletion);

                const dragByCoordinatesMOVE_TO_XCompletion = new vscode.CompletionItem('MOVE_TO_X');
                dragByCoordinatesMOVE_TO_XCompletion.kind = vscode.CompletionItemKind.Field;
                dragByCoordinatesMOVE_TO_XCompletion.insertText = new vscode.SnippetString("MOVE_TO_X = \"${1}\"");
                dragByCoordinatesMOVE_TO_XCompletion.documentation = new vscode.MarkdownString('Position (X-Koordinate), wohin das Bild verschoben werden soll.');
                items.push(dragByCoordinatesMOVE_TO_XCompletion);

                const dragByCoordinatesMOVE_TO_YCompletion = new vscode.CompletionItem('MOVE_TO_Y');
                dragByCoordinatesMOVE_TO_YCompletion.kind = vscode.CompletionItemKind.Field;
                dragByCoordinatesMOVE_TO_YCompletion.insertText = new vscode.SnippetString("MOVE_TO_Y = \"${1}\"");
                dragByCoordinatesMOVE_TO_YCompletion.documentation = new vscode.MarkdownString('Position (Y-Koordinate), wohin das Bild verschoben werden soll.');
                items.push(dragByCoordinatesMOVE_TO_YCompletion);
            }

            if (/.*\s*dragByImageWin\s*\(.*/.test(linePrefix)) {

                const dragByImageWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                dragByImageWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                dragByImageWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                dragByImageWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(dragByImageWinWINDOW_NAMECompletion);

                const dragByImageWinSTART_IMAGE_RELATIVE_PATHCompletion = new vscode.CompletionItem('START_IMAGE_RELATIVE_PATH');
                dragByImageWinSTART_IMAGE_RELATIVE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                dragByImageWinSTART_IMAGE_RELATIVE_PATHCompletion.insertText = new vscode.SnippetString("START_IMAGE_RELATIVE_PATH = \"${1}\"");
                dragByImageWinSTART_IMAGE_RELATIVE_PATHCompletion.documentation = new vscode.MarkdownString('Pfad zum Startbild ');
                items.push(dragByImageWinSTART_IMAGE_RELATIVE_PATHCompletion);

                const dragByImageWinBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                dragByImageWinBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                dragByImageWinBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                dragByImageWinBASEDIRCompletion.documentation = new vscode.MarkdownString('Angabe des Basisverzeichnisses');
                items.push(dragByImageWinBASEDIRCompletion);

                const dragByImageWinMOVE_TO_XCompletion = new vscode.CompletionItem('MOVE_TO_X');
                dragByImageWinMOVE_TO_XCompletion.kind = vscode.CompletionItemKind.Field;
                dragByImageWinMOVE_TO_XCompletion.insertText = new vscode.SnippetString("MOVE_TO_X = \"${1}\"");
                dragByImageWinMOVE_TO_XCompletion.documentation = new vscode.MarkdownString('Position (X-Koordinate), wohin das Bild verschoben werden soll oder Offset bei Zielbild.');
                items.push(dragByImageWinMOVE_TO_XCompletion);

                const dragByImageWinMOVE_TO_YCompletion = new vscode.CompletionItem('MOVE_TO_Y');
                dragByImageWinMOVE_TO_YCompletion.kind = vscode.CompletionItemKind.Field;
                dragByImageWinMOVE_TO_YCompletion.insertText = new vscode.SnippetString("MOVE_TO_Y = \"${1}\"");
                dragByImageWinMOVE_TO_YCompletion.documentation = new vscode.MarkdownString('Position (Y-Koordinate), wohin das Bild verschoben werden soll oder Offset bei Zielbild.');
                items.push(dragByImageWinMOVE_TO_YCompletion);

                const dragByImageWinTARGET_IMAGE_RELATIVE_PATHCompletion = new vscode.CompletionItem('TARGET_IMAGE_RELATIVE_PATH');
                dragByImageWinTARGET_IMAGE_RELATIVE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                dragByImageWinTARGET_IMAGE_RELATIVE_PATHCompletion.insertText = new vscode.SnippetString("TARGET_IMAGE_RELATIVE_PATH = \"${1}\"");
                dragByImageWinTARGET_IMAGE_RELATIVE_PATHCompletion.documentation = new vscode.MarkdownString('Pfad zum Zielbild ');
                items.push(dragByImageWinTARGET_IMAGE_RELATIVE_PATHCompletion);

                const dragByImageWinMOVE_SPEEDCompletion = new vscode.CompletionItem('MOVE_SPEED');
                dragByImageWinMOVE_SPEEDCompletion.kind = vscode.CompletionItemKind.Field;
                dragByImageWinMOVE_SPEEDCompletion.insertText = new vscode.SnippetString("MOVE_SPEED = \"${1}\"");
                dragByImageWinMOVE_SPEEDCompletion.documentation = new vscode.MarkdownString('Mausgeschwindigkeit der Bewegung (0 schnell, 100 langsam, default 25)');
                items.push(dragByImageWinMOVE_SPEEDCompletion);
            }

            if (/.*\s*else\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*elseIf\s*\(.*/.test(linePrefix)) {

                const elseIfACCEPTABLE_RESULT_LEVELSCompletion = new vscode.CompletionItem('ACCEPTABLE_RESULT_LEVELS');
                elseIfACCEPTABLE_RESULT_LEVELSCompletion.kind = vscode.CompletionItemKind.Field;
                elseIfACCEPTABLE_RESULT_LEVELSCompletion.insertText = new vscode.SnippetString("ACCEPTABLE_RESULT_LEVELS = \"${1}\"");
                elseIfACCEPTABLE_RESULT_LEVELSCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(elseIfACCEPTABLE_RESULT_LEVELSCompletion);
            }

            if (/.*\s*empty\s*\(.*/.test(linePrefix)) {

                const emptyVALUECompletion = new vscode.CompletionItem('VALUE');
                emptyVALUECompletion.kind = vscode.CompletionItemKind.Field;
                emptyVALUECompletion.insertText = new vscode.SnippetString("VALUE = \"${1}\"");
                emptyVALUECompletion.documentation = new vscode.MarkdownString('Zu \u00FCberpr\u00FCfender Parameter');
                items.push(emptyVALUECompletion);
            }

            if (/.*\s*emptyOrUndeclared\s*\(.*/.test(linePrefix)) {

                const emptyOrUndeclaredVALUECompletion = new vscode.CompletionItem('VALUE');
                emptyOrUndeclaredVALUECompletion.kind = vscode.CompletionItemKind.Field;
                emptyOrUndeclaredVALUECompletion.insertText = new vscode.SnippetString("VALUE = \"${1}\"");
                emptyOrUndeclaredVALUECompletion.documentation = new vscode.MarkdownString('Zu \u00FCberpr\u00FCfender Parameter');
                items.push(emptyOrUndeclaredVALUECompletion);
            }

            if (/.*\s*endsWithAlpha\s*\(.*/.test(linePrefix)) {

                const endsWithAlphaTEXTCompletion = new vscode.CompletionItem('TEXT');
                endsWithAlphaTEXTCompletion.kind = vscode.CompletionItemKind.Field;
                endsWithAlphaTEXTCompletion.insertText = new vscode.SnippetString("TEXT = \"${1}\"");
                endsWithAlphaTEXTCompletion.documentation = new vscode.MarkdownString('Zu \u00FCberpr\u00FCfender Text.');
                items.push(endsWithAlphaTEXTCompletion);

                const endsWithAlphaSUFFIXCompletion = new vscode.CompletionItem('SUFFIX');
                endsWithAlphaSUFFIXCompletion.kind = vscode.CompletionItemKind.Field;
                endsWithAlphaSUFFIXCompletion.insertText = new vscode.SnippetString("SUFFIX = \"${1}\"");
                endsWithAlphaSUFFIXCompletion.documentation = new vscode.MarkdownString('M\u00F6glicher Teil-Text, mit dem TEXT endet.');
                items.push(endsWithAlphaSUFFIXCompletion);

                const endsWithAlphaTRIM_TEXTCompletion = new vscode.CompletionItem('TRIM_TEXT');
                endsWithAlphaTRIM_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                endsWithAlphaTRIM_TEXTCompletion.insertText = new vscode.SnippetString("TRIM_TEXT = \"${1}\"");
                endsWithAlphaTRIM_TEXTCompletion.documentation = new vscode.MarkdownString('Sollen vor- und nachgestellte Leerzeichen in TEXT ignoriert werden? {true, false} Default: true');
                items.push(endsWithAlphaTRIM_TEXTCompletion);

                const endsWithAlphaTRIM_SUFFIXCompletion = new vscode.CompletionItem('TRIM_SUFFIX');
                endsWithAlphaTRIM_SUFFIXCompletion.kind = vscode.CompletionItemKind.Field;
                endsWithAlphaTRIM_SUFFIXCompletion.insertText = new vscode.SnippetString("TRIM_SUFFIX = \"${1}\"");
                endsWithAlphaTRIM_SUFFIXCompletion.documentation = new vscode.MarkdownString('Sollen vor- und nachgestellte Leerzeichen in SUFFIX ignoriert werden? {true, false} Default: true');
                items.push(endsWithAlphaTRIM_SUFFIXCompletion);
            }

            if (/.*\s*equalsAlpha\s*\(.*/.test(linePrefix)) {

                const equalsAlphaLEFTCompletion = new vscode.CompletionItem('LEFT');
                equalsAlphaLEFTCompletion.kind = vscode.CompletionItemKind.Field;
                equalsAlphaLEFTCompletion.insertText = new vscode.SnippetString("LEFT = \"${1}\"");
                equalsAlphaLEFTCompletion.documentation = new vscode.MarkdownString('Parameter, der links vom Vergleichs-Operator stehen soll.{EMPTY} eingeben f\u00FCr ein leeres Parameter');
                items.push(equalsAlphaLEFTCompletion);

                const equalsAlphaRIGHTCompletion = new vscode.CompletionItem('RIGHT');
                equalsAlphaRIGHTCompletion.kind = vscode.CompletionItemKind.Field;
                equalsAlphaRIGHTCompletion.insertText = new vscode.SnippetString("RIGHT = \"${1}\"");
                equalsAlphaRIGHTCompletion.documentation = new vscode.MarkdownString('Parameter, der rechts vom Vergleichs-Operator stehen soll. {EMPTY} eingeben f\u00FCr ein leeres Parameter');
                items.push(equalsAlphaRIGHTCompletion);

                const equalsAlphaIGNORE_CASECompletion = new vscode.CompletionItem('IGNORE_CASE');
                equalsAlphaIGNORE_CASECompletion.kind = vscode.CompletionItemKind.Field;
                equalsAlphaIGNORE_CASECompletion.insertText = new vscode.SnippetString("IGNORE_CASE = \"${1}\"");
                equalsAlphaIGNORE_CASECompletion.documentation = new vscode.MarkdownString('Gro\u00DF- und Kleinschreibung soll ignoriert werden (Default: true)');
                items.push(equalsAlphaIGNORE_CASECompletion);

                const equalsAlphaTRIM_LEFTCompletion = new vscode.CompletionItem('TRIM_LEFT');
                equalsAlphaTRIM_LEFTCompletion.kind = vscode.CompletionItemKind.Field;
                equalsAlphaTRIM_LEFTCompletion.insertText = new vscode.SnippetString("TRIM_LEFT = \"${1}\"");
                equalsAlphaTRIM_LEFTCompletion.documentation = new vscode.MarkdownString('Leerzeichen an Beginn und Ende von LEFT vor dem Vergleich abschneiden (Default: false)');
                items.push(equalsAlphaTRIM_LEFTCompletion);

                const equalsAlphaTRIM_RIGHTCompletion = new vscode.CompletionItem('TRIM_RIGHT');
                equalsAlphaTRIM_RIGHTCompletion.kind = vscode.CompletionItemKind.Field;
                equalsAlphaTRIM_RIGHTCompletion.insertText = new vscode.SnippetString("TRIM_RIGHT = \"${1}\"");
                equalsAlphaTRIM_RIGHTCompletion.documentation = new vscode.MarkdownString('Leerzeichen an Beginn und Ende von RIGHT vor dem Vergleich abschneiden (Default: false)');
                items.push(equalsAlphaTRIM_RIGHTCompletion);
            }

            if (/.*\s*equalsAlphaIgnoreCase\s*\(.*/.test(linePrefix)) {

                const equalsAlphaIgnoreCaseTEXT1Completion = new vscode.CompletionItem('TEXT1');
                equalsAlphaIgnoreCaseTEXT1Completion.kind = vscode.CompletionItemKind.Field;
                equalsAlphaIgnoreCaseTEXT1Completion.insertText = new vscode.SnippetString("TEXT1 = \"${1}\"");
                equalsAlphaIgnoreCaseTEXT1Completion.documentation = new vscode.MarkdownString('Erstes Wort oder erster Text, der verglichen werden soll');
                items.push(equalsAlphaIgnoreCaseTEXT1Completion);

                const equalsAlphaIgnoreCaseTEXT2Completion = new vscode.CompletionItem('TEXT2');
                equalsAlphaIgnoreCaseTEXT2Completion.kind = vscode.CompletionItemKind.Field;
                equalsAlphaIgnoreCaseTEXT2Completion.insertText = new vscode.SnippetString("TEXT2 = \"${1}\"");
                equalsAlphaIgnoreCaseTEXT2Completion.documentation = new vscode.MarkdownString('Zweites Wort oder zweiter Text, der verglichen werden soll');
                items.push(equalsAlphaIgnoreCaseTEXT2Completion);
            }

            if (/.*\s*equalsDate\s*\(.*/.test(linePrefix)) {

                const equalsDateLEFTCompletion = new vscode.CompletionItem('LEFT');
                equalsDateLEFTCompletion.kind = vscode.CompletionItemKind.Field;
                equalsDateLEFTCompletion.insertText = new vscode.SnippetString("LEFT = \"${1}\"");
                equalsDateLEFTCompletion.documentation = new vscode.MarkdownString('Parameter, der links vom Vergleichs-Operator stehen soll.');
                items.push(equalsDateLEFTCompletion);

                const equalsDateRIGHTCompletion = new vscode.CompletionItem('RIGHT');
                equalsDateRIGHTCompletion.kind = vscode.CompletionItemKind.Field;
                equalsDateRIGHTCompletion.insertText = new vscode.SnippetString("RIGHT = \"${1}\"");
                equalsDateRIGHTCompletion.documentation = new vscode.MarkdownString('Parameter, der rechts vom Vergleichs-Operator stehen soll.');
                items.push(equalsDateRIGHTCompletion);
            }

            if (/.*\s*equalsNum\s*\(.*/.test(linePrefix)) {

                const equalsNumLEFTCompletion = new vscode.CompletionItem('LEFT');
                equalsNumLEFTCompletion.kind = vscode.CompletionItemKind.Field;
                equalsNumLEFTCompletion.insertText = new vscode.SnippetString("LEFT = \"${1}\"");
                equalsNumLEFTCompletion.documentation = new vscode.MarkdownString('Parameter, der links vom Vergleichs-Operator stehen soll.');
                items.push(equalsNumLEFTCompletion);

                const equalsNumRIGHTCompletion = new vscode.CompletionItem('RIGHT');
                equalsNumRIGHTCompletion.kind = vscode.CompletionItemKind.Field;
                equalsNumRIGHTCompletion.insertText = new vscode.SnippetString("RIGHT = \"${1}\"");
                equalsNumRIGHTCompletion.documentation = new vscode.MarkdownString('Parameter, der rechts vom Vergleichs-Operator stehen soll.');
                items.push(equalsNumRIGHTCompletion);

                const equalsNumEPSILONCompletion = new vscode.CompletionItem('EPSILON');
                equalsNumEPSILONCompletion.kind = vscode.CompletionItemKind.Field;
                equalsNumEPSILONCompletion.insertText = new vscode.SnippetString("EPSILON = \"${1}\"");
                equalsNumEPSILONCompletion.documentation = new vscode.MarkdownString('Optionaler Parameter, der angibt, um welchen Betrag LEFT und RIGHT voneinander abweichen d\u00FCrfen. Ist z. B. LEFT=3, RIGHT=5 und EPSILON=3, so schlie\u00DFt das Kommando noch stets mit dem Ergebnis \'Erfolgreich\' ab, da die Abweichung zwischen 3 und 5 bei 2 liegt und 2 kleiner al 3 ist. Sollte jedoch EPSILON=1 gelten, w\u00FCrde das Kommando mit dem Ergebnis \'Warnung\' abschlie\u00DFen, da die Abweichung von 2 nun gr\u00F6\u00DFer als das Epsilon von 1 w\u00E4re. Default: 0.0');
                items.push(equalsNumEPSILONCompletion);
            }

            if (/.*\s*equalsRegex\s*\(.*/.test(linePrefix)) {

                const equalsRegexLEFTCompletion = new vscode.CompletionItem('LEFT');
                equalsRegexLEFTCompletion.kind = vscode.CompletionItemKind.Field;
                equalsRegexLEFTCompletion.insertText = new vscode.SnippetString("LEFT = \"${1}\"");
                equalsRegexLEFTCompletion.documentation = new vscode.MarkdownString('String, in dem gesucht wird.');
                items.push(equalsRegexLEFTCompletion);

                const equalsRegexRIGHTCompletion = new vscode.CompletionItem('RIGHT');
                equalsRegexRIGHTCompletion.kind = vscode.CompletionItemKind.Field;
                equalsRegexRIGHTCompletion.insertText = new vscode.SnippetString("RIGHT = \"${1}\"");
                equalsRegexRIGHTCompletion.documentation = new vscode.MarkdownString('Regul\u00E4rer Ausdruck, nach dem gesucht wird.');
                items.push(equalsRegexRIGHTCompletion);

                const equalsRegexSHORT_OUTPUTCompletion = new vscode.CompletionItem('SHORT_OUTPUT');
                equalsRegexSHORT_OUTPUTCompletion.kind = vscode.CompletionItemKind.Field;
                equalsRegexSHORT_OUTPUTCompletion.insertText = new vscode.SnippetString("SHORT_OUTPUT = \"${1}\"");
                equalsRegexSHORT_OUTPUTCompletion.documentation = new vscode.MarkdownString('Falls true, wird der Inhalt des Parameters \'LEFT\' nicht in der Ergebnisnachricht im Report erw\u00E4hnt.');
                items.push(equalsRegexSHORT_OUTPUTCompletion);
            }

            if (/.*\s*evaluate\s*\(.*/.test(linePrefix)) {

                const evaluateFILEPATH_OR_SCRIPTCompletion = new vscode.CompletionItem('FILEPATH_OR_SCRIPT');
                evaluateFILEPATH_OR_SCRIPTCompletion.kind = vscode.CompletionItemKind.Field;
                evaluateFILEPATH_OR_SCRIPTCompletion.insertText = new vscode.SnippetString("FILEPATH_OR_SCRIPT = \"${1}\"");
                evaluateFILEPATH_OR_SCRIPTCompletion.documentation = new vscode.MarkdownString('Groovy-Skript, das ausgef\u00FChrt werden soll oder Pfad zu einer .groovy-Datei, die dieses Skript enth\u00E4lt.      Bei einem Dateipfad muss der Parameterwert mit \'.groovy\' enden. Der Pfad kann absolut oder auch relativ zum Verzeichnis angegeben werden, das das Testset enth\u00E4lt.       Verzeichnisnamen in absoluten Pfade d\u00FCrfen unter Unix\/Linux\/MacOS nur durch \'\/\' getrennt werden, nicht durch \'\'.                Handelt es sich um eine einzelne Rechenoperation, wird dieser Wert zur\u00FCckgegeben.      Bei komplexeren Skripten muss das return-Statement verwendet werden.      Soll im Skript ein Wert aus einer Storage Variable als String verwendet werden, so muss dieser      bereits mit single quotes, double quotes oder forward slashes versehen sein. Darauf ist      insbesondere zu achten, wenn die Variable bspw. in einer Schleife durch das Groovy Skript mehrfach      ver\u00E4ndert wird. Soll also die Groovy-Ausgabe in einer Storage Variable f\u00FCr weitere Skripte als Text      weiterverwendet werden, muss das Ergebnis entsprechend mit quotes versehen werden.');
                items.push(evaluateFILEPATH_OR_SCRIPTCompletion);

                const evaluateAVAILABLE_STORAGE_VARIABLESCompletion = new vscode.CompletionItem('AVAILABLE_STORAGE_VARIABLES');
                evaluateAVAILABLE_STORAGE_VARIABLESCompletion.kind = vscode.CompletionItemKind.Field;
                evaluateAVAILABLE_STORAGE_VARIABLESCompletion.insertText = new vscode.SnippetString("AVAILABLE_STORAGE_VARIABLES = \"${1}\"");
                evaluateAVAILABLE_STORAGE_VARIABLESCompletion.documentation = new vscode.MarkdownString('Angabe der Variablen aus der Storage-Datei, die im Groovy Script verf\u00FCgbar sein sollen.       Werden einzelne Variablennamen angegeben, sind diese durch einfaches Komma (,) zu trennen.      Bei Angabe von \'ALL\' werden alle Variablen, die aktuell in der Storage-Datei abgelegt sind, zur Verf\u00FCgung gestellt.      Im Groovy-Script k\u00F6nnen diese Variablen durch direkte Nennung wie native Groovy-Variablen verwendet werden.      Gibt es also zum Beispiel in der Storage-Dateu ein Schl\u00FCssel-Wert-Paar \'abc=123\'       und wird AVAILABLE_STORAGE_VARIABLES=ALL oder AVAILABLE_STORAGE_VARIABLES=abc gesetzt,       so f\u00FChrt eine Ausf\u00FChrung eines Groovy-Scripts wie \'return abc;\' zum R\u00FCckgabewert \'123\'.');
                items.push(evaluateAVAILABLE_STORAGE_VARIABLESCompletion);

                const evaluateBOOLEAN_CHECKCompletion = new vscode.CompletionItem('BOOLEAN_CHECK');
                evaluateBOOLEAN_CHECKCompletion.kind = vscode.CompletionItemKind.Field;
                evaluateBOOLEAN_CHECKCompletion.insertText = new vscode.SnippetString("BOOLEAN_CHECK = \"${1}\"");
                evaluateBOOLEAN_CHECKCompletion.documentation = new vscode.MarkdownString('Falls dieser Parameter den Wert \'true\', wird \u00FCberpr\u00FCft ob das Resultat der Auswertung des Groovy-Skripts den booleschen Wert \'true\' hat.      Sollte dies dann nicht der Fall sein, schl\u00E4gt das Kommando fehl.');
                items.push(evaluateBOOLEAN_CHECKCompletion);

                const evaluateADDITIONAL_CLASSPATHCompletion = new vscode.CompletionItem('ADDITIONAL_CLASSPATH');
                evaluateADDITIONAL_CLASSPATHCompletion.kind = vscode.CompletionItemKind.Field;
                evaluateADDITIONAL_CLASSPATHCompletion.insertText = new vscode.SnippetString("ADDITIONAL_CLASSPATH = \"${1}\"");
                evaluateADDITIONAL_CLASSPATHCompletion.documentation = new vscode.MarkdownString('Mit dieser Option k\u00F6nnen weitere Klassenpfade zur Groovy-Laufzeitumgebung hinzugef\u00FCgt werden, um weitere Bibliotheken einzuladen.\r\nWird mehr als ein Pfad ben\u00F6tigt, werden einzelne Eintr\u00E4ge mit einem Semikolon (`;`) voneinander getrennt. Etwaiger Whitespace vor und nach einem Semikolon sowie am Anfang und Ende des an diesen Parameter \u00FCbergebenen Wertes wird automatisch entfernt.\r\n**Hinweise:** Java-Quelldateien (i. d. R. `.java`) werden *nicht* automatisch geladen, sondern m\u00FCssen entweder \'lose\' als kompilierte `.class`-Dateien in einem \u00FCbergebenen Verzeichnis, oder zusammengefasst als `.jar`-Datei vorliegen. Etwaige `.jar`-Dateien m\u00FCssen *explizit einzeln* \u00FCbergeben werden (es reicht \u2013 im Gegensatz zu `.class`- und `.groovy`-Dateien \u2013 nicht, wenn Sie nur in einem \u00FCbergebenen Verzeichnis liegen).\r\n**Beispiel**\r\nMit diesem `ADDITIONAL_CLASSPATH`-Eintrag w\u00FCrden alle `.groovy`- und `.class`-Dateien aus dem Verzeichnis `D:\/lib` sowie die Datei `D:\/lib\/myLib.jar` zur Laufzeitumgebung hinzugef\u00FCgt werden:\r\n``` D:\/lib; D:\/lib\/myLib.jar ```');
                items.push(evaluateADDITIONAL_CLASSPATHCompletion);

                const evaluateRESOLVE_SCRIPTCompletion = new vscode.CompletionItem('RESOLVE_SCRIPT');
                evaluateRESOLVE_SCRIPTCompletion.kind = vscode.CompletionItemKind.Field;
                evaluateRESOLVE_SCRIPTCompletion.insertText = new vscode.SnippetString("RESOLVE_SCRIPT = \"${1}\"");
                evaluateRESOLVE_SCRIPTCompletion.documentation = new vscode.MarkdownString('Hier kann optional die Ersetzungen des Storage Resolver abgeschaltet werden, damit der Code exakt wie aus der Datei verwendet wird. Default ist: true (Resolution active)');
                items.push(evaluateRESOLVE_SCRIPTCompletion);

                const evaluateENCODING_TEXTCompletion = new vscode.CompletionItem('ENCODING_TEXT');
                evaluateENCODING_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                evaluateENCODING_TEXTCompletion.insertText = new vscode.SnippetString("ENCODING_TEXT = \"${1}\"");
                evaluateENCODING_TEXTCompletion.documentation = new vscode.MarkdownString('Hier kann optional angegeben werden, welche encoding unterst\u00FCtzt werden soll');
                items.push(evaluateENCODING_TEXTCompletion);

                const evaluateTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                evaluateTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                evaluateTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                evaluateTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein neuer Schl\u00FCssel gesetzt werden, unter dem der R\u00FCckgabewert der Groovy-Auswertung gespeichert wird.');
                items.push(evaluateTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*excelWriteCell\s*\(.*/.test(linePrefix)) {

                const excelWriteCellFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                excelWriteCellFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                excelWriteCellFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                excelWriteCellFILENAMECompletion.documentation = new vscode.MarkdownString('Pfad zur Excel-Datei, in die der \u00FCbergebene Wert eingetragen werden soll.');
                items.push(excelWriteCellFILENAMECompletion);

                const excelWriteCellSHEET_INDEXCompletion = new vscode.CompletionItem('SHEET_INDEX');
                excelWriteCellSHEET_INDEXCompletion.kind = vscode.CompletionItemKind.Field;
                excelWriteCellSHEET_INDEXCompletion.insertText = new vscode.SnippetString("SHEET_INDEX = \"${1}\"");
                excelWriteCellSHEET_INDEXCompletion.documentation = new vscode.MarkdownString('Index (Nummer) des Tabellenblatts in welches geschrieben werden soll.');
                items.push(excelWriteCellSHEET_INDEXCompletion);

                const excelWriteCellROW_INDEXCompletion = new vscode.CompletionItem('ROW_INDEX');
                excelWriteCellROW_INDEXCompletion.kind = vscode.CompletionItemKind.Field;
                excelWriteCellROW_INDEXCompletion.insertText = new vscode.SnippetString("ROW_INDEX = \"${1}\"");
                excelWriteCellROW_INDEXCompletion.documentation = new vscode.MarkdownString('Index (Nummer) der Zeile, in der sich die Zelle befindet, in welche der Wert     eingetragen werden soll, der mit Hilfe des 2. Parameters \u00FCbergeben wurde.');
                items.push(excelWriteCellROW_INDEXCompletion);

                const excelWriteCellCOLUMN_INDEXCompletion = new vscode.CompletionItem('COLUMN_INDEX');
                excelWriteCellCOLUMN_INDEXCompletion.kind = vscode.CompletionItemKind.Field;
                excelWriteCellCOLUMN_INDEXCompletion.insertText = new vscode.SnippetString("COLUMN_INDEX = \"${1}\"");
                excelWriteCellCOLUMN_INDEXCompletion.documentation = new vscode.MarkdownString('Index (Nummer) der Spalte, in der sich die Zelle befindet, in welche der Wert     eingetragen werden soll, der mit Hilfe des 2. Parameters \u00FCbergeben wurde.');
                items.push(excelWriteCellCOLUMN_INDEXCompletion);

                const excelWriteCellVALUECompletion = new vscode.CompletionItem('VALUE');
                excelWriteCellVALUECompletion.kind = vscode.CompletionItemKind.Field;
                excelWriteCellVALUECompletion.insertText = new vscode.SnippetString("VALUE = \"${1}\"");
                excelWriteCellVALUECompletion.documentation = new vscode.MarkdownString('Der zu schreibende Wert.');
                items.push(excelWriteCellVALUECompletion);
            }

            if (/.*\s*excelWriterFromDatabase\s*\(.*/.test(linePrefix)) {

                const excelWriterFromDatabaseJDBC_URLCompletion = new vscode.CompletionItem('JDBC_URL');
                excelWriterFromDatabaseJDBC_URLCompletion.kind = vscode.CompletionItemKind.Field;
                excelWriterFromDatabaseJDBC_URLCompletion.insertText = new vscode.SnippetString("JDBC_URL = \"${1}\"");
                excelWriterFromDatabaseJDBC_URLCompletion.documentation = new vscode.MarkdownString('JDBC URL der auszulesenden Datenbank. (Zu Setzen bei Verwendung einer Oracle DB)');
                items.push(excelWriterFromDatabaseJDBC_URLCompletion);

                const excelWriterFromDatabaseEXCEL_FILENAMECompletion = new vscode.CompletionItem('EXCEL_FILENAME');
                excelWriterFromDatabaseEXCEL_FILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                excelWriterFromDatabaseEXCEL_FILENAMECompletion.insertText = new vscode.SnippetString("EXCEL_FILENAME = \"${1}\"");
                excelWriterFromDatabaseEXCEL_FILENAMECompletion.documentation = new vscode.MarkdownString('Dateipfad der Ziel-Excel-Datei');
                items.push(excelWriterFromDatabaseEXCEL_FILENAMECompletion);

                const excelWriterFromDatabaseCONNECTION_NAMECompletion = new vscode.CompletionItem('CONNECTION_NAME');
                excelWriterFromDatabaseCONNECTION_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                excelWriterFromDatabaseCONNECTION_NAMECompletion.insertText = new vscode.SnippetString("CONNECTION_NAME = \"${1}\"");
                excelWriterFromDatabaseCONNECTION_NAMECompletion.documentation = new vscode.MarkdownString('Statt JDBC_URL zu setzen wenn keine Oracle DB verwendet wird.');
                items.push(excelWriterFromDatabaseCONNECTION_NAMECompletion);

                const excelWriterFromDatabaseSQL_STATEMENTCompletion = new vscode.CompletionItem('SQL_STATEMENT');
                excelWriterFromDatabaseSQL_STATEMENTCompletion.kind = vscode.CompletionItemKind.Field;
                excelWriterFromDatabaseSQL_STATEMENTCompletion.insertText = new vscode.SnippetString("SQL_STATEMENT = \"${1}\"");
                excelWriterFromDatabaseSQL_STATEMENTCompletion.documentation = new vscode.MarkdownString('Datenbankabfrage. Nur die erste Anfrage wird ausgef\u00FChrt.');
                items.push(excelWriterFromDatabaseSQL_STATEMENTCompletion);

                const excelWriterFromDatabaseSQL_JSON_PARAMETERSCompletion = new vscode.CompletionItem('SQL_JSON_PARAMETERS');
                excelWriterFromDatabaseSQL_JSON_PARAMETERSCompletion.kind = vscode.CompletionItemKind.Field;
                excelWriterFromDatabaseSQL_JSON_PARAMETERSCompletion.insertText = new vscode.SnippetString("SQL_JSON_PARAMETERS = \"${1}\"");
                excelWriterFromDatabaseSQL_JSON_PARAMETERSCompletion.documentation = new vscode.MarkdownString('Named Parameters in JSON-format zur Verwendung bei parametrisierten Statements, z. B. {name:Peter,age:30}');
                items.push(excelWriterFromDatabaseSQL_JSON_PARAMETERSCompletion);
            }

            if (/.*\s*executeApplicationWin\s*\(.*/.test(linePrefix)) {

                const executeApplicationWinEXPECTED_WINDOW_NAMECompletion = new vscode.CompletionItem('EXPECTED_WINDOW_NAME');
                executeApplicationWinEXPECTED_WINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                executeApplicationWinEXPECTED_WINDOW_NAMECompletion.insertText = new vscode.SnippetString("EXPECTED_WINDOW_NAME = \"${1}\"");
                executeApplicationWinEXPECTED_WINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das erwartet wird.');
                items.push(executeApplicationWinEXPECTED_WINDOW_NAMECompletion);

                const executeApplicationWinEXECUTABLE_PATHCompletion = new vscode.CompletionItem('EXECUTABLE_PATH');
                executeApplicationWinEXECUTABLE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                executeApplicationWinEXECUTABLE_PATHCompletion.insertText = new vscode.SnippetString("EXECUTABLE_PATH = \"${1}\"");
                executeApplicationWinEXECUTABLE_PATHCompletion.documentation = new vscode.MarkdownString('Dateipfad der Anwendung');
                items.push(executeApplicationWinEXECUTABLE_PATHCompletion);

                const executeApplicationWinPATH_IS_RELATIVECompletion = new vscode.CompletionItem('PATH_IS_RELATIVE');
                executeApplicationWinPATH_IS_RELATIVECompletion.kind = vscode.CompletionItemKind.Field;
                executeApplicationWinPATH_IS_RELATIVECompletion.insertText = new vscode.SnippetString("PATH_IS_RELATIVE = \"${1}\"");
                executeApplicationWinPATH_IS_RELATIVECompletion.documentation = new vscode.MarkdownString('Dateipfad wird relativ zum Skript angewendet, wenn auf \'true\' gesetzt');
                items.push(executeApplicationWinPATH_IS_RELATIVECompletion);

                const executeApplicationWinWAIT_MILLISECONDSCompletion = new vscode.CompletionItem('WAIT_MILLISECONDS');
                executeApplicationWinWAIT_MILLISECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                executeApplicationWinWAIT_MILLISECONDSCompletion.insertText = new vscode.SnippetString("WAIT_MILLISECONDS = \"${1}\"");
                executeApplicationWinWAIT_MILLISECONDSCompletion.documentation = new vscode.MarkdownString('Zeit (in Millisekunden), die gewartet werden soll, bis das Fenster offen ist. Falls das Fenster nicht in der Zeit ge\u00F6ffnet wird, wird das Kommando einen Fehler melden.');
                items.push(executeApplicationWinWAIT_MILLISECONDSCompletion);

                const executeApplicationWinMATCH_MODECompletion = new vscode.CompletionItem('MATCH_MODE');
                executeApplicationWinMATCH_MODECompletion.kind = vscode.CompletionItemKind.Field;
                executeApplicationWinMATCH_MODECompletion.insertText = new vscode.SnippetString("MATCH_MODE = \"${1}\"");
                executeApplicationWinMATCH_MODECompletion.documentation = new vscode.MarkdownString('M\u00F6gliche Werte sind eine der folgenden Ziffern oder das Wort \'RegEx\':\n       1 = Der Titel eines Fensters muss mit dem angegebenen WINDOW_NAME beginnen, um eine \u00DCbereinstimmung zu erzielen.\n       2 = Der Titel eines Fensters kann WINDOW_NAME an beliebiger Stelle enthalten, um eine \u00DCbereinstimmung zu erzielen.\n       3 = Der Titel eines Fensters muss genau mit WINDOW_NAME \u00FCbereinstimmen, um eine \u00DCbereinstimmung zu erzielen.\n       RegEx = WINDOW_NAME wird als regul\u00E4rer Ausdruck behandelt.');
                items.push(executeApplicationWinMATCH_MODECompletion);
            }

            if (/.*\s*executeJCL\s*\(.*/.test(linePrefix)) {

                const executeJCLJCLFILECompletion = new vscode.CompletionItem('JCLFILE');
                executeJCLJCLFILECompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLJCLFILECompletion.insertText = new vscode.SnippetString("JCLFILE = \"${1}\"");
                executeJCLJCLFILECompletion.documentation = new vscode.MarkdownString('Hochzuladene JCL');
                items.push(executeJCLJCLFILECompletion);

                const executeJCLUSERCompletion = new vscode.CompletionItem('USER');
                executeJCLUSERCompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLUSERCompletion.insertText = new vscode.SnippetString("USER = \"${1}\"");
                executeJCLUSERCompletion.documentation = new vscode.MarkdownString('Userkennung des Host');
                items.push(executeJCLUSERCompletion);

                const executeJCLPWCompletion = new vscode.CompletionItem('PW');
                executeJCLPWCompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLPWCompletion.insertText = new vscode.SnippetString("PW = \"${1}\"");
                executeJCLPWCompletion.documentation = new vscode.MarkdownString('Zugeh\u00F6riges Passwort des Hostusers');
                items.push(executeJCLPWCompletion);

                const executeJCLHOSTCompletion = new vscode.CompletionItem('HOST');
                executeJCLHOSTCompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLHOSTCompletion.insertText = new vscode.SnippetString("HOST = \"${1}\"");
                executeJCLHOSTCompletion.documentation = new vscode.MarkdownString('Host, an den die Datei gesendet werden soll');
                items.push(executeJCLHOSTCompletion);

                const executeJCLRETURNCODECompletion = new vscode.CompletionItem('RETURNCODE');
                executeJCLRETURNCODECompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLRETURNCODECompletion.insertText = new vscode.SnippetString("RETURNCODE = \"${1}\"");
                executeJCLRETURNCODECompletion.documentation = new vscode.MarkdownString('Returncode des Jobs, der erwartet wird');
                items.push(executeJCLRETURNCODECompletion);

                const executeJCLWAIT_TIMECompletion = new vscode.CompletionItem('WAIT_TIME');
                executeJCLWAIT_TIMECompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLWAIT_TIMECompletion.insertText = new vscode.SnippetString("WAIT_TIME = \"${1}\"");
                executeJCLWAIT_TIMECompletion.documentation = new vscode.MarkdownString('Zu wartende Zeit, bis der Job ausgef\u00FChrt wurde');
                items.push(executeJCLWAIT_TIMECompletion);

                const executeJCLCANCEL_ON_TIMEOUTCompletion = new vscode.CompletionItem('CANCEL_ON_TIMEOUT');
                executeJCLCANCEL_ON_TIMEOUTCompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLCANCEL_ON_TIMEOUTCompletion.insertText = new vscode.SnippetString("CANCEL_ON_TIMEOUT = \"${1}\"");
                executeJCLCANCEL_ON_TIMEOUTCompletion.documentation = new vscode.MarkdownString('Angabe, ob bei Timeout auch der Job auf dem Host beendet werden soll');
                items.push(executeJCLCANCEL_ON_TIMEOUTCompletion);

                const executeJCLDOWNLOAD_SYSOUTCompletion = new vscode.CompletionItem('DOWNLOAD_SYSOUT');
                executeJCLDOWNLOAD_SYSOUTCompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLDOWNLOAD_SYSOUTCompletion.insertText = new vscode.SnippetString("DOWNLOAD_SYSOUT = \"${1}\"");
                executeJCLDOWNLOAD_SYSOUTCompletion.documentation = new vscode.MarkdownString('Name der Sysout-File, die beim erfolgreichen Durchlauf der Sysout runtergeladen werden soll. Wenn leer gelassen wird, dann geschieht nichts.');
                items.push(executeJCLDOWNLOAD_SYSOUTCompletion);

                const executeJCLIS_FILE_SERVERPATHCompletion = new vscode.CompletionItem('IS_FILE_SERVERPATH');
                executeJCLIS_FILE_SERVERPATHCompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLIS_FILE_SERVERPATHCompletion.insertText = new vscode.SnippetString("IS_FILE_SERVERPATH = \"${1}\"");
                executeJCLIS_FILE_SERVERPATHCompletion.documentation = new vscode.MarkdownString('Angabe, ob die File Angabe auf einen Server zeigt statt eine jcl Datei zu enthalten. False per Default.');
                items.push(executeJCLIS_FILE_SERVERPATHCompletion);

                const executeJCLTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                executeJCLTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                executeJCLTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann ein neuer Schl\u00FCssel gesetzt werden, unter dem das Ergebnis dieser Operation gespeichert wird.');
                items.push(executeJCLTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*executeJCLConnected\s*\(.*/.test(linePrefix)) {

                const executeJCLConnectedJCLFILECompletion = new vscode.CompletionItem('JCLFILE');
                executeJCLConnectedJCLFILECompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLConnectedJCLFILECompletion.insertText = new vscode.SnippetString("JCLFILE = \"${1}\"");
                executeJCLConnectedJCLFILECompletion.documentation = new vscode.MarkdownString('Hochzuladene JCL');
                items.push(executeJCLConnectedJCLFILECompletion);

                const executeJCLConnectedUSERCompletion = new vscode.CompletionItem('USER');
                executeJCLConnectedUSERCompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLConnectedUSERCompletion.insertText = new vscode.SnippetString("USER = \"${1}\"");
                executeJCLConnectedUSERCompletion.documentation = new vscode.MarkdownString('Userkennung des Host');
                items.push(executeJCLConnectedUSERCompletion);

                const executeJCLConnectedCONNECTION_NAMECompletion = new vscode.CompletionItem('CONNECTION_NAME');
                executeJCLConnectedCONNECTION_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLConnectedCONNECTION_NAMECompletion.insertText = new vscode.SnippetString("CONNECTION_NAME = \"${1}\"");
                executeJCLConnectedCONNECTION_NAMECompletion.documentation = new vscode.MarkdownString('Verbindungsname');
                items.push(executeJCLConnectedCONNECTION_NAMECompletion);

                const executeJCLConnectedHOSTCompletion = new vscode.CompletionItem('HOST');
                executeJCLConnectedHOSTCompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLConnectedHOSTCompletion.insertText = new vscode.SnippetString("HOST = \"${1}\"");
                executeJCLConnectedHOSTCompletion.documentation = new vscode.MarkdownString('Host, an den die Datei gesendet werden soll');
                items.push(executeJCLConnectedHOSTCompletion);

                const executeJCLConnectedRETURNCODECompletion = new vscode.CompletionItem('RETURNCODE');
                executeJCLConnectedRETURNCODECompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLConnectedRETURNCODECompletion.insertText = new vscode.SnippetString("RETURNCODE = \"${1}\"");
                executeJCLConnectedRETURNCODECompletion.documentation = new vscode.MarkdownString('Returncode des Jobs, der erwartet wird');
                items.push(executeJCLConnectedRETURNCODECompletion);

                const executeJCLConnectedWAIT_TIMECompletion = new vscode.CompletionItem('WAIT_TIME');
                executeJCLConnectedWAIT_TIMECompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLConnectedWAIT_TIMECompletion.insertText = new vscode.SnippetString("WAIT_TIME = \"${1}\"");
                executeJCLConnectedWAIT_TIMECompletion.documentation = new vscode.MarkdownString('Zu wartende Zeit, bis der Job ausgef\u00FChrt wurde');
                items.push(executeJCLConnectedWAIT_TIMECompletion);

                const executeJCLConnectedCANCEL_ON_TIMEOUTCompletion = new vscode.CompletionItem('CANCEL_ON_TIMEOUT');
                executeJCLConnectedCANCEL_ON_TIMEOUTCompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLConnectedCANCEL_ON_TIMEOUTCompletion.insertText = new vscode.SnippetString("CANCEL_ON_TIMEOUT = \"${1}\"");
                executeJCLConnectedCANCEL_ON_TIMEOUTCompletion.documentation = new vscode.MarkdownString('Angabe, ob bei Timeout auch der Job auf dem Host beendet werden soll');
                items.push(executeJCLConnectedCANCEL_ON_TIMEOUTCompletion);

                const executeJCLConnectedDOWNLOAD_SYSOUTCompletion = new vscode.CompletionItem('DOWNLOAD_SYSOUT');
                executeJCLConnectedDOWNLOAD_SYSOUTCompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLConnectedDOWNLOAD_SYSOUTCompletion.insertText = new vscode.SnippetString("DOWNLOAD_SYSOUT = \"${1}\"");
                executeJCLConnectedDOWNLOAD_SYSOUTCompletion.documentation = new vscode.MarkdownString('Name der Sysout-File, die beim erfolgreichen Durchlauf der Sysout runtergeladen werden soll. Wenn leer gelassen wird, dann geschieht nichts.');
                items.push(executeJCLConnectedDOWNLOAD_SYSOUTCompletion);

                const executeJCLConnectedIS_FILE_SERVERPATHCompletion = new vscode.CompletionItem('IS_FILE_SERVERPATH');
                executeJCLConnectedIS_FILE_SERVERPATHCompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLConnectedIS_FILE_SERVERPATHCompletion.insertText = new vscode.SnippetString("IS_FILE_SERVERPATH = \"${1}\"");
                executeJCLConnectedIS_FILE_SERVERPATHCompletion.documentation = new vscode.MarkdownString('Angabe, ob die File Angabe auf einen Server zeigt statt eine jcl Datei zu enthalten. False per Default.');
                items.push(executeJCLConnectedIS_FILE_SERVERPATHCompletion);

                const executeJCLConnectedTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                executeJCLConnectedTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                executeJCLConnectedTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                executeJCLConnectedTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann ein neuer Schl\u00FCssel gesetzt werden, unter dem das Ergebnis dieser Operation gespeichert wird.');
                items.push(executeJCLConnectedTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*executeJava\s*\(.*/.test(linePrefix)) {

                const executeJavaTARGETCompletion = new vscode.CompletionItem('TARGET');
                executeJavaTARGETCompletion.kind = vscode.CompletionItemKind.Field;
                executeJavaTARGETCompletion.insertText = new vscode.SnippetString("TARGET = \"${1}\"");
                executeJavaTARGETCompletion.documentation = new vscode.MarkdownString('Ziel');
                items.push(executeJavaTARGETCompletion);

                const executeJavaPARAM1Completion = new vscode.CompletionItem('PARAM1');
                executeJavaPARAM1Completion.kind = vscode.CompletionItemKind.Field;
                executeJavaPARAM1Completion.insertText = new vscode.SnippetString("PARAM1 = \"${1}\"");
                executeJavaPARAM1Completion.documentation = new vscode.MarkdownString('Erster Parameter der Methode');
                items.push(executeJavaPARAM1Completion);

                const executeJavaPARAM2Completion = new vscode.CompletionItem('PARAM2');
                executeJavaPARAM2Completion.kind = vscode.CompletionItemKind.Field;
                executeJavaPARAM2Completion.insertText = new vscode.SnippetString("PARAM2 = \"${1}\"");
                executeJavaPARAM2Completion.documentation = new vscode.MarkdownString('Zweiter Parameter der Methode');
                items.push(executeJavaPARAM2Completion);

                const executeJavaPARAM3Completion = new vscode.CompletionItem('PARAM3');
                executeJavaPARAM3Completion.kind = vscode.CompletionItemKind.Field;
                executeJavaPARAM3Completion.insertText = new vscode.SnippetString("PARAM3 = \"${1}\"");
                executeJavaPARAM3Completion.documentation = new vscode.MarkdownString('Dritter Parameter der Methode');
                items.push(executeJavaPARAM3Completion);

                const executeJavaPARAM4Completion = new vscode.CompletionItem('PARAM4');
                executeJavaPARAM4Completion.kind = vscode.CompletionItemKind.Field;
                executeJavaPARAM4Completion.insertText = new vscode.SnippetString("PARAM4 = \"${1}\"");
                executeJavaPARAM4Completion.documentation = new vscode.MarkdownString('Vierter Parameter der Methode');
                items.push(executeJavaPARAM4Completion);

                const executeJavaWAIT_MILLISCompletion = new vscode.CompletionItem('WAIT_MILLIS');
                executeJavaWAIT_MILLISCompletion.kind = vscode.CompletionItemKind.Field;
                executeJavaWAIT_MILLISCompletion.insertText = new vscode.SnippetString("WAIT_MILLIS = \"${1}\"");
                executeJavaWAIT_MILLISCompletion.documentation = new vscode.MarkdownString('Optionale Anzahl zu wartender Millisekunden bis das Element verf\u00FCgbar ist. Default 10000.');
                items.push(executeJavaWAIT_MILLISCompletion);

                const executeJavaBY_NAMECompletion = new vscode.CompletionItem('BY_NAME');
                executeJavaBY_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                executeJavaBY_NAMECompletion.insertText = new vscode.SnippetString("BY_NAME = \"${1}\"");
                executeJavaBY_NAMECompletion.documentation = new vscode.MarkdownString('Flag, \u00FCber den gekennzeichnet werden kann, dass das Element \u00FCber den Namen und nicht den Identifier (z.B. JButton1) angesprochen wird.');
                items.push(executeJavaBY_NAMECompletion);

                const executeJavaMETHODCompletion = new vscode.CompletionItem('METHOD');
                executeJavaMETHODCompletion.kind = vscode.CompletionItemKind.Field;
                executeJavaMETHODCompletion.insertText = new vscode.SnippetString("METHOD = \"${1}\"");
                executeJavaMETHODCompletion.documentation = new vscode.MarkdownString('Auszuf\u00FChrende Methode der Komponente');
                items.push(executeJavaMETHODCompletion);

                const executeJavaTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                executeJavaTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                executeJavaTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                executeJavaTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Optionaler Key im Storage um den R\u00FCckgabewert zu speichern');
                items.push(executeJavaTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*executeSQL\s*\(.*/.test(linePrefix)) {

                const executeSQLJDBC_URLCompletion = new vscode.CompletionItem('JDBC_URL');
                executeSQLJDBC_URLCompletion.kind = vscode.CompletionItemKind.Field;
                executeSQLJDBC_URLCompletion.insertText = new vscode.SnippetString("JDBC_URL = \"${1}\"");
                executeSQLJDBC_URLCompletion.documentation = new vscode.MarkdownString('JDBC-URL zur Verbindung mit der Datenbank. Z. B. jdbc:mysql:\/\/localhost\/Test.');
                items.push(executeSQLJDBC_URLCompletion);

                const executeSQLDB_USERNAMECompletion = new vscode.CompletionItem('DB_USERNAME');
                executeSQLDB_USERNAMECompletion.kind = vscode.CompletionItemKind.Field;
                executeSQLDB_USERNAMECompletion.insertText = new vscode.SnippetString("DB_USERNAME = \"${1}\"");
                executeSQLDB_USERNAMECompletion.documentation = new vscode.MarkdownString('Name des DB-Users');
                items.push(executeSQLDB_USERNAMECompletion);

                const executeSQLDB_PASSWORDCompletion = new vscode.CompletionItem('DB_PASSWORD');
                executeSQLDB_PASSWORDCompletion.kind = vscode.CompletionItemKind.Field;
                executeSQLDB_PASSWORDCompletion.insertText = new vscode.SnippetString("DB_PASSWORD = \"${1}\"");
                executeSQLDB_PASSWORDCompletion.documentation = new vscode.MarkdownString('Passwort des DB-Users');
                items.push(executeSQLDB_PASSWORDCompletion);

                const executeSQLSQL_STATEMENT_OR_FILECompletion = new vscode.CompletionItem('SQL_STATEMENT_OR_FILE');
                executeSQLSQL_STATEMENT_OR_FILECompletion.kind = vscode.CompletionItemKind.Field;
                executeSQLSQL_STATEMENT_OR_FILECompletion.insertText = new vscode.SnippetString("SQL_STATEMENT_OR_FILE = \"${1}\"");
                executeSQLSQL_STATEMENT_OR_FILECompletion.documentation = new vscode.MarkdownString('2 M\u00F6glichkeiten:           1) Absoluter, vollst\u00E4ndig qualifizierter Dateiname (sollte als Separator immer \'\/\' verwenden) einer Datei, die ein oder mehrere auszuf\u00FChrende SQL-Statements enth\u00E4lt (Dateiendung muss .sql sein). Beispiel: C:\/sql\/commands.sql        2) Ein oder mehrere SQL-Statements. Mehrere SQL-statements sind durch \';\' zu trennen (wird nur eins vorgegeben, ist dies optional).');
                items.push(executeSQLSQL_STATEMENT_OR_FILECompletion);

                const executeSQLSQL_JSON_PARAMETERSCompletion = new vscode.CompletionItem('SQL_JSON_PARAMETERS');
                executeSQLSQL_JSON_PARAMETERSCompletion.kind = vscode.CompletionItemKind.Field;
                executeSQLSQL_JSON_PARAMETERSCompletion.insertText = new vscode.SnippetString("SQL_JSON_PARAMETERS = \"${1}\"");
                executeSQLSQL_JSON_PARAMETERSCompletion.documentation = new vscode.MarkdownString('Named Parameters in JSON-format zur Verwendung bei parametrisierten Statements, z. B. {\'name\':\'Peter\',\'age\':30}\'');
                items.push(executeSQLSQL_JSON_PARAMETERSCompletion);

                const executeSQLSQL_EXPECTED_RESULTCompletion = new vscode.CompletionItem('SQL_EXPECTED_RESULT');
                executeSQLSQL_EXPECTED_RESULTCompletion.kind = vscode.CompletionItemKind.Field;
                executeSQLSQL_EXPECTED_RESULTCompletion.insertText = new vscode.SnippetString("SQL_EXPECTED_RESULT = \"${1}\"");
                executeSQLSQL_EXPECTED_RESULTCompletion.documentation = new vscode.MarkdownString('String im JSON-Format, der mit dem Ergebnis der SQL statements verglichen wird.');
                items.push(executeSQLSQL_EXPECTED_RESULTCompletion);

                const executeSQLFAIL_ON_ERRORCompletion = new vscode.CompletionItem('FAIL_ON_ERROR');
                executeSQLFAIL_ON_ERRORCompletion.kind = vscode.CompletionItemKind.Field;
                executeSQLFAIL_ON_ERRORCompletion.insertText = new vscode.SnippetString("FAIL_ON_ERROR = \"${1}\"");
                executeSQLFAIL_ON_ERRORCompletion.documentation = new vscode.MarkdownString('Falls gesetzt (beliebiger Wert), resultiert ein Fehler bei der Ausf\u00FChrung eines SQL Statements in einem gescheiterten Testschritt.');
                items.push(executeSQLFAIL_ON_ERRORCompletion);

                const executeSQLJDBC_DRIVERCompletion = new vscode.CompletionItem('JDBC_DRIVER');
                executeSQLJDBC_DRIVERCompletion.kind = vscode.CompletionItemKind.Field;
                executeSQLJDBC_DRIVERCompletion.insertText = new vscode.SnippetString("JDBC_DRIVER = \"${1}\"");
                executeSQLJDBC_DRIVERCompletion.documentation = new vscode.MarkdownString('Sollte mit angegeben werden. Falls angegeben, wird der gegebene JDBC driver (z. B. com.mysql.jdbc.Driver) geladen. Sonst wird der Autoload-Mechanismus von JDBC 4.0 genutzt.');
                items.push(executeSQLJDBC_DRIVERCompletion);

                const executeSQLTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                executeSQLTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                executeSQLTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                executeSQLTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Falls angegeben, wird das Resultat in der durch diesen Schl\u00FCssel identifizierten Laufzeitvariable gespeichert (durch Hinzuf\u00FCgen oder Ersetzen). Das Resultat wird dabei im Format eines JSON-Array gespeichert, wobei jede zur\u00FCckgegebene Zeile einem Eintrag des JSON-Arrays entspricht. F\u00FCr den Sonderfall, das nur ein einzelner Wert aus einer einzelnen Zeile abgefragt wird, kann es notwendig sein, diesen vor der weiteren Verwendung zu parsen (z.B. wird anstelle des gesamten Ergebnisses [{\'ID\':123}] nur der Wert 123 ben\u00F6tigt. Dazu ist das Kommando changeStorageValue mit der Option extractSingleSqlResultFromJson zu verwenden.');
                items.push(executeSQLTARGET_STORAGE_KEYCompletion);

                const executeSQLENCODINGCompletion = new vscode.CompletionItem('ENCODING');
                executeSQLENCODINGCompletion.kind = vscode.CompletionItemKind.Field;
                executeSQLENCODINGCompletion.insertText = new vscode.SnippetString("ENCODING = \"${1}\"");
                executeSQLENCODINGCompletion.documentation = new vscode.MarkdownString('Encoding der Datei');
                items.push(executeSQLENCODINGCompletion);
            }

            if (/.*\s*executeSql\s*\(.*/.test(linePrefix)) {

                const executeSqlCONNECTION_NAMECompletion = new vscode.CompletionItem('CONNECTION_NAME');
                executeSqlCONNECTION_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                executeSqlCONNECTION_NAMECompletion.insertText = new vscode.SnippetString("CONNECTION_NAME = \"${1}\"");
                executeSqlCONNECTION_NAMECompletion.documentation = new vscode.MarkdownString('Name der bereits bestehenden Datenbankverbindung');
                items.push(executeSqlCONNECTION_NAMECompletion);

                const executeSqlSQL_STATEMENT_OR_FILECompletion = new vscode.CompletionItem('SQL_STATEMENT_OR_FILE');
                executeSqlSQL_STATEMENT_OR_FILECompletion.kind = vscode.CompletionItemKind.Field;
                executeSqlSQL_STATEMENT_OR_FILECompletion.insertText = new vscode.SnippetString("SQL_STATEMENT_OR_FILE = \"${1}\"");
                executeSqlSQL_STATEMENT_OR_FILECompletion.documentation = new vscode.MarkdownString('1) Absoluter, vollst\u00E4ndig qualifizierter Dateiname (sollte als Separator immer \'\/\' verwenden) einer Datei, die ein oder mehrere auszuf\u00FChrende SQL-Statements enth\u00E4lt (Dateiendung muss .sql sein). Beispiel: C:\/sql\/commands.sql        2) Ein oder mehrere SQL-Statements. Mehrere SQL-statements sind durch \';\' zu trennen (wird nur eins vorgegeben, ist dies optional).');
                items.push(executeSqlSQL_STATEMENT_OR_FILECompletion);

                const executeSqlEXECUTE_ENTIRE_FILE_AT_ONCECompletion = new vscode.CompletionItem('EXECUTE_ENTIRE_FILE_AT_ONCE');
                executeSqlEXECUTE_ENTIRE_FILE_AT_ONCECompletion.kind = vscode.CompletionItemKind.Field;
                executeSqlEXECUTE_ENTIRE_FILE_AT_ONCECompletion.insertText = new vscode.SnippetString("EXECUTE_ENTIRE_FILE_AT_ONCE = \"${1}\"");
                executeSqlEXECUTE_ENTIRE_FILE_AT_ONCECompletion.documentation = new vscode.MarkdownString('Ist der Wert f\u00FCr SQL_STATEMENT_OR_FILE ein Dateipfad und wurde dieser Parameter auf true gesetzt, erfolgt die gesamte Ausf\u00FChrung intern mit einem einzigen Befehl statt mit einem Befehl pro Zeile in der SQL-Datei. Dies kann bei einer Vielzahl von Zeilen zu einer besseren Performance f\u00FChren.');
                items.push(executeSqlEXECUTE_ENTIRE_FILE_AT_ONCECompletion);

                const executeSqlENCODINGCompletion = new vscode.CompletionItem('ENCODING');
                executeSqlENCODINGCompletion.kind = vscode.CompletionItemKind.Field;
                executeSqlENCODINGCompletion.insertText = new vscode.SnippetString("ENCODING = \"${1}\"");
                executeSqlENCODINGCompletion.documentation = new vscode.MarkdownString('Encoding der Datei');
                items.push(executeSqlENCODINGCompletion);
            }

            if (/.*\s*executeWindowsCommand\s*\(.*/.test(linePrefix)) {

                const executeWindowsCommandCOMMANDCompletion = new vscode.CompletionItem('COMMAND');
                executeWindowsCommandCOMMANDCompletion.kind = vscode.CompletionItemKind.Field;
                executeWindowsCommandCOMMANDCompletion.insertText = new vscode.SnippetString("COMMAND = \"${1}\"");
                executeWindowsCommandCOMMANDCompletion.documentation = new vscode.MarkdownString('Auszuf\u00FChrendes Kommandos');
                items.push(executeWindowsCommandCOMMANDCompletion);
            }

            if (/.*\s*expectAttributeMobile\s*\(.*/.test(linePrefix)) {

                const expectAttributeMobileBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                expectAttributeMobileBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                expectAttributeMobileBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                expectAttributeMobileBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll (m\u00F6glich sind: id, name, xpath, class_name, tag_name, link_name, partial_link_name, css, accessability_id, ios_automation). Der Default-Wert ist \'name\'.');
                items.push(expectAttributeMobileBY_CRITERIACompletion);

                const expectAttributeMobileEXPRESSION_TEXTCompletion = new vscode.CompletionItem('EXPRESSION_TEXT');
                expectAttributeMobileEXPRESSION_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                expectAttributeMobileEXPRESSION_TEXTCompletion.insertText = new vscode.SnippetString("EXPRESSION_TEXT = \"${1}\"");
                expectAttributeMobileEXPRESSION_TEXTCompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(expectAttributeMobileEXPRESSION_TEXTCompletion);

                const expectAttributeMobileEXPECTED_VALUECompletion = new vscode.CompletionItem('EXPECTED_VALUE');
                expectAttributeMobileEXPECTED_VALUECompletion.kind = vscode.CompletionItemKind.Field;
                expectAttributeMobileEXPECTED_VALUECompletion.insertText = new vscode.SnippetString("EXPECTED_VALUE = \"${1}\"");
                expectAttributeMobileEXPECTED_VALUECompletion.documentation = new vscode.MarkdownString('Der Parameter gibt den Soll-Wert des Attributs an.');
                items.push(expectAttributeMobileEXPECTED_VALUECompletion);

                const expectAttributeMobileWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                expectAttributeMobileWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                expectAttributeMobileWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                expectAttributeMobileWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Optionaler Parameter, der angibt, wie lange vor der Attributspr\u00FCfung gewartet werden soll bis das Kommando durchgef\u00FChrt wird. Der Parameter muss als positive, ganze Zahl angegeben werden. Der Default-Wert ist \'1\'.');
                items.push(expectAttributeMobileWAIT_SECONDSCompletion);

                const expectAttributeMobileATTRIBUTE_NAMECompletion = new vscode.CompletionItem('ATTRIBUTE_NAME');
                expectAttributeMobileATTRIBUTE_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                expectAttributeMobileATTRIBUTE_NAMECompletion.insertText = new vscode.SnippetString("ATTRIBUTE_NAME = \"${1}\"");
                expectAttributeMobileATTRIBUTE_NAMECompletion.documentation = new vscode.MarkdownString('Name des Attributs, das \u00FCberpr\u00FCft werden soll.');
                items.push(expectAttributeMobileATTRIBUTE_NAMECompletion);
            }

            if (/.*\s*expectDisplayedMobile\s*\(.*/.test(linePrefix)) {

                const expectDisplayedMobileBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                expectDisplayedMobileBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                expectDisplayedMobileBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                expectDisplayedMobileBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll (m\u00F6glich sind: id, name, xpath, class_name, tag_name, link_name, partial_link_name, css, accessability_id, ios_automation). Der Default-Wert ist \'name\'.');
                items.push(expectDisplayedMobileBY_CRITERIACompletion);

                const expectDisplayedMobileEXPRESSION_TEXTCompletion = new vscode.CompletionItem('EXPRESSION_TEXT');
                expectDisplayedMobileEXPRESSION_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                expectDisplayedMobileEXPRESSION_TEXTCompletion.insertText = new vscode.SnippetString("EXPRESSION_TEXT = \"${1}\"");
                expectDisplayedMobileEXPRESSION_TEXTCompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(expectDisplayedMobileEXPRESSION_TEXTCompletion);

                const expectDisplayedMobileEXPECTED_VALUECompletion = new vscode.CompletionItem('EXPECTED_VALUE');
                expectDisplayedMobileEXPECTED_VALUECompletion.kind = vscode.CompletionItemKind.Field;
                expectDisplayedMobileEXPECTED_VALUECompletion.insertText = new vscode.SnippetString("EXPECTED_VALUE = \"${1}\"");
                expectDisplayedMobileEXPECTED_VALUECompletion.documentation = new vscode.MarkdownString('Der Parameter gibt den Soll-Wert des Attributs an. M\u00F6gich sind: \'True\', oder \'False\'.');
                items.push(expectDisplayedMobileEXPECTED_VALUECompletion);

                const expectDisplayedMobileWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                expectDisplayedMobileWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                expectDisplayedMobileWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                expectDisplayedMobileWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Optionaler Parameter, der angibt, wie lange vor der Attributspr\u00FCfung gewartet werden soll bis das Kommando durchgef\u00FChrt wird. Der Parameter muss als positive, ganze Zahl angegeben werden. Der Default-Wert ist \'1\'.');
                items.push(expectDisplayedMobileWAIT_SECONDSCompletion);
            }

            if (/.*\s*expectEnabledMobile\s*\(.*/.test(linePrefix)) {

                const expectEnabledMobileBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                expectEnabledMobileBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                expectEnabledMobileBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                expectEnabledMobileBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll (m\u00F6glich sind: id, name, xpath, class_name, tag_name, link_name, partial_link_name, css, accessability_id, ios_automation). Der Default-Wert ist \'name\'.');
                items.push(expectEnabledMobileBY_CRITERIACompletion);

                const expectEnabledMobileEXPRESSION_TEXTCompletion = new vscode.CompletionItem('EXPRESSION_TEXT');
                expectEnabledMobileEXPRESSION_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                expectEnabledMobileEXPRESSION_TEXTCompletion.insertText = new vscode.SnippetString("EXPRESSION_TEXT = \"${1}\"");
                expectEnabledMobileEXPRESSION_TEXTCompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(expectEnabledMobileEXPRESSION_TEXTCompletion);

                const expectEnabledMobileEXPECTED_VALUECompletion = new vscode.CompletionItem('EXPECTED_VALUE');
                expectEnabledMobileEXPECTED_VALUECompletion.kind = vscode.CompletionItemKind.Field;
                expectEnabledMobileEXPECTED_VALUECompletion.insertText = new vscode.SnippetString("EXPECTED_VALUE = \"${1}\"");
                expectEnabledMobileEXPECTED_VALUECompletion.documentation = new vscode.MarkdownString('Der Parameter gibt den Soll-Wert des Attributs an. M\u00F6glich sind: \'True\', oder \'False\'.');
                items.push(expectEnabledMobileEXPECTED_VALUECompletion);

                const expectEnabledMobileWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                expectEnabledMobileWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                expectEnabledMobileWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                expectEnabledMobileWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Optionaler Parameter, der angibt, wie lange vor der Sperrungsspr\u00FCfung gewartet werden soll bis das Kommando durchgef\u00FChrt wird. Der Parameter muss als positive, ganze Zahl angegeben werden. Der Default-Wert ist \'1\'.');
                items.push(expectEnabledMobileWAIT_SECONDSCompletion);
            }

            if (/.*\s*expectNotSelectedMobile\s*\(.*/.test(linePrefix)) {

                const expectNotSelectedMobileBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                expectNotSelectedMobileBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                expectNotSelectedMobileBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                expectNotSelectedMobileBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll (m\u00F6glich sind: id, name, xpath, class_name, tag_name, link_name, partial_link_name, css, accessability_id, ios_automation). Der Default-Wert ist \'name\'.');
                items.push(expectNotSelectedMobileBY_CRITERIACompletion);

                const expectNotSelectedMobileEXPRESSION_TEXTCompletion = new vscode.CompletionItem('EXPRESSION_TEXT');
                expectNotSelectedMobileEXPRESSION_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                expectNotSelectedMobileEXPRESSION_TEXTCompletion.insertText = new vscode.SnippetString("EXPRESSION_TEXT = \"${1}\"");
                expectNotSelectedMobileEXPRESSION_TEXTCompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(expectNotSelectedMobileEXPRESSION_TEXTCompletion);

                const expectNotSelectedMobileWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                expectNotSelectedMobileWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                expectNotSelectedMobileWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                expectNotSelectedMobileWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Optionaler Parameter, der angibt, wie lange vor der Attributspr\u00FCfung gewartet werden soll bis das Kommando durchgef\u00FChrt wird. Der Parameter muss als positive, ganze Zahl angegeben werden. Der Default-Wert ist \'1\'.');
                items.push(expectNotSelectedMobileWAIT_SECONDSCompletion);
            }

            if (/.*\s*expectPresentMobile\s*\(.*/.test(linePrefix)) {

                const expectPresentMobileBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                expectPresentMobileBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                expectPresentMobileBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                expectPresentMobileBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll (m\u00F6glich sind: id, name, xpath, class_name, tag_name, link_name, partial_link_name, css, accessability_id, ios_automation). Der Default-Wert ist \'name\'.');
                items.push(expectPresentMobileBY_CRITERIACompletion);

                const expectPresentMobileEXPRESSION_TEXTCompletion = new vscode.CompletionItem('EXPRESSION_TEXT');
                expectPresentMobileEXPRESSION_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                expectPresentMobileEXPRESSION_TEXTCompletion.insertText = new vscode.SnippetString("EXPRESSION_TEXT = \"${1}\"");
                expectPresentMobileEXPRESSION_TEXTCompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(expectPresentMobileEXPRESSION_TEXTCompletion);

                const expectPresentMobileEXPECTED_VALUECompletion = new vscode.CompletionItem('EXPECTED_VALUE');
                expectPresentMobileEXPECTED_VALUECompletion.kind = vscode.CompletionItemKind.Field;
                expectPresentMobileEXPECTED_VALUECompletion.insertText = new vscode.SnippetString("EXPECTED_VALUE = \"${1}\"");
                expectPresentMobileEXPECTED_VALUECompletion.documentation = new vscode.MarkdownString('Der Parameter gibt den Soll-Wert des Attributs an. M\u00F6gich sind: \'True\', oder \'False\'.');
                items.push(expectPresentMobileEXPECTED_VALUECompletion);

                const expectPresentMobileWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                expectPresentMobileWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                expectPresentMobileWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                expectPresentMobileWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Optionaler Parameter, der angibt, wie lange vor der Attributspr\u00FCfung gewartet werden soll. Der Parameter muss als positive, ganze Zahl angegeben werden. Der Default-Wert ist \'1\'.');
                items.push(expectPresentMobileWAIT_SECONDSCompletion);
            }

            if (/.*\s*expectSelectedMobile\s*\(.*/.test(linePrefix)) {

                const expectSelectedMobileBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                expectSelectedMobileBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                expectSelectedMobileBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                expectSelectedMobileBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll (m\u00F6glich sind: id, name, xpath, class_name, tag_name, link_name, partial_link_name, css, accessability_id, ios_automation). Der Default-Wert ist \'name\'.');
                items.push(expectSelectedMobileBY_CRITERIACompletion);

                const expectSelectedMobileEXPRESSION_TEXTCompletion = new vscode.CompletionItem('EXPRESSION_TEXT');
                expectSelectedMobileEXPRESSION_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                expectSelectedMobileEXPRESSION_TEXTCompletion.insertText = new vscode.SnippetString("EXPRESSION_TEXT = \"${1}\"");
                expectSelectedMobileEXPRESSION_TEXTCompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(expectSelectedMobileEXPRESSION_TEXTCompletion);

                const expectSelectedMobileWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                expectSelectedMobileWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                expectSelectedMobileWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                expectSelectedMobileWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Optionaler Parameter, der angibt, wie lange vor der Attributspr\u00FCfung gewartet werden soll bis das Kommando durchgef\u00FChrt wird. Der Parameter muss als positive, ganze Zahl angegeben werden. Der Default-Wert ist \'1\'.');
                items.push(expectSelectedMobileWAIT_SECONDSCompletion);
            }

            if (/.*\s*expectTextMobile\s*\(.*/.test(linePrefix)) {

                const expectTextMobileBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                expectTextMobileBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                expectTextMobileBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                expectTextMobileBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll (m\u00F6glich sind: id, name, xpath, class_name, tag_name, link_name, partial_link_name, css, accessability_id, ios_automation). Der Default-Wert ist \'name\'.');
                items.push(expectTextMobileBY_CRITERIACompletion);

                const expectTextMobileEXPRESSION_TEXTCompletion = new vscode.CompletionItem('EXPRESSION_TEXT');
                expectTextMobileEXPRESSION_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                expectTextMobileEXPRESSION_TEXTCompletion.insertText = new vscode.SnippetString("EXPRESSION_TEXT = \"${1}\"");
                expectTextMobileEXPRESSION_TEXTCompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(expectTextMobileEXPRESSION_TEXTCompletion);

                const expectTextMobileEXPECTED_VALUECompletion = new vscode.CompletionItem('EXPECTED_VALUE');
                expectTextMobileEXPECTED_VALUECompletion.kind = vscode.CompletionItemKind.Field;
                expectTextMobileEXPECTED_VALUECompletion.insertText = new vscode.SnippetString("EXPECTED_VALUE = \"${1}\"");
                expectTextMobileEXPECTED_VALUECompletion.documentation = new vscode.MarkdownString('Der Parameter gibt an, welcher Text erwartet wird. Wird der Text nicht in dem Element gefunden, wird eine Warnung herausgegeben.');
                items.push(expectTextMobileEXPECTED_VALUECompletion);

                const expectTextMobileWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                expectTextMobileWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                expectTextMobileWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                expectTextMobileWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Optionaler Parameter, der angibt, wie lange gewartet werden soll bis nach dem Text gesucht werden soll. Der Parameter muss als positive, ganze Zahl angegeben werden. Der Default-Wert ist \'1\'.');
                items.push(expectTextMobileWAIT_SECONDSCompletion);
            }

            if (/.*\s*extractTextFromPDF\s*\(.*/.test(linePrefix)) {

                const extractTextFromPDFPDF_PATHCompletion = new vscode.CompletionItem('PDF_PATH');
                extractTextFromPDFPDF_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                extractTextFromPDFPDF_PATHCompletion.insertText = new vscode.SnippetString("PDF_PATH = \"${1}\"");
                extractTextFromPDFPDF_PATHCompletion.documentation = new vscode.MarkdownString('Pfad der zu durchsuchenden Datei');
                items.push(extractTextFromPDFPDF_PATHCompletion);

                const extractTextFromPDFPATH_IS_RELATIVECompletion = new vscode.CompletionItem('PATH_IS_RELATIVE');
                extractTextFromPDFPATH_IS_RELATIVECompletion.kind = vscode.CompletionItemKind.Field;
                extractTextFromPDFPATH_IS_RELATIVECompletion.insertText = new vscode.SnippetString("PATH_IS_RELATIVE = \"${1}\"");
                extractTextFromPDFPATH_IS_RELATIVECompletion.documentation = new vscode.MarkdownString('Wenn true, muss unter PDF_PATH nur der relative Pfad vom die Testset-XLSM beinahltenden Ordner ausgehend anagegeben werden');
                items.push(extractTextFromPDFPATH_IS_RELATIVECompletion);

                const extractTextFromPDFTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                extractTextFromPDFTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                extractTextFromPDFTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                extractTextFromPDFTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Name der Laufzeitvariablen, unter der der PDF Inhalt in der Storage-Datei abgelegt werden soll');
                items.push(extractTextFromPDFTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*fail\s*\(.*/.test(linePrefix)) {

                const failMESSAGECompletion = new vscode.CompletionItem('MESSAGE');
                failMESSAGECompletion.kind = vscode.CompletionItemKind.Field;
                failMESSAGECompletion.insertText = new vscode.SnippetString("MESSAGE = \"${1}\"");
                failMESSAGECompletion.documentation = new vscode.MarkdownString('Nachricht, die im Bericht angezeigt werden soll.');
                items.push(failMESSAGECompletion);
            }

            if (/.*\s*fileTextDiff\s*\(.*/.test(linePrefix)) {

                const fileTextDiffFILE_ONECompletion = new vscode.CompletionItem('FILE_ONE');
                fileTextDiffFILE_ONECompletion.kind = vscode.CompletionItemKind.Field;
                fileTextDiffFILE_ONECompletion.insertText = new vscode.SnippetString("FILE_ONE = \"${1}\"");
                fileTextDiffFILE_ONECompletion.documentation = new vscode.MarkdownString('Dateiname\/pfad der ersten Datei');
                items.push(fileTextDiffFILE_ONECompletion);

                const fileTextDiffFILE_TWOCompletion = new vscode.CompletionItem('FILE_TWO');
                fileTextDiffFILE_TWOCompletion.kind = vscode.CompletionItemKind.Field;
                fileTextDiffFILE_TWOCompletion.insertText = new vscode.SnippetString("FILE_TWO = \"${1}\"");
                fileTextDiffFILE_TWOCompletion.documentation = new vscode.MarkdownString('Dateiname\/pfad der zweiten Datei');
                items.push(fileTextDiffFILE_TWOCompletion);

                const fileTextDiffFILE_ONE_PATH_IS_RELATIVECompletion = new vscode.CompletionItem('FILE_ONE_PATH_IS_RELATIVE');
                fileTextDiffFILE_ONE_PATH_IS_RELATIVECompletion.kind = vscode.CompletionItemKind.Field;
                fileTextDiffFILE_ONE_PATH_IS_RELATIVECompletion.insertText = new vscode.SnippetString("FILE_ONE_PATH_IS_RELATIVE = \"${1}\"");
                fileTextDiffFILE_ONE_PATH_IS_RELATIVECompletion.documentation = new vscode.MarkdownString('Angabe, ob der Pfad relativ ist oder nicht (true oder false)');
                items.push(fileTextDiffFILE_ONE_PATH_IS_RELATIVECompletion);

                const fileTextDiffFILE_TWO_PATH_IS_RELATIVECompletion = new vscode.CompletionItem('FILE_TWO_PATH_IS_RELATIVE');
                fileTextDiffFILE_TWO_PATH_IS_RELATIVECompletion.kind = vscode.CompletionItemKind.Field;
                fileTextDiffFILE_TWO_PATH_IS_RELATIVECompletion.insertText = new vscode.SnippetString("FILE_TWO_PATH_IS_RELATIVE = \"${1}\"");
                fileTextDiffFILE_TWO_PATH_IS_RELATIVECompletion.documentation = new vscode.MarkdownString('Angabe, ob der Pfad relativ ist oder nicht (true oder false)');
                items.push(fileTextDiffFILE_TWO_PATH_IS_RELATIVECompletion);

                const fileTextDiffSAVE_RESULT_FILE_NAMECompletion = new vscode.CompletionItem('SAVE_RESULT_FILE_NAME');
                fileTextDiffSAVE_RESULT_FILE_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                fileTextDiffSAVE_RESULT_FILE_NAMECompletion.insertText = new vscode.SnippetString("SAVE_RESULT_FILE_NAME = \"${1}\"");
                fileTextDiffSAVE_RESULT_FILE_NAMECompletion.documentation = new vscode.MarkdownString('Dateiname in die das Ergebnis geschrieben wird (relativ)');
                items.push(fileTextDiffSAVE_RESULT_FILE_NAMECompletion);

                const fileTextDiffTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                fileTextDiffTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                fileTextDiffTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                fileTextDiffTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein neuer Schl\u00FCssel gesetzt werden, unter dem das Ergebnis dieser Operation gespeichert wird.');
                items.push(fileTextDiffTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*findAndClickAndSendWin\s*\(.*/.test(linePrefix)) {

                const findAndClickAndSendWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                findAndClickAndSendWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                findAndClickAndSendWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                findAndClickAndSendWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(findAndClickAndSendWinWINDOW_NAMECompletion);

                const findAndClickAndSendWinIMAGE_RELATIVE_PATHCompletion = new vscode.CompletionItem('IMAGE_RELATIVE_PATH');
                findAndClickAndSendWinIMAGE_RELATIVE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                findAndClickAndSendWinIMAGE_RELATIVE_PATHCompletion.insertText = new vscode.SnippetString("IMAGE_RELATIVE_PATH = \"${1}\"");
                findAndClickAndSendWinIMAGE_RELATIVE_PATHCompletion.documentation = new vscode.MarkdownString('Pfad zum Bild ');
                items.push(findAndClickAndSendWinIMAGE_RELATIVE_PATHCompletion);

                const findAndClickAndSendWinBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                findAndClickAndSendWinBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                findAndClickAndSendWinBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                findAndClickAndSendWinBASEDIRCompletion.documentation = new vscode.MarkdownString('Angabe des Basisverzeichnisses');
                items.push(findAndClickAndSendWinBASEDIRCompletion);

                const findAndClickAndSendWinTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                findAndClickAndSendWinTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                findAndClickAndSendWinTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                findAndClickAndSendWinTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('zu sendender (schreibender) Text');
                items.push(findAndClickAndSendWinTEXT_TO_SENDCompletion);

                const findAndClickAndSendWinMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                findAndClickAndSendWinMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                findAndClickAndSendWinMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                findAndClickAndSendWinMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('{links,rechts} links ist default, muss daher nicht angegeben werden.');
                items.push(findAndClickAndSendWinMOUSE_BUTTONCompletion);

                const findAndClickAndSendWinRELATIVE_XCompletion = new vscode.CompletionItem('RELATIVE_X');
                findAndClickAndSendWinRELATIVE_XCompletion.kind = vscode.CompletionItemKind.Field;
                findAndClickAndSendWinRELATIVE_XCompletion.insertText = new vscode.SnippetString("RELATIVE_X = \"${1}\"");
                findAndClickAndSendWinRELATIVE_XCompletion.documentation = new vscode.MarkdownString('Verschiebung auf der X-Achse. Links: Negativ. Rechts: Positiv');
                items.push(findAndClickAndSendWinRELATIVE_XCompletion);

                const findAndClickAndSendWinRELATIVE_YCompletion = new vscode.CompletionItem('RELATIVE_Y');
                findAndClickAndSendWinRELATIVE_YCompletion.kind = vscode.CompletionItemKind.Field;
                findAndClickAndSendWinRELATIVE_YCompletion.insertText = new vscode.SnippetString("RELATIVE_Y = \"${1}\"");
                findAndClickAndSendWinRELATIVE_YCompletion.documentation = new vscode.MarkdownString('Verschiebung auf der Y-Achse. Oben: Negativ. Unten: Positiv');
                items.push(findAndClickAndSendWinRELATIVE_YCompletion);
            }

            if (/.*\s*findAndClickWin\s*\(.*/.test(linePrefix)) {

                const findAndClickWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                findAndClickWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                findAndClickWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                findAndClickWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(findAndClickWinWINDOW_NAMECompletion);

                const findAndClickWinIMAGE_RELATIVE_PATHCompletion = new vscode.CompletionItem('IMAGE_RELATIVE_PATH');
                findAndClickWinIMAGE_RELATIVE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                findAndClickWinIMAGE_RELATIVE_PATHCompletion.insertText = new vscode.SnippetString("IMAGE_RELATIVE_PATH = \"${1}\"");
                findAndClickWinIMAGE_RELATIVE_PATHCompletion.documentation = new vscode.MarkdownString('Pfad zum Bild ');
                items.push(findAndClickWinIMAGE_RELATIVE_PATHCompletion);

                const findAndClickWinBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                findAndClickWinBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                findAndClickWinBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                findAndClickWinBASEDIRCompletion.documentation = new vscode.MarkdownString('Angabe des Basisverzeichnisses');
                items.push(findAndClickWinBASEDIRCompletion);

                const findAndClickWinMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                findAndClickWinMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                findAndClickWinMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                findAndClickWinMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('{links,rechts} links ist default, muss daher nicht angegeben werden.');
                items.push(findAndClickWinMOUSE_BUTTONCompletion);

                const findAndClickWinRELATIVE_XCompletion = new vscode.CompletionItem('RELATIVE_X');
                findAndClickWinRELATIVE_XCompletion.kind = vscode.CompletionItemKind.Field;
                findAndClickWinRELATIVE_XCompletion.insertText = new vscode.SnippetString("RELATIVE_X = \"${1}\"");
                findAndClickWinRELATIVE_XCompletion.documentation = new vscode.MarkdownString('Verschiebung auf der X-Achse. Links: Negativ. Rechts: Positiv');
                items.push(findAndClickWinRELATIVE_XCompletion);

                const findAndClickWinRELATIVE_YCompletion = new vscode.CompletionItem('RELATIVE_Y');
                findAndClickWinRELATIVE_YCompletion.kind = vscode.CompletionItemKind.Field;
                findAndClickWinRELATIVE_YCompletion.insertText = new vscode.SnippetString("RELATIVE_Y = \"${1}\"");
                findAndClickWinRELATIVE_YCompletion.documentation = new vscode.MarkdownString('Verschiebung auf der Y-Achse. Oben: Negativ. Unten: Positiv');
                items.push(findAndClickWinRELATIVE_YCompletion);
            }

            if (/.*\s*findPictureLocation\s*\(.*/.test(linePrefix)) {

                const findPictureLocationIMAGE_PATHCompletion = new vscode.CompletionItem('IMAGE_PATH');
                findPictureLocationIMAGE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationIMAGE_PATHCompletion.insertText = new vscode.SnippetString("IMAGE_PATH = \"${1}\"");
                findPictureLocationIMAGE_PATHCompletion.documentation = new vscode.MarkdownString('Relativer Pfad zu dem Bild');
                items.push(findPictureLocationIMAGE_PATHCompletion);

                const findPictureLocationBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                findPictureLocationBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                findPictureLocationBASEDIRCompletion.documentation = new vscode.MarkdownString('Base Directory');
                items.push(findPictureLocationBASEDIRCompletion);

                const findPictureLocationNUMBER_OF_TRIESCompletion = new vscode.CompletionItem('NUMBER_OF_TRIES');
                findPictureLocationNUMBER_OF_TRIESCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationNUMBER_OF_TRIESCompletion.insertText = new vscode.SnippetString("NUMBER_OF_TRIES = \"${1}\"");
                findPictureLocationNUMBER_OF_TRIESCompletion.documentation = new vscode.MarkdownString('Anzahl der Versuche das Bild zu finden. Default 5.');
                items.push(findPictureLocationNUMBER_OF_TRIESCompletion);

                const findPictureLocationSLEEP_BETWEEN_TRIESCompletion = new vscode.CompletionItem('SLEEP_BETWEEN_TRIES');
                findPictureLocationSLEEP_BETWEEN_TRIESCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationSLEEP_BETWEEN_TRIESCompletion.insertText = new vscode.SnippetString("SLEEP_BETWEEN_TRIES = \"${1}\"");
                findPictureLocationSLEEP_BETWEEN_TRIESCompletion.documentation = new vscode.MarkdownString('Dauer in Millisekunden, wie lange zwischen jedem Versuch gewartet werden soll. Default 500ms.');
                items.push(findPictureLocationSLEEP_BETWEEN_TRIESCompletion);

                const findPictureLocationMATCHING_THRESHOLDCompletion = new vscode.CompletionItem('MATCHING_THRESHOLD');
                findPictureLocationMATCHING_THRESHOLDCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationMATCHING_THRESHOLDCompletion.insertText = new vscode.SnippetString("MATCHING_THRESHOLD = \"${1}\"");
                findPictureLocationMATCHING_THRESHOLDCompletion.documentation = new vscode.MarkdownString('Threshold f\u00FCr das Matching');
                items.push(findPictureLocationMATCHING_THRESHOLDCompletion);

                const findPictureLocationTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                findPictureLocationTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                findPictureLocationTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Fenster-Text geschrieben werden soll.');
                items.push(findPictureLocationTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*findPictureLocationAndClick\s*\(.*/.test(linePrefix)) {

                const findPictureLocationAndClickIMAGE_PATHCompletion = new vscode.CompletionItem('IMAGE_PATH');
                findPictureLocationAndClickIMAGE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickIMAGE_PATHCompletion.insertText = new vscode.SnippetString("IMAGE_PATH = \"${1}\"");
                findPictureLocationAndClickIMAGE_PATHCompletion.documentation = new vscode.MarkdownString('Relativer Pfad zu dem Bild');
                items.push(findPictureLocationAndClickIMAGE_PATHCompletion);

                const findPictureLocationAndClickBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                findPictureLocationAndClickBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                findPictureLocationAndClickBASEDIRCompletion.documentation = new vscode.MarkdownString('Base Directory');
                items.push(findPictureLocationAndClickBASEDIRCompletion);

                const findPictureLocationAndClickBUTTONCompletion = new vscode.CompletionItem('BUTTON');
                findPictureLocationAndClickBUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickBUTTONCompletion.insertText = new vscode.SnippetString("BUTTON = \"${1}\"");
                findPictureLocationAndClickBUTTONCompletion.documentation = new vscode.MarkdownString('Links- oder Rechtsklick');
                items.push(findPictureLocationAndClickBUTTONCompletion);

                const findPictureLocationAndClickNUMBER_OF_TRIESCompletion = new vscode.CompletionItem('NUMBER_OF_TRIES');
                findPictureLocationAndClickNUMBER_OF_TRIESCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickNUMBER_OF_TRIESCompletion.insertText = new vscode.SnippetString("NUMBER_OF_TRIES = \"${1}\"");
                findPictureLocationAndClickNUMBER_OF_TRIESCompletion.documentation = new vscode.MarkdownString('Anzahl der Versuche das Bild zu finden. Default 5.');
                items.push(findPictureLocationAndClickNUMBER_OF_TRIESCompletion);

                const findPictureLocationAndClickSLEEP_BETWEEN_TRIESCompletion = new vscode.CompletionItem('SLEEP_BETWEEN_TRIES');
                findPictureLocationAndClickSLEEP_BETWEEN_TRIESCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickSLEEP_BETWEEN_TRIESCompletion.insertText = new vscode.SnippetString("SLEEP_BETWEEN_TRIES = \"${1}\"");
                findPictureLocationAndClickSLEEP_BETWEEN_TRIESCompletion.documentation = new vscode.MarkdownString('Dauer in Millisekunden, wie lange zwischen jedem Versuch gewartet werden soll. Default 500ms.');
                items.push(findPictureLocationAndClickSLEEP_BETWEEN_TRIESCompletion);

                const findPictureLocationAndClickMATCHING_THRESHOLDCompletion = new vscode.CompletionItem('MATCHING_THRESHOLD');
                findPictureLocationAndClickMATCHING_THRESHOLDCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickMATCHING_THRESHOLDCompletion.insertText = new vscode.SnippetString("MATCHING_THRESHOLD = \"${1}\"");
                findPictureLocationAndClickMATCHING_THRESHOLDCompletion.documentation = new vscode.MarkdownString('Threshold f\u00FCr das Matching');
                items.push(findPictureLocationAndClickMATCHING_THRESHOLDCompletion);

                const findPictureLocationAndClickTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                findPictureLocationAndClickTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                findPictureLocationAndClickTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Fenster-Text geschrieben werden soll.');
                items.push(findPictureLocationAndClickTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*findPictureLocationAndClickAndSend\s*\(.*/.test(linePrefix)) {

                const findPictureLocationAndClickAndSendIMAGE_PATHCompletion = new vscode.CompletionItem('IMAGE_PATH');
                findPictureLocationAndClickAndSendIMAGE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickAndSendIMAGE_PATHCompletion.insertText = new vscode.SnippetString("IMAGE_PATH = \"${1}\"");
                findPictureLocationAndClickAndSendIMAGE_PATHCompletion.documentation = new vscode.MarkdownString('Relativer Pfad zu dem Bild');
                items.push(findPictureLocationAndClickAndSendIMAGE_PATHCompletion);

                const findPictureLocationAndClickAndSendBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                findPictureLocationAndClickAndSendBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickAndSendBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                findPictureLocationAndClickAndSendBASEDIRCompletion.documentation = new vscode.MarkdownString('Base Directory');
                items.push(findPictureLocationAndClickAndSendBASEDIRCompletion);

                const findPictureLocationAndClickAndSendBUTTONCompletion = new vscode.CompletionItem('BUTTON');
                findPictureLocationAndClickAndSendBUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickAndSendBUTTONCompletion.insertText = new vscode.SnippetString("BUTTON = \"${1}\"");
                findPictureLocationAndClickAndSendBUTTONCompletion.documentation = new vscode.MarkdownString('Links- oder Rechtsklick');
                items.push(findPictureLocationAndClickAndSendBUTTONCompletion);

                const findPictureLocationAndClickAndSendTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                findPictureLocationAndClickAndSendTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickAndSendTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                findPictureLocationAndClickAndSendTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('Der Text der gesendet werden soll');
                items.push(findPictureLocationAndClickAndSendTEXT_TO_SENDCompletion);

                const findPictureLocationAndClickAndSendNUMBER_OF_TRIESCompletion = new vscode.CompletionItem('NUMBER_OF_TRIES');
                findPictureLocationAndClickAndSendNUMBER_OF_TRIESCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickAndSendNUMBER_OF_TRIESCompletion.insertText = new vscode.SnippetString("NUMBER_OF_TRIES = \"${1}\"");
                findPictureLocationAndClickAndSendNUMBER_OF_TRIESCompletion.documentation = new vscode.MarkdownString('Anzahl der Versuche das Bild zu finden. Default 5.');
                items.push(findPictureLocationAndClickAndSendNUMBER_OF_TRIESCompletion);

                const findPictureLocationAndClickAndSendSLEEP_BETWEEN_TRIESCompletion = new vscode.CompletionItem('SLEEP_BETWEEN_TRIES');
                findPictureLocationAndClickAndSendSLEEP_BETWEEN_TRIESCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickAndSendSLEEP_BETWEEN_TRIESCompletion.insertText = new vscode.SnippetString("SLEEP_BETWEEN_TRIES = \"${1}\"");
                findPictureLocationAndClickAndSendSLEEP_BETWEEN_TRIESCompletion.documentation = new vscode.MarkdownString('Dauer in Millisekunden, wie lange zwischen jedem Versuch gewartet werden soll. Default 500ms.');
                items.push(findPictureLocationAndClickAndSendSLEEP_BETWEEN_TRIESCompletion);

                const findPictureLocationAndClickAndSendMATCHING_THRESHOLDCompletion = new vscode.CompletionItem('MATCHING_THRESHOLD');
                findPictureLocationAndClickAndSendMATCHING_THRESHOLDCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickAndSendMATCHING_THRESHOLDCompletion.insertText = new vscode.SnippetString("MATCHING_THRESHOLD = \"${1}\"");
                findPictureLocationAndClickAndSendMATCHING_THRESHOLDCompletion.documentation = new vscode.MarkdownString('Threshold f\u00FCr das Matching');
                items.push(findPictureLocationAndClickAndSendMATCHING_THRESHOLDCompletion);

                const findPictureLocationAndClickAndSendDELAYCompletion = new vscode.CompletionItem('DELAY');
                findPictureLocationAndClickAndSendDELAYCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickAndSendDELAYCompletion.insertText = new vscode.SnippetString("DELAY = \"${1}\"");
                findPictureLocationAndClickAndSendDELAYCompletion.documentation = new vscode.MarkdownString('Dauer in Millisekunden, wie lange zwischen dem Klicken und Senden gewartet werden soll. Default 1000ms');
                items.push(findPictureLocationAndClickAndSendDELAYCompletion);

                const findPictureLocationAndClickAndSendTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                findPictureLocationAndClickAndSendTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                findPictureLocationAndClickAndSendTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                findPictureLocationAndClickAndSendTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Fenster-Text geschrieben werden soll.');
                items.push(findPictureLocationAndClickAndSendTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*findTextInPicture\s*\(.*/.test(linePrefix)) {

                const findTextInPictureFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                findTextInPictureFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                findTextInPictureFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                findTextInPictureFILENAMECompletion.documentation = new vscode.MarkdownString('Name der Bilddatei, die untersucht werden soll. Wenn keine Bilddatei angegeben wird, wird der Zwischenspeicher nach Bilddaten durchsucht. Ist auch hier kein Bild vorhanden, wird ein Screenshot erstellt.');
                items.push(findTextInPictureFILENAMECompletion);

                const findTextInPictureBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                findTextInPictureBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                findTextInPictureBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                findTextInPictureBASEDIRCompletion.documentation = new vscode.MarkdownString('Gibt das Basisverzeichnis an.');
                items.push(findTextInPictureBASEDIRCompletion);

                const findTextInPictureTEXT_TO_FINDCompletion = new vscode.CompletionItem('TEXT_TO_FIND');
                findTextInPictureTEXT_TO_FINDCompletion.kind = vscode.CompletionItemKind.Field;
                findTextInPictureTEXT_TO_FINDCompletion.insertText = new vscode.SnippetString("TEXT_TO_FIND = \"${1}\"");
                findTextInPictureTEXT_TO_FINDCompletion.documentation = new vscode.MarkdownString('Text der gesucht werden soll');
                items.push(findTextInPictureTEXT_TO_FINDCompletion);

                const findTextInPictureX1Completion = new vscode.CompletionItem('X1');
                findTextInPictureX1Completion.kind = vscode.CompletionItemKind.Field;
                findTextInPictureX1Completion.insertText = new vscode.SnippetString("X1 = \"${1}\"");
                findTextInPictureX1Completion.documentation = new vscode.MarkdownString('Wenn nur ein Bildschnitt untersucht werden soll: X-Koordinate der linken oberen Ecke.');
                items.push(findTextInPictureX1Completion);

                const findTextInPictureY1Completion = new vscode.CompletionItem('Y1');
                findTextInPictureY1Completion.kind = vscode.CompletionItemKind.Field;
                findTextInPictureY1Completion.insertText = new vscode.SnippetString("Y1 = \"${1}\"");
                findTextInPictureY1Completion.documentation = new vscode.MarkdownString('Wenn nur ein Bildschnitt untersucht werden soll: Y-Koordinate der linken oberen Ecke.');
                items.push(findTextInPictureY1Completion);

                const findTextInPictureX2Completion = new vscode.CompletionItem('X2');
                findTextInPictureX2Completion.kind = vscode.CompletionItemKind.Field;
                findTextInPictureX2Completion.insertText = new vscode.SnippetString("X2 = \"${1}\"");
                findTextInPictureX2Completion.documentation = new vscode.MarkdownString('Wenn nur ein Bildschnitt untersucht werden soll: X-Koordinate der rechten unteren Ecke.');
                items.push(findTextInPictureX2Completion);

                const findTextInPictureY2Completion = new vscode.CompletionItem('Y2');
                findTextInPictureY2Completion.kind = vscode.CompletionItemKind.Field;
                findTextInPictureY2Completion.insertText = new vscode.SnippetString("Y2 = \"${1}\"");
                findTextInPictureY2Completion.documentation = new vscode.MarkdownString('Wenn nur ein Bildschnitt untersucht werden soll: Y-Koordinate der rechten unteren Ecke.');
                items.push(findTextInPictureY2Completion);

                const findTextInPictureOCR_IMPLEMENTATIONCompletion = new vscode.CompletionItem('OCR_IMPLEMENTATION');
                findTextInPictureOCR_IMPLEMENTATIONCompletion.kind = vscode.CompletionItemKind.Field;
                findTextInPictureOCR_IMPLEMENTATIONCompletion.insertText = new vscode.SnippetString("OCR_IMPLEMENTATION = \"${1}\"");
                findTextInPictureOCR_IMPLEMENTATIONCompletion.documentation = new vscode.MarkdownString('Wahl der verwendeten OCR Implementierung. GCP oder TESSERACT.');
                items.push(findTextInPictureOCR_IMPLEMENTATIONCompletion);
            }

            if (/.*\s*for\s*\(.*/.test(linePrefix)) {

                const forDATA_FILE_PATHCompletion = new vscode.CompletionItem('DATA_FILE_PATH');
                forDATA_FILE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                forDATA_FILE_PATHCompletion.insertText = new vscode.SnippetString("DATA_FILE_PATH = \"${1}\"");
                forDATA_FILE_PATHCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(forDATA_FILE_PATHCompletion);

                const forCONTINUE_ON_WARNINGCompletion = new vscode.CompletionItem('CONTINUE_ON_WARNING');
                forCONTINUE_ON_WARNINGCompletion.kind = vscode.CompletionItemKind.Field;
                forCONTINUE_ON_WARNINGCompletion.insertText = new vscode.SnippetString("CONTINUE_ON_WARNING = \"${1}\"");
                forCONTINUE_ON_WARNINGCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(forCONTINUE_ON_WARNINGCompletion);

                const forCONTINUE_ON_ERRORCompletion = new vscode.CompletionItem('CONTINUE_ON_ERROR');
                forCONTINUE_ON_ERRORCompletion.kind = vscode.CompletionItemKind.Field;
                forCONTINUE_ON_ERRORCompletion.insertText = new vscode.SnippetString("CONTINUE_ON_ERROR = \"${1}\"");
                forCONTINUE_ON_ERRORCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(forCONTINUE_ON_ERRORCompletion);

                const forBACKUP_ERROR_NAMECompletion = new vscode.CompletionItem('BACKUP_ERROR_NAME');
                forBACKUP_ERROR_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                forBACKUP_ERROR_NAMECompletion.insertText = new vscode.SnippetString("BACKUP_ERROR_NAME = \"${1}\"");
                forBACKUP_ERROR_NAMECompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(forBACKUP_ERROR_NAMECompletion);

                const forCONTINUE_UNTIL_SUCCESSCompletion = new vscode.CompletionItem('CONTINUE_UNTIL_SUCCESS');
                forCONTINUE_UNTIL_SUCCESSCompletion.kind = vscode.CompletionItemKind.Field;
                forCONTINUE_UNTIL_SUCCESSCompletion.insertText = new vscode.SnippetString("CONTINUE_UNTIL_SUCCESS = \"${1}\"");
                forCONTINUE_UNTIL_SUCCESSCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(forCONTINUE_UNTIL_SUCCESSCompletion);

                const forSEPARATORCompletion = new vscode.CompletionItem('SEPARATOR');
                forSEPARATORCompletion.kind = vscode.CompletionItemKind.Field;
                forSEPARATORCompletion.insertText = new vscode.SnippetString("SEPARATOR = \"${1}\"");
                forSEPARATORCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(forSEPARATORCompletion);

                const forQUOTE_CHARACTERCompletion = new vscode.CompletionItem('QUOTE_CHARACTER');
                forQUOTE_CHARACTERCompletion.kind = vscode.CompletionItemKind.Field;
                forQUOTE_CHARACTERCompletion.insertText = new vscode.SnippetString("QUOTE_CHARACTER = \"${1}\"");
                forQUOTE_CHARACTERCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(forQUOTE_CHARACTERCompletion);

                const forSHEET_NAMECompletion = new vscode.CompletionItem('SHEET_NAME');
                forSHEET_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                forSHEET_NAMECompletion.insertText = new vscode.SnippetString("SHEET_NAME = \"${1}\"");
                forSHEET_NAMECompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(forSHEET_NAMECompletion);

                const forDATA_STARTS_AT_ROWCompletion = new vscode.CompletionItem('DATA_STARTS_AT_ROW');
                forDATA_STARTS_AT_ROWCompletion.kind = vscode.CompletionItemKind.Field;
                forDATA_STARTS_AT_ROWCompletion.insertText = new vscode.SnippetString("DATA_STARTS_AT_ROW = \"${1}\"");
                forDATA_STARTS_AT_ROWCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(forDATA_STARTS_AT_ROWCompletion);

                const forDATA_STARTS_AT_COLUMNCompletion = new vscode.CompletionItem('DATA_STARTS_AT_COLUMN');
                forDATA_STARTS_AT_COLUMNCompletion.kind = vscode.CompletionItemKind.Field;
                forDATA_STARTS_AT_COLUMNCompletion.insertText = new vscode.SnippetString("DATA_STARTS_AT_COLUMN = \"${1}\"");
                forDATA_STARTS_AT_COLUMNCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(forDATA_STARTS_AT_COLUMNCompletion);

                const forHEADER_ROWCompletion = new vscode.CompletionItem('HEADER_ROW');
                forHEADER_ROWCompletion.kind = vscode.CompletionItemKind.Field;
                forHEADER_ROWCompletion.insertText = new vscode.SnippetString("HEADER_ROW = \"${1}\"");
                forHEADER_ROWCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(forHEADER_ROWCompletion);
            }

            if (/.*\s*formatJson\s*\(.*/.test(linePrefix)) {

                const formatJsonJSONTEXTCompletion = new vscode.CompletionItem('JSONTEXT');
                formatJsonJSONTEXTCompletion.kind = vscode.CompletionItemKind.Field;
                formatJsonJSONTEXTCompletion.insertText = new vscode.SnippetString("JSONTEXT = \"${1}\"");
                formatJsonJSONTEXTCompletion.documentation = new vscode.MarkdownString('Informationen im unformatierten JSON Format');
                items.push(formatJsonJSONTEXTCompletion);

                const formatJsonTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                formatJsonTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                formatJsonTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                formatJsonTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Element-Text geschrieben werden soll.');
                items.push(formatJsonTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*ftpConnect\s*\(.*/.test(linePrefix)) {

                const ftpConnectCONNECTION_NAMECompletion = new vscode.CompletionItem('CONNECTION_NAME');
                ftpConnectCONNECTION_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                ftpConnectCONNECTION_NAMECompletion.insertText = new vscode.SnippetString("CONNECTION_NAME = \"${1}\"");
                ftpConnectCONNECTION_NAMECompletion.documentation = new vscode.MarkdownString('Name der Verbindung. Dieser Name muss bei allen FTP*Connected-Kommandos, die mit der gleichen Verbindung arbeiten, \u00FCbereinstimmen.');
                items.push(ftpConnectCONNECTION_NAMECompletion);

                const ftpConnectSERVERCompletion = new vscode.CompletionItem('SERVER');
                ftpConnectSERVERCompletion.kind = vscode.CompletionItemKind.Field;
                ftpConnectSERVERCompletion.insertText = new vscode.SnippetString("SERVER = \"${1}\"");
                ftpConnectSERVERCompletion.documentation = new vscode.MarkdownString('Adresse des Servers');
                items.push(ftpConnectSERVERCompletion);

                const ftpConnectUSERCompletion = new vscode.CompletionItem('USER');
                ftpConnectUSERCompletion.kind = vscode.CompletionItemKind.Field;
                ftpConnectUSERCompletion.insertText = new vscode.SnippetString("USER = \"${1}\"");
                ftpConnectUSERCompletion.documentation = new vscode.MarkdownString('Username. Bei leerem Wert wird anonymous eingesetzt.');
                items.push(ftpConnectUSERCompletion);

                const ftpConnectPWCompletion = new vscode.CompletionItem('PW');
                ftpConnectPWCompletion.kind = vscode.CompletionItemKind.Field;
                ftpConnectPWCompletion.insertText = new vscode.SnippetString("PW = \"${1}\"");
                ftpConnectPWCompletion.documentation = new vscode.MarkdownString('Passwort');
                items.push(ftpConnectPWCompletion);

                const ftpConnectPORTCompletion = new vscode.CompletionItem('PORT');
                ftpConnectPORTCompletion.kind = vscode.CompletionItemKind.Field;
                ftpConnectPORTCompletion.insertText = new vscode.SnippetString("PORT = \"${1}\"");
                ftpConnectPORTCompletion.documentation = new vscode.MarkdownString('Port des Servers');
                items.push(ftpConnectPORTCompletion);

                const ftpConnectIS_PASSIVECompletion = new vscode.CompletionItem('IS_PASSIVE');
                ftpConnectIS_PASSIVECompletion.kind = vscode.CompletionItemKind.Field;
                ftpConnectIS_PASSIVECompletion.insertText = new vscode.SnippetString("IS_PASSIVE = \"${1}\"");
                ftpConnectIS_PASSIVECompletion.documentation = new vscode.MarkdownString('True, falls im passiven Modus heruntergeladen werden soll. False per Default');
                items.push(ftpConnectIS_PASSIVECompletion);
            }

            if (/.*\s*ftpDelete\s*\(.*/.test(linePrefix)) {

                const ftpDeleteSERVERCompletion = new vscode.CompletionItem('SERVER');
                ftpDeleteSERVERCompletion.kind = vscode.CompletionItemKind.Field;
                ftpDeleteSERVERCompletion.insertText = new vscode.SnippetString("SERVER = \"${1}\"");
                ftpDeleteSERVERCompletion.documentation = new vscode.MarkdownString('Adresse des Servers');
                items.push(ftpDeleteSERVERCompletion);

                const ftpDeleteUSERCompletion = new vscode.CompletionItem('USER');
                ftpDeleteUSERCompletion.kind = vscode.CompletionItemKind.Field;
                ftpDeleteUSERCompletion.insertText = new vscode.SnippetString("USER = \"${1}\"");
                ftpDeleteUSERCompletion.documentation = new vscode.MarkdownString('User');
                items.push(ftpDeleteUSERCompletion);

                const ftpDeletePWCompletion = new vscode.CompletionItem('PW');
                ftpDeletePWCompletion.kind = vscode.CompletionItemKind.Field;
                ftpDeletePWCompletion.insertText = new vscode.SnippetString("PW = \"${1}\"");
                ftpDeletePWCompletion.documentation = new vscode.MarkdownString('Passwort des Users');
                items.push(ftpDeletePWCompletion);

                const ftpDeleteSERVER_PATHCompletion = new vscode.CompletionItem('SERVER_PATH');
                ftpDeleteSERVER_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                ftpDeleteSERVER_PATHCompletion.insertText = new vscode.SnippetString("SERVER_PATH = \"${1}\"");
                ftpDeleteSERVER_PATHCompletion.documentation = new vscode.MarkdownString('Auf dem Server befindlicher Pfad der zu l\u00F6schenden Datei oder des zu l\u00F6schenden Verzeichnisses.');
                items.push(ftpDeleteSERVER_PATHCompletion);

                const ftpDeletePORTCompletion = new vscode.CompletionItem('PORT');
                ftpDeletePORTCompletion.kind = vscode.CompletionItemKind.Field;
                ftpDeletePORTCompletion.insertText = new vscode.SnippetString("PORT = \"${1}\"");
                ftpDeletePORTCompletion.documentation = new vscode.MarkdownString('Port f\u00FCr die Verbindung');
                items.push(ftpDeletePORTCompletion);

                const ftpDeleteIS_PASSIVE_MODECompletion = new vscode.CompletionItem('IS_PASSIVE_MODE');
                ftpDeleteIS_PASSIVE_MODECompletion.kind = vscode.CompletionItemKind.Field;
                ftpDeleteIS_PASSIVE_MODECompletion.insertText = new vscode.SnippetString("IS_PASSIVE_MODE = \"${1}\"");
                ftpDeleteIS_PASSIVE_MODECompletion.documentation = new vscode.MarkdownString('Angabe, ob die Verbindung im Passive Mode ist. False per Default');
                items.push(ftpDeleteIS_PASSIVE_MODECompletion);
            }

            if (/.*\s*ftpDeleteConnected\s*\(.*/.test(linePrefix)) {

                const ftpDeleteConnectedCONNECTION_NAMECompletion = new vscode.CompletionItem('CONNECTION_NAME');
                ftpDeleteConnectedCONNECTION_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                ftpDeleteConnectedCONNECTION_NAMECompletion.insertText = new vscode.SnippetString("CONNECTION_NAME = \"${1}\"");
                ftpDeleteConnectedCONNECTION_NAMECompletion.documentation = new vscode.MarkdownString('Name der Verbindung. Dieser Name muss bei allen FTP*Connected-Kommandos, die mit der gleichen Verbindung arbeiten, \u00FCbereinstimmen.');
                items.push(ftpDeleteConnectedCONNECTION_NAMECompletion);

                const ftpDeleteConnectedSERVER_PATHCompletion = new vscode.CompletionItem('SERVER_PATH');
                ftpDeleteConnectedSERVER_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                ftpDeleteConnectedSERVER_PATHCompletion.insertText = new vscode.SnippetString("SERVER_PATH = \"${1}\"");
                ftpDeleteConnectedSERVER_PATHCompletion.documentation = new vscode.MarkdownString('Auf dem Server befindlicher Pfad der zu l\u00F6schenden Datei oder des zu l\u00F6schenden Verzeichnisses.');
                items.push(ftpDeleteConnectedSERVER_PATHCompletion);
            }

            if (/.*\s*ftpDisconnect\s*\(.*/.test(linePrefix)) {

                const ftpDisconnectCONNECTION_NAMECompletion = new vscode.CompletionItem('CONNECTION_NAME');
                ftpDisconnectCONNECTION_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                ftpDisconnectCONNECTION_NAMECompletion.insertText = new vscode.SnippetString("CONNECTION_NAME = \"${1}\"");
                ftpDisconnectCONNECTION_NAMECompletion.documentation = new vscode.MarkdownString('Name der Verbindung. Dieser Name muss bei allen FTP*Connected-Kommandos, die mit der gleichen Verbindung arbeiten, \u00FCbereinstimmen.');
                items.push(ftpDisconnectCONNECTION_NAMECompletion);
            }

            if (/.*\s*ftpGet\s*\(.*/.test(linePrefix)) {

                const ftpGetSERVERCompletion = new vscode.CompletionItem('SERVER');
                ftpGetSERVERCompletion.kind = vscode.CompletionItemKind.Field;
                ftpGetSERVERCompletion.insertText = new vscode.SnippetString("SERVER = \"${1}\"");
                ftpGetSERVERCompletion.documentation = new vscode.MarkdownString('Adresse des Servers');
                items.push(ftpGetSERVERCompletion);

                const ftpGetUSERCompletion = new vscode.CompletionItem('USER');
                ftpGetUSERCompletion.kind = vscode.CompletionItemKind.Field;
                ftpGetUSERCompletion.insertText = new vscode.SnippetString("USER = \"${1}\"");
                ftpGetUSERCompletion.documentation = new vscode.MarkdownString('Username');
                items.push(ftpGetUSERCompletion);

                const ftpGetPWCompletion = new vscode.CompletionItem('PW');
                ftpGetPWCompletion.kind = vscode.CompletionItemKind.Field;
                ftpGetPWCompletion.insertText = new vscode.SnippetString("PW = \"${1}\"");
                ftpGetPWCompletion.documentation = new vscode.MarkdownString('Passwort');
                items.push(ftpGetPWCompletion);

                const ftpGetSERVER_PATHCompletion = new vscode.CompletionItem('SERVER_PATH');
                ftpGetSERVER_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                ftpGetSERVER_PATHCompletion.insertText = new vscode.SnippetString("SERVER_PATH = \"${1}\"");
                ftpGetSERVER_PATHCompletion.documentation = new vscode.MarkdownString('Auf dem Server befindlicher Pfad der zu ladenden Datei oder des zu ladenden Verzeichnisses.');
                items.push(ftpGetSERVER_PATHCompletion);

                const ftpGetLOCAL_PATHCompletion = new vscode.CompletionItem('LOCAL_PATH');
                ftpGetLOCAL_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                ftpGetLOCAL_PATHCompletion.insertText = new vscode.SnippetString("LOCAL_PATH = \"${1}\"");
                ftpGetLOCAL_PATHCompletion.documentation = new vscode.MarkdownString('Pfad auf dem lokalen System, unter dem der Ordner\/die Datei abzulegen ist.      Soll eine einzelne Datei abgelegt werden, ist der Dateiname ebenfalls hier anzugeben,       z.B. C:\/ftp-files\/dateiname, wobei \'dateiname\' eine noch nicht existierende lokale Datei bezeichnet.      Soll hingegen ein ganzer Ordner geladen werden, ist hier der Pfad zu diesem Ordner anzugeben,       z.B. C:\/ftp-files\/foldername\/, wobei \'foldername\' einen existierenden lokalen Ordner bezeichnet.');
                items.push(ftpGetLOCAL_PATHCompletion);

                const ftpGetPORTCompletion = new vscode.CompletionItem('PORT');
                ftpGetPORTCompletion.kind = vscode.CompletionItemKind.Field;
                ftpGetPORTCompletion.insertText = new vscode.SnippetString("PORT = \"${1}\"");
                ftpGetPORTCompletion.documentation = new vscode.MarkdownString('Port des Servers');
                items.push(ftpGetPORTCompletion);

                const ftpGetIS_BINARYCompletion = new vscode.CompletionItem('IS_BINARY');
                ftpGetIS_BINARYCompletion.kind = vscode.CompletionItemKind.Field;
                ftpGetIS_BINARYCompletion.insertText = new vscode.SnippetString("IS_BINARY = \"${1}\"");
                ftpGetIS_BINARYCompletion.documentation = new vscode.MarkdownString('True, falls die Daten im Bin\u00E4rformat \u00FCbertragen werden sollen. False per Default');
                items.push(ftpGetIS_BINARYCompletion);

                const ftpGetIS_PASSIVE_MODECompletion = new vscode.CompletionItem('IS_PASSIVE_MODE');
                ftpGetIS_PASSIVE_MODECompletion.kind = vscode.CompletionItemKind.Field;
                ftpGetIS_PASSIVE_MODECompletion.insertText = new vscode.SnippetString("IS_PASSIVE_MODE = \"${1}\"");
                ftpGetIS_PASSIVE_MODECompletion.documentation = new vscode.MarkdownString('True, falls im passiven Modus heruntergeladen werden soll. False per Default');
                items.push(ftpGetIS_PASSIVE_MODECompletion);
            }

            if (/.*\s*ftpGetConnected\s*\(.*/.test(linePrefix)) {

                const ftpGetConnectedCONNECTION_NAMECompletion = new vscode.CompletionItem('CONNECTION_NAME');
                ftpGetConnectedCONNECTION_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                ftpGetConnectedCONNECTION_NAMECompletion.insertText = new vscode.SnippetString("CONNECTION_NAME = \"${1}\"");
                ftpGetConnectedCONNECTION_NAMECompletion.documentation = new vscode.MarkdownString('Name der Verbindung. Dieser Name muss bei allen FTP*Connected-Kommandos, die mit der gleichen Verbindung arbeiten, \u00FCbereinstimmen.');
                items.push(ftpGetConnectedCONNECTION_NAMECompletion);

                const ftpGetConnectedSERVER_PATHCompletion = new vscode.CompletionItem('SERVER_PATH');
                ftpGetConnectedSERVER_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                ftpGetConnectedSERVER_PATHCompletion.insertText = new vscode.SnippetString("SERVER_PATH = \"${1}\"");
                ftpGetConnectedSERVER_PATHCompletion.documentation = new vscode.MarkdownString('Auf dem Server befindlicher Pfad der zu ladenden Datei oder des zu ladenden Verzeichnisses.');
                items.push(ftpGetConnectedSERVER_PATHCompletion);

                const ftpGetConnectedLOCAL_PATHCompletion = new vscode.CompletionItem('LOCAL_PATH');
                ftpGetConnectedLOCAL_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                ftpGetConnectedLOCAL_PATHCompletion.insertText = new vscode.SnippetString("LOCAL_PATH = \"${1}\"");
                ftpGetConnectedLOCAL_PATHCompletion.documentation = new vscode.MarkdownString('Pfad auf dem lokalen System, unter dem der Ordner\/die Datei abzulegen ist.      Soll eine einzelne Datei abgelegt werden, ist der Dateiname ebenfalls hier anzugeben,       z.B. C:\/ftp-files\/dateiname, wobei \'dateiname\' eine noch nicht existierende lokale Datei bezeichnet.      Soll hingegen ein ganzer Ordner geladen werden, ist hier der Pfad zu diesem Ordner anzugeben,       z.B. C:\/ftp-files\/foldername\/, wobei \'foldername\' einen existierenden lokalen Ordner bezeichnet.');
                items.push(ftpGetConnectedLOCAL_PATHCompletion);

                const ftpGetConnectedIS_BINARYCompletion = new vscode.CompletionItem('IS_BINARY');
                ftpGetConnectedIS_BINARYCompletion.kind = vscode.CompletionItemKind.Field;
                ftpGetConnectedIS_BINARYCompletion.insertText = new vscode.SnippetString("IS_BINARY = \"${1}\"");
                ftpGetConnectedIS_BINARYCompletion.documentation = new vscode.MarkdownString('Angabe, ob es sich um eine Bin\u00E4rdatei handelt. Default false.');
                items.push(ftpGetConnectedIS_BINARYCompletion);
            }

            if (/.*\s*ftpPut\s*\(.*/.test(linePrefix)) {

                const ftpPutSERVERCompletion = new vscode.CompletionItem('SERVER');
                ftpPutSERVERCompletion.kind = vscode.CompletionItemKind.Field;
                ftpPutSERVERCompletion.insertText = new vscode.SnippetString("SERVER = \"${1}\"");
                ftpPutSERVERCompletion.documentation = new vscode.MarkdownString('Adresse des Servers');
                items.push(ftpPutSERVERCompletion);

                const ftpPutUSERCompletion = new vscode.CompletionItem('USER');
                ftpPutUSERCompletion.kind = vscode.CompletionItemKind.Field;
                ftpPutUSERCompletion.insertText = new vscode.SnippetString("USER = \"${1}\"");
                ftpPutUSERCompletion.documentation = new vscode.MarkdownString('Username');
                items.push(ftpPutUSERCompletion);

                const ftpPutPWCompletion = new vscode.CompletionItem('PW');
                ftpPutPWCompletion.kind = vscode.CompletionItemKind.Field;
                ftpPutPWCompletion.insertText = new vscode.SnippetString("PW = \"${1}\"");
                ftpPutPWCompletion.documentation = new vscode.MarkdownString('Passwort');
                items.push(ftpPutPWCompletion);

                const ftpPutSERVER_PATHCompletion = new vscode.CompletionItem('SERVER_PATH');
                ftpPutSERVER_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                ftpPutSERVER_PATHCompletion.insertText = new vscode.SnippetString("SERVER_PATH = \"${1}\"");
                ftpPutSERVER_PATHCompletion.documentation = new vscode.MarkdownString('Auf dem Server befindlicher Zielpfad der hochzuladenden Datei oder des zu hochzuladenden Verzeichnisses.');
                items.push(ftpPutSERVER_PATHCompletion);

                const ftpPutLOCAL_PATHCompletion = new vscode.CompletionItem('LOCAL_PATH');
                ftpPutLOCAL_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                ftpPutLOCAL_PATHCompletion.insertText = new vscode.SnippetString("LOCAL_PATH = \"${1}\"");
                ftpPutLOCAL_PATHCompletion.documentation = new vscode.MarkdownString('Pfad auf dem lokalen System, aus dem der Ordner\/die Datei hochzuladen ist.');
                items.push(ftpPutLOCAL_PATHCompletion);

                const ftpPutPORTCompletion = new vscode.CompletionItem('PORT');
                ftpPutPORTCompletion.kind = vscode.CompletionItemKind.Field;
                ftpPutPORTCompletion.insertText = new vscode.SnippetString("PORT = \"${1}\"");
                ftpPutPORTCompletion.documentation = new vscode.MarkdownString('Port des Servers');
                items.push(ftpPutPORTCompletion);

                const ftpPutOPTIONAL_PARAMETERSCompletion = new vscode.CompletionItem('OPTIONAL_PARAMETERS');
                ftpPutOPTIONAL_PARAMETERSCompletion.kind = vscode.CompletionItemKind.Field;
                ftpPutOPTIONAL_PARAMETERSCompletion.insertText = new vscode.SnippetString("OPTIONAL_PARAMETERS = \"${1}\"");
                ftpPutOPTIONAL_PARAMETERSCompletion.documentation = new vscode.MarkdownString('Optionale Parameter, die per SITE \u00FCbergeben werden k\u00F6nnen');
                items.push(ftpPutOPTIONAL_PARAMETERSCompletion);

                const ftpPutIS_BINARYCompletion = new vscode.CompletionItem('IS_BINARY');
                ftpPutIS_BINARYCompletion.kind = vscode.CompletionItemKind.Field;
                ftpPutIS_BINARYCompletion.insertText = new vscode.SnippetString("IS_BINARY = \"${1}\"");
                ftpPutIS_BINARYCompletion.documentation = new vscode.MarkdownString('True, falls die Daten im Bin\u00E4rformat \u00FCbertragen werden sollen. False per Default');
                items.push(ftpPutIS_BINARYCompletion);
            }

            if (/.*\s*ftpPutConnected\s*\(.*/.test(linePrefix)) {

                const ftpPutConnectedCONNECTION_NAMECompletion = new vscode.CompletionItem('CONNECTION_NAME');
                ftpPutConnectedCONNECTION_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                ftpPutConnectedCONNECTION_NAMECompletion.insertText = new vscode.SnippetString("CONNECTION_NAME = \"${1}\"");
                ftpPutConnectedCONNECTION_NAMECompletion.documentation = new vscode.MarkdownString('Name der Verbindung. Dieser Name muss bei allen FTP*Connected-Kommandos, die mit der gleichen Verbindung arbeiten, \u00FCbereinstimmen.');
                items.push(ftpPutConnectedCONNECTION_NAMECompletion);

                const ftpPutConnectedLOCAL_PATHCompletion = new vscode.CompletionItem('LOCAL_PATH');
                ftpPutConnectedLOCAL_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                ftpPutConnectedLOCAL_PATHCompletion.insertText = new vscode.SnippetString("LOCAL_PATH = \"${1}\"");
                ftpPutConnectedLOCAL_PATHCompletion.documentation = new vscode.MarkdownString('Pfad auf dem lokalen System, aus dem der Ordner\/die Datei hochzuladen ist.');
                items.push(ftpPutConnectedLOCAL_PATHCompletion);

                const ftpPutConnectedSERVER_PATHCompletion = new vscode.CompletionItem('SERVER_PATH');
                ftpPutConnectedSERVER_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                ftpPutConnectedSERVER_PATHCompletion.insertText = new vscode.SnippetString("SERVER_PATH = \"${1}\"");
                ftpPutConnectedSERVER_PATHCompletion.documentation = new vscode.MarkdownString('Auf dem Server befindlicher Zielpfad der hochzuladenden Datei oder des zu hochzuladenden Verzeichnisses.');
                items.push(ftpPutConnectedSERVER_PATHCompletion);

                const ftpPutConnectedOPTIONAL_PARAMETERSCompletion = new vscode.CompletionItem('OPTIONAL_PARAMETERS');
                ftpPutConnectedOPTIONAL_PARAMETERSCompletion.kind = vscode.CompletionItemKind.Field;
                ftpPutConnectedOPTIONAL_PARAMETERSCompletion.insertText = new vscode.SnippetString("OPTIONAL_PARAMETERS = \"${1}\"");
                ftpPutConnectedOPTIONAL_PARAMETERSCompletion.documentation = new vscode.MarkdownString('Optionaler Wert, ansonsten wird Standartwert verwendet');
                items.push(ftpPutConnectedOPTIONAL_PARAMETERSCompletion);

                const ftpPutConnectedIS_BINARYCompletion = new vscode.CompletionItem('IS_BINARY');
                ftpPutConnectedIS_BINARYCompletion.kind = vscode.CompletionItemKind.Field;
                ftpPutConnectedIS_BINARYCompletion.insertText = new vscode.SnippetString("IS_BINARY = \"${1}\"");
                ftpPutConnectedIS_BINARYCompletion.documentation = new vscode.MarkdownString('Angabe, ob es sich um eine Bin\u00E4rdatei handelt. Default false.');
                items.push(ftpPutConnectedIS_BINARYCompletion);
            }

            if (/.*\s*ftpSiteConnected\s*\(.*/.test(linePrefix)) {

                const ftpSiteConnectedCONNECTION_NAMECompletion = new vscode.CompletionItem('CONNECTION_NAME');
                ftpSiteConnectedCONNECTION_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                ftpSiteConnectedCONNECTION_NAMECompletion.insertText = new vscode.SnippetString("CONNECTION_NAME = \"${1}\"");
                ftpSiteConnectedCONNECTION_NAMECompletion.documentation = new vscode.MarkdownString('Name der Verbindung. Dieser Name muss bei allen FTP*Connected-Kommandos, die mit der gleichen Verbindung arbeiten, \u00FCbereinstimmen.');
                items.push(ftpSiteConnectedCONNECTION_NAMECompletion);

                const ftpSiteConnectedCOMMANDCompletion = new vscode.CompletionItem('COMMAND');
                ftpSiteConnectedCOMMANDCompletion.kind = vscode.CompletionItemKind.Field;
                ftpSiteConnectedCOMMANDCompletion.insertText = new vscode.SnippetString("COMMAND = \"${1}\"");
                ftpSiteConnectedCOMMANDCompletion.documentation = new vscode.MarkdownString('SITE Kommando');
                items.push(ftpSiteConnectedCOMMANDCompletion);
            }

            if (/.*\s*generateRandomWords\s*\(.*/.test(linePrefix)) {

                const generateRandomWordsROWNUMCompletion = new vscode.CompletionItem('ROWNUM');
                generateRandomWordsROWNUMCompletion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsROWNUMCompletion.insertText = new vscode.SnippetString("ROWNUM = \"${1}\"");
                generateRandomWordsROWNUMCompletion.documentation = new vscode.MarkdownString('Anzahl in der Zieldatei zu erzeugender Zeilen mit Zufallsw\u00F6rtern.');
                items.push(generateRandomWordsROWNUMCompletion);

                const generateRandomWordsFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                generateRandomWordsFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                generateRandomWordsFILENAMECompletion.documentation = new vscode.MarkdownString('Absoluter oder relativer Dateipfad der Zieldatei, in denen die Testdaten abgespeichert werden (z. B. C:\\temp\\xlsx01.xlsx oder xlsx01.xlsx) (als Testdatendatei in for-Schleife verwendbar).');
                items.push(generateRandomWordsFILENAMECompletion);

                const generateRandomWordsREGEX00Completion = new vscode.CompletionItem('REGEX00');
                generateRandomWordsREGEX00Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX00Completion.insertText = new vscode.SnippetString("REGEX00 = \"${1}\"");
                generateRandomWordsREGEX00Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX00Completion);

                const generateRandomWordsREGEX01Completion = new vscode.CompletionItem('REGEX01');
                generateRandomWordsREGEX01Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX01Completion.insertText = new vscode.SnippetString("REGEX01 = \"${1}\"");
                generateRandomWordsREGEX01Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX01Completion);

                const generateRandomWordsREGEX02Completion = new vscode.CompletionItem('REGEX02');
                generateRandomWordsREGEX02Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX02Completion.insertText = new vscode.SnippetString("REGEX02 = \"${1}\"");
                generateRandomWordsREGEX02Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX02Completion);

                const generateRandomWordsREGEX03Completion = new vscode.CompletionItem('REGEX03');
                generateRandomWordsREGEX03Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX03Completion.insertText = new vscode.SnippetString("REGEX03 = \"${1}\"");
                generateRandomWordsREGEX03Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX03Completion);

                const generateRandomWordsREGEX04Completion = new vscode.CompletionItem('REGEX04');
                generateRandomWordsREGEX04Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX04Completion.insertText = new vscode.SnippetString("REGEX04 = \"${1}\"");
                generateRandomWordsREGEX04Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX04Completion);

                const generateRandomWordsREGEX05Completion = new vscode.CompletionItem('REGEX05');
                generateRandomWordsREGEX05Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX05Completion.insertText = new vscode.SnippetString("REGEX05 = \"${1}\"");
                generateRandomWordsREGEX05Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX05Completion);

                const generateRandomWordsREGEX06Completion = new vscode.CompletionItem('REGEX06');
                generateRandomWordsREGEX06Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX06Completion.insertText = new vscode.SnippetString("REGEX06 = \"${1}\"");
                generateRandomWordsREGEX06Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX06Completion);

                const generateRandomWordsREGEX07Completion = new vscode.CompletionItem('REGEX07');
                generateRandomWordsREGEX07Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX07Completion.insertText = new vscode.SnippetString("REGEX07 = \"${1}\"");
                generateRandomWordsREGEX07Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX07Completion);

                const generateRandomWordsREGEX08Completion = new vscode.CompletionItem('REGEX08');
                generateRandomWordsREGEX08Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX08Completion.insertText = new vscode.SnippetString("REGEX08 = \"${1}\"");
                generateRandomWordsREGEX08Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX08Completion);

                const generateRandomWordsREGEX09Completion = new vscode.CompletionItem('REGEX09');
                generateRandomWordsREGEX09Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX09Completion.insertText = new vscode.SnippetString("REGEX09 = \"${1}\"");
                generateRandomWordsREGEX09Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX09Completion);

                const generateRandomWordsREGEX10Completion = new vscode.CompletionItem('REGEX10');
                generateRandomWordsREGEX10Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX10Completion.insertText = new vscode.SnippetString("REGEX10 = \"${1}\"");
                generateRandomWordsREGEX10Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX10Completion);

                const generateRandomWordsREGEX11Completion = new vscode.CompletionItem('REGEX11');
                generateRandomWordsREGEX11Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX11Completion.insertText = new vscode.SnippetString("REGEX11 = \"${1}\"");
                generateRandomWordsREGEX11Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX11Completion);

                const generateRandomWordsREGEX12Completion = new vscode.CompletionItem('REGEX12');
                generateRandomWordsREGEX12Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX12Completion.insertText = new vscode.SnippetString("REGEX12 = \"${1}\"");
                generateRandomWordsREGEX12Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX12Completion);

                const generateRandomWordsREGEX13Completion = new vscode.CompletionItem('REGEX13');
                generateRandomWordsREGEX13Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX13Completion.insertText = new vscode.SnippetString("REGEX13 = \"${1}\"");
                generateRandomWordsREGEX13Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX13Completion);

                const generateRandomWordsREGEX14Completion = new vscode.CompletionItem('REGEX14');
                generateRandomWordsREGEX14Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX14Completion.insertText = new vscode.SnippetString("REGEX14 = \"${1}\"");
                generateRandomWordsREGEX14Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX14Completion);

                const generateRandomWordsREGEX15Completion = new vscode.CompletionItem('REGEX15');
                generateRandomWordsREGEX15Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX15Completion.insertText = new vscode.SnippetString("REGEX15 = \"${1}\"");
                generateRandomWordsREGEX15Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX15Completion);

                const generateRandomWordsREGEX16Completion = new vscode.CompletionItem('REGEX16');
                generateRandomWordsREGEX16Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX16Completion.insertText = new vscode.SnippetString("REGEX16 = \"${1}\"");
                generateRandomWordsREGEX16Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX16Completion);

                const generateRandomWordsREGEX17Completion = new vscode.CompletionItem('REGEX17');
                generateRandomWordsREGEX17Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX17Completion.insertText = new vscode.SnippetString("REGEX17 = \"${1}\"");
                generateRandomWordsREGEX17Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX17Completion);

                const generateRandomWordsREGEX18Completion = new vscode.CompletionItem('REGEX18');
                generateRandomWordsREGEX18Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX18Completion.insertText = new vscode.SnippetString("REGEX18 = \"${1}\"");
                generateRandomWordsREGEX18Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX18Completion);

                const generateRandomWordsREGEX19Completion = new vscode.CompletionItem('REGEX19');
                generateRandomWordsREGEX19Completion.kind = vscode.CompletionItemKind.Field;
                generateRandomWordsREGEX19Completion.insertText = new vscode.SnippetString("REGEX19 = \"${1}\"");
                generateRandomWordsREGEX19Completion.documentation = new vscode.MarkdownString('REGEX');
                items.push(generateRandomWordsREGEX19Completion);
            }

            if (/.*\s*getAllFilesOfPath\s*\(.*/.test(linePrefix)) {

                const getAllFilesOfPathPATHCompletion = new vscode.CompletionItem('PATH');
                getAllFilesOfPathPATHCompletion.kind = vscode.CompletionItemKind.Field;
                getAllFilesOfPathPATHCompletion.insertText = new vscode.SnippetString("PATH = \"${1}\"");
                getAllFilesOfPathPATHCompletion.documentation = new vscode.MarkdownString('Pfad des Ordners');
                items.push(getAllFilesOfPathPATHCompletion);

                const getAllFilesOfPathABSOLUTE_PATHCompletion = new vscode.CompletionItem('ABSOLUTE_PATH');
                getAllFilesOfPathABSOLUTE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                getAllFilesOfPathABSOLUTE_PATHCompletion.insertText = new vscode.SnippetString("ABSOLUTE_PATH = \"${1}\"");
                getAllFilesOfPathABSOLUTE_PATHCompletion.documentation = new vscode.MarkdownString('Angabe, ob die Dateien mit einem absoluten Pfad angegeben werden soll oder nur der Dateiname (Dateiname als Default)');
                items.push(getAllFilesOfPathABSOLUTE_PATHCompletion);

                const getAllFilesOfPathCSV_FILECompletion = new vscode.CompletionItem('CSV_FILE');
                getAllFilesOfPathCSV_FILECompletion.kind = vscode.CompletionItemKind.Field;
                getAllFilesOfPathCSV_FILECompletion.insertText = new vscode.SnippetString("CSV_FILE = \"${1}\"");
                getAllFilesOfPathCSV_FILECompletion.documentation = new vscode.MarkdownString('Speicherort der CSV');
                items.push(getAllFilesOfPathCSV_FILECompletion);

                const getAllFilesOfPathFILE_EXTENSIONCompletion = new vscode.CompletionItem('FILE_EXTENSION');
                getAllFilesOfPathFILE_EXTENSIONCompletion.kind = vscode.CompletionItemKind.Field;
                getAllFilesOfPathFILE_EXTENSIONCompletion.insertText = new vscode.SnippetString("FILE_EXTENSION = \"${1}\"");
                getAllFilesOfPathFILE_EXTENSIONCompletion.documentation = new vscode.MarkdownString('Schr\u00E4nkt die Auflistung auf einen Dateitypen ein.');
                items.push(getAllFilesOfPathFILE_EXTENSIONCompletion);

                const getAllFilesOfPathINCLUDE_HIDDEN_FILESCompletion = new vscode.CompletionItem('INCLUDE_HIDDEN_FILES');
                getAllFilesOfPathINCLUDE_HIDDEN_FILESCompletion.kind = vscode.CompletionItemKind.Field;
                getAllFilesOfPathINCLUDE_HIDDEN_FILESCompletion.insertText = new vscode.SnippetString("INCLUDE_HIDDEN_FILES = \"${1}\"");
                getAllFilesOfPathINCLUDE_HIDDEN_FILESCompletion.documentation = new vscode.MarkdownString('Versteckte Dateien werden angezeigt, falls true. Default false');
                items.push(getAllFilesOfPathINCLUDE_HIDDEN_FILESCompletion);

                const getAllFilesOfPathTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                getAllFilesOfPathTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                getAllFilesOfPathTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                getAllFilesOfPathTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den die Anzahl der Dateien in einem Ordner geschrieben wird.');
                items.push(getAllFilesOfPathTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*getAttributeFromElementWeb\s*\(.*/.test(linePrefix)) {

                const getAttributeFromElementWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                getAttributeFromElementWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                getAttributeFromElementWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                getAttributeFromElementWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, um das Element zu finden (z.B. CSS, xpath).');
                items.push(getAttributeFromElementWebBY_CRITERIACompletion);

                const getAttributeFromElementWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                getAttributeFromElementWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                getAttributeFromElementWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                getAttributeFromElementWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Name des Elements, das Text enthalten soll.');
                items.push(getAttributeFromElementWebELEMENT_NAMECompletion);

                const getAttributeFromElementWebATTRIBUTE_NAMECompletion = new vscode.CompletionItem('ATTRIBUTE_NAME');
                getAttributeFromElementWebATTRIBUTE_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                getAttributeFromElementWebATTRIBUTE_NAMECompletion.insertText = new vscode.SnippetString("ATTRIBUTE_NAME = \"${1}\"");
                getAttributeFromElementWebATTRIBUTE_NAMECompletion.documentation = new vscode.MarkdownString('Name des Attributs des Elements.');
                items.push(getAttributeFromElementWebATTRIBUTE_NAMECompletion);

                const getAttributeFromElementWebTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                getAttributeFromElementWebTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                getAttributeFromElementWebTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                getAttributeFromElementWebTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Element-Text geschrieben werden soll.');
                items.push(getAttributeFromElementWebTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*getBrowserLog\s*\(.*/.test(linePrefix)) {

                const getBrowserLogOUTPUT_FILECompletion = new vscode.CompletionItem('OUTPUT_FILE');
                getBrowserLogOUTPUT_FILECompletion.kind = vscode.CompletionItemKind.Field;
                getBrowserLogOUTPUT_FILECompletion.insertText = new vscode.SnippetString("OUTPUT_FILE = \"${1}\"");
                getBrowserLogOUTPUT_FILECompletion.documentation = new vscode.MarkdownString('Datei, in die das Log gespeichert werden soll.');
                items.push(getBrowserLogOUTPUT_FILECompletion);

                const getBrowserLogOVERWRITE_EXISTING_OUTPUT_FILECompletion = new vscode.CompletionItem('OVERWRITE_EXISTING_OUTPUT_FILE');
                getBrowserLogOVERWRITE_EXISTING_OUTPUT_FILECompletion.kind = vscode.CompletionItemKind.Field;
                getBrowserLogOVERWRITE_EXISTING_OUTPUT_FILECompletion.insertText = new vscode.SnippetString("OVERWRITE_EXISTING_OUTPUT_FILE = \"${1}\"");
                getBrowserLogOVERWRITE_EXISTING_OUTPUT_FILECompletion.documentation = new vscode.MarkdownString('Soll der Inhalt einer bereits bestehenden Datei \u00FCberschrieben werden? (Default: True)');
                items.push(getBrowserLogOVERWRITE_EXISTING_OUTPUT_FILECompletion);

                const getBrowserLogOUTPUT_FILE_ENCODINGCompletion = new vscode.CompletionItem('OUTPUT_FILE_ENCODING');
                getBrowserLogOUTPUT_FILE_ENCODINGCompletion.kind = vscode.CompletionItemKind.Field;
                getBrowserLogOUTPUT_FILE_ENCODINGCompletion.insertText = new vscode.SnippetString("OUTPUT_FILE_ENCODING = \"${1}\"");
                getBrowserLogOUTPUT_FILE_ENCODINGCompletion.documentation = new vscode.MarkdownString('Encoding der Output-Datei (Default: UTF_8)');
                items.push(getBrowserLogOUTPUT_FILE_ENCODINGCompletion);

                const getBrowserLogPRINT_LOGCompletion = new vscode.CompletionItem('PRINT_LOG');
                getBrowserLogPRINT_LOGCompletion.kind = vscode.CompletionItemKind.Field;
                getBrowserLogPRINT_LOGCompletion.insertText = new vscode.SnippetString("PRINT_LOG = \"${1}\"");
                getBrowserLogPRINT_LOGCompletion.documentation = new vscode.MarkdownString('Soll der Inhalt des Browser-Logs auf der mateo-Konsole (mateo.log) ausgegeben werden? (Default: false)');
                items.push(getBrowserLogPRINT_LOGCompletion);

                const getBrowserLogLOG_LEVELCompletion = new vscode.CompletionItem('LOG_LEVEL');
                getBrowserLogLOG_LEVELCompletion.kind = vscode.CompletionItemKind.Field;
                getBrowserLogLOG_LEVELCompletion.insertText = new vscode.SnippetString("LOG_LEVEL = \"${1}\"");
                getBrowserLogLOG_LEVELCompletion.documentation = new vscode.MarkdownString('Log-Level, das herausgeschrieben werden soll. Einzelner Wert, keine Liste. Kritischere Log-Level sind mit eingeschlossen. Siehe java.util.logging.Level f\u00FCr Log-Level-Hierarchie.  Default ist INFO. M\u00F6glich sind:  OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL');
                items.push(getBrowserLogLOG_LEVELCompletion);

                const getBrowserLogLOG_TYPESCompletion = new vscode.CompletionItem('LOG_TYPES');
                getBrowserLogLOG_TYPESCompletion.kind = vscode.CompletionItemKind.Field;
                getBrowserLogLOG_TYPESCompletion.insertText = new vscode.SnippetString("LOG_TYPES = \"${1}\"");
                getBrowserLogLOG_TYPESCompletion.documentation = new vscode.MarkdownString('Liste (Separator: \';\') mit einem oder mehreren Typen von  Logs, die herausgeschrieben werden sollen (siehe org.openqa.selenium.logging.LogType). Default ist BROWSER. M\u00F6glich sind:  BROWSER, CLIENT, DRIVER, PERFORMANCE, PERFORMANCE, SERVER');
                items.push(getBrowserLogLOG_TYPESCompletion);
            }

            if (/.*\s*getColourFromFocussedWinEle\s*\(.*/.test(linePrefix)) {

                const getColourFromFocussedWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                getColourFromFocussedWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                getColourFromFocussedWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                getColourFromFocussedWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(getColourFromFocussedWinEleWINDOW_NAMECompletion);

                const getColourFromFocussedWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                getColourFromFocussedWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                getColourFromFocussedWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                getColourFromFocussedWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(getColourFromFocussedWinElePROCESS_NAMECompletion);

                const getColourFromFocussedWinEleEQUALS_COLOURCompletion = new vscode.CompletionItem('EQUALS_COLOUR');
                getColourFromFocussedWinEleEQUALS_COLOURCompletion.kind = vscode.CompletionItemKind.Field;
                getColourFromFocussedWinEleEQUALS_COLOURCompletion.insertText = new vscode.SnippetString("EQUALS_COLOUR = \"${1}\"");
                getColourFromFocussedWinEleEQUALS_COLOURCompletion.documentation = new vscode.MarkdownString('Farbe, mit dem die gefundene Farbe verglichen werden soll (Fromat: R-G-B)');
                items.push(getColourFromFocussedWinEleEQUALS_COLOURCompletion);

                const getColourFromFocussedWinEleTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                getColourFromFocussedWinEleTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                getColourFromFocussedWinEleTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                getColourFromFocussedWinEleTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den das Resultat geschrieben werden soll.');
                items.push(getColourFromFocussedWinEleTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*getCookiesWeb\s*\(.*/.test(linePrefix)) {

                const getCookiesWebURLCompletion = new vscode.CompletionItem('URL');
                getCookiesWebURLCompletion.kind = vscode.CompletionItemKind.Field;
                getCookiesWebURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                getCookiesWebURLCompletion.documentation = new vscode.MarkdownString('URL zu welcher die Cookies gel\u00F6scht werden sollen');
                items.push(getCookiesWebURLCompletion);

                const getCookiesWebCOOKIE_NAMECompletion = new vscode.CompletionItem('COOKIE_NAME');
                getCookiesWebCOOKIE_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                getCookiesWebCOOKIE_NAMECompletion.insertText = new vscode.SnippetString("COOKIE_NAME = \"${1}\"");
                getCookiesWebCOOKIE_NAMECompletion.documentation = new vscode.MarkdownString('Name des zu l\u00F6schenden Cookies');
                items.push(getCookiesWebCOOKIE_NAMECompletion);

                const getCookiesWebTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                getCookiesWebTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                getCookiesWebTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                getCookiesWebTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel, worunter die Cookies in der Storage-Datei gespeichert werden sollen.');
                items.push(getCookiesWebTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*getCurrentTitleWeb\s*\(.*/.test(linePrefix)) {

                const getCurrentTitleWebTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                getCurrentTitleWebTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                getCurrentTitleWebTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                getCurrentTitleWebTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, unter dem der Titel abgelegt werden soll.');
                items.push(getCurrentTitleWebTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*getCurrentURLMobile\s*\(.*/.test(linePrefix)) {

                const getCurrentURLMobileREGEX_FILTERCompletion = new vscode.CompletionItem('REGEX_FILTER');
                getCurrentURLMobileREGEX_FILTERCompletion.kind = vscode.CompletionItemKind.Field;
                getCurrentURLMobileREGEX_FILTERCompletion.insertText = new vscode.SnippetString("REGEX_FILTER = \"${1}\"");
                getCurrentURLMobileREGEX_FILTERCompletion.documentation = new vscode.MarkdownString('Ist der Parameter belegt, wird die erste Teilzeichenkette herausgegeben, die den regul\u00E4ren Ausdruck enth\u00E4lt.');
                items.push(getCurrentURLMobileREGEX_FILTERCompletion);

                const getCurrentURLMobileTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                getCurrentURLMobileTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                getCurrentURLMobileTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                getCurrentURLMobileTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Der Parameter kann mit dem Namen einer Variable belegt werden, in der die URL gespeichert werden soll.');
                items.push(getCurrentURLMobileTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*getCurrentURLWeb\s*\(.*/.test(linePrefix)) {

                const getCurrentURLWebREGEX_FILTERCompletion = new vscode.CompletionItem('REGEX_FILTER');
                getCurrentURLWebREGEX_FILTERCompletion.kind = vscode.CompletionItemKind.Field;
                getCurrentURLWebREGEX_FILTERCompletion.insertText = new vscode.SnippetString("REGEX_FILTER = \"${1}\"");
                getCurrentURLWebREGEX_FILTERCompletion.documentation = new vscode.MarkdownString('Regul\u00E4rer Ausdruck, um den Text vor dem Speichern zu filtern.');
                items.push(getCurrentURLWebREGEX_FILTERCompletion);

                const getCurrentURLWebTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                getCurrentURLWebTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                getCurrentURLWebTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                getCurrentURLWebTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den die URL geschrieben werden soll.');
                items.push(getCurrentURLWebTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*getItemByTextJava\s*\(.*/.test(linePrefix)) {

                const getItemByTextJavaTARGETCompletion = new vscode.CompletionItem('TARGET');
                getItemByTextJavaTARGETCompletion.kind = vscode.CompletionItemKind.Field;
                getItemByTextJavaTARGETCompletion.insertText = new vscode.SnippetString("TARGET = \"${1}\"");
                getItemByTextJavaTARGETCompletion.documentation = new vscode.MarkdownString('Ziel');
                items.push(getItemByTextJavaTARGETCompletion);

                const getItemByTextJavaTEXTCompletion = new vscode.CompletionItem('TEXT');
                getItemByTextJavaTEXTCompletion.kind = vscode.CompletionItemKind.Field;
                getItemByTextJavaTEXTCompletion.insertText = new vscode.SnippetString("TEXT = \"${1}\"");
                getItemByTextJavaTEXTCompletion.documentation = new vscode.MarkdownString('Text, welcher in dem Element geklickt werden soll');
                items.push(getItemByTextJavaTEXTCompletion);

                const getItemByTextJavaINDEXCompletion = new vscode.CompletionItem('INDEX');
                getItemByTextJavaINDEXCompletion.kind = vscode.CompletionItemKind.Field;
                getItemByTextJavaINDEXCompletion.insertText = new vscode.SnippetString("INDEX = \"${1}\"");
                getItemByTextJavaINDEXCompletion.documentation = new vscode.MarkdownString('Index der Zielspalte');
                items.push(getItemByTextJavaINDEXCompletion);

                const getItemByTextJavaOFFSETCompletion = new vscode.CompletionItem('OFFSET');
                getItemByTextJavaOFFSETCompletion.kind = vscode.CompletionItemKind.Field;
                getItemByTextJavaOFFSETCompletion.insertText = new vscode.SnippetString("OFFSET = \"${1}\"");
                getItemByTextJavaOFFSETCompletion.documentation = new vscode.MarkdownString('Offset falls mehrere Elemente existieren');
                items.push(getItemByTextJavaOFFSETCompletion);

                const getItemByTextJavaWAIT_MILLISCompletion = new vscode.CompletionItem('WAIT_MILLIS');
                getItemByTextJavaWAIT_MILLISCompletion.kind = vscode.CompletionItemKind.Field;
                getItemByTextJavaWAIT_MILLISCompletion.insertText = new vscode.SnippetString("WAIT_MILLIS = \"${1}\"");
                getItemByTextJavaWAIT_MILLISCompletion.documentation = new vscode.MarkdownString('Optionale Anzahl zu wartender Millisekunden bis das Element verf\u00FCgbar ist. Default 10000.');
                items.push(getItemByTextJavaWAIT_MILLISCompletion);

                const getItemByTextJavaBY_NAMECompletion = new vscode.CompletionItem('BY_NAME');
                getItemByTextJavaBY_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                getItemByTextJavaBY_NAMECompletion.insertText = new vscode.SnippetString("BY_NAME = \"${1}\"");
                getItemByTextJavaBY_NAMECompletion.documentation = new vscode.MarkdownString('Flag, \u00FCber den gekennzeichnet werden kann, dass das Element \u00FCber den Namen und nicht den Identifier (z.B. JButton1) angesprochen wird.');
                items.push(getItemByTextJavaBY_NAMECompletion);

                const getItemByTextJavaCONTAINSCompletion = new vscode.CompletionItem('CONTAINS');
                getItemByTextJavaCONTAINSCompletion.kind = vscode.CompletionItemKind.Field;
                getItemByTextJavaCONTAINSCompletion.insertText = new vscode.SnippetString("CONTAINS = \"${1}\"");
                getItemByTextJavaCONTAINSCompletion.documentation = new vscode.MarkdownString('True, falls eine Zeichenreihenfolge eine Teilzeichenfolge enth\u00E4lt');
                items.push(getItemByTextJavaCONTAINSCompletion);

                const getItemByTextJavaTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                getItemByTextJavaTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                getItemByTextJavaTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                getItemByTextJavaTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann ein Schl\u00FCssel gesetzt werden, unter dem das Ergebnis dieser Operation gespeichert wird.');
                items.push(getItemByTextJavaTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*getRunningDrivers\s*\(.*/.test(linePrefix)) {

                const getRunningDriversTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                getRunningDriversTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                getRunningDriversTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                getRunningDriversTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Optionaler Schl\u00FCssel, unter dem die aktuell aktiven WebDriver-Instanzen im Storage gespeichert werden k\u00F6nnen.');
                items.push(getRunningDriversTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*getSelectedElementDropDownWinEle\s*\(.*/.test(linePrefix)) {

                const getSelectedElementDropDownWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                getSelectedElementDropDownWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                getSelectedElementDropDownWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                getSelectedElementDropDownWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(getSelectedElementDropDownWinEleWINDOW_NAMECompletion);

                const getSelectedElementDropDownWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                getSelectedElementDropDownWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                getSelectedElementDropDownWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                getSelectedElementDropDownWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(getSelectedElementDropDownWinElePROCESS_NAMECompletion);

                const getSelectedElementDropDownWinEleDROPDOWN_NAMECompletion = new vscode.CompletionItem('DROPDOWN_NAME');
                getSelectedElementDropDownWinEleDROPDOWN_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                getSelectedElementDropDownWinEleDROPDOWN_NAMECompletion.insertText = new vscode.SnippetString("DROPDOWN_NAME = \"${1}\"");
                getSelectedElementDropDownWinEleDROPDOWN_NAMECompletion.documentation = new vscode.MarkdownString('Name des Dropdown Men\u00FCs. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen zu ermitteln.');
                items.push(getSelectedElementDropDownWinEleDROPDOWN_NAMECompletion);

                const getSelectedElementDropDownWinEleEQUALS_TEXTCompletion = new vscode.CompletionItem('EQUALS_TEXT');
                getSelectedElementDropDownWinEleEQUALS_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                getSelectedElementDropDownWinEleEQUALS_TEXTCompletion.insertText = new vscode.SnippetString("EQUALS_TEXT = \"${1}\"");
                getSelectedElementDropDownWinEleEQUALS_TEXTCompletion.documentation = new vscode.MarkdownString('Wert, mit dem der Inhalt verglichen werden soll');
                items.push(getSelectedElementDropDownWinEleEQUALS_TEXTCompletion);

                const getSelectedElementDropDownWinEleDROPDOWN_INDEXCompletion = new vscode.CompletionItem('DROPDOWN_INDEX');
                getSelectedElementDropDownWinEleDROPDOWN_INDEXCompletion.kind = vscode.CompletionItemKind.Field;
                getSelectedElementDropDownWinEleDROPDOWN_INDEXCompletion.insertText = new vscode.SnippetString("DROPDOWN_INDEX = \"${1}\"");
                getSelectedElementDropDownWinEleDROPDOWN_INDEXCompletion.documentation = new vscode.MarkdownString('Alternativ zum Namen kann ein Index angegeben werden, der sich auf alle Dropdown-menues des Fensers bezieht.');
                items.push(getSelectedElementDropDownWinEleDROPDOWN_INDEXCompletion);

                const getSelectedElementDropDownWinEleTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                getSelectedElementDropDownWinEleTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                getSelectedElementDropDownWinEleTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                getSelectedElementDropDownWinEleTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den das Resultat geschrieben werden soll.');
                items.push(getSelectedElementDropDownWinEleTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*getTextFromElementWeb\s*\(.*/.test(linePrefix)) {

                const getTextFromElementWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                getTextFromElementWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                getTextFromElementWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                getTextFromElementWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, um das Element zu finden (z.B. CSS, xpath).');
                items.push(getTextFromElementWebBY_CRITERIACompletion);

                const getTextFromElementWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                getTextFromElementWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                getTextFromElementWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                getTextFromElementWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Name des Elements, das Text enthalten soll.');
                items.push(getTextFromElementWebELEMENT_NAMECompletion);

                const getTextFromElementWebREGEX_FILTERCompletion = new vscode.CompletionItem('REGEX_FILTER');
                getTextFromElementWebREGEX_FILTERCompletion.kind = vscode.CompletionItemKind.Field;
                getTextFromElementWebREGEX_FILTERCompletion.insertText = new vscode.SnippetString("REGEX_FILTER = \"${1}\"");
                getTextFromElementWebREGEX_FILTERCompletion.documentation = new vscode.MarkdownString('Regul\u00E4rer Ausdruck, um den Text vor dem Speichern zu filtern.');
                items.push(getTextFromElementWebREGEX_FILTERCompletion);

                const getTextFromElementWebTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                getTextFromElementWebTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                getTextFromElementWebTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                getTextFromElementWebTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Element-Text geschrieben werden soll.');
                items.push(getTextFromElementWebTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*getTextFromFocussedWinEle\s*\(.*/.test(linePrefix)) {

                const getTextFromFocussedWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                getTextFromFocussedWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                getTextFromFocussedWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                getTextFromFocussedWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(getTextFromFocussedWinEleWINDOW_NAMECompletion);

                const getTextFromFocussedWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                getTextFromFocussedWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                getTextFromFocussedWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                getTextFromFocussedWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(getTextFromFocussedWinElePROCESS_NAMECompletion);

                const getTextFromFocussedWinEleEQUALS_TEXTCompletion = new vscode.CompletionItem('EQUALS_TEXT');
                getTextFromFocussedWinEleEQUALS_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                getTextFromFocussedWinEleEQUALS_TEXTCompletion.insertText = new vscode.SnippetString("EQUALS_TEXT = \"${1}\"");
                getTextFromFocussedWinEleEQUALS_TEXTCompletion.documentation = new vscode.MarkdownString('String, mit dem der gefundene Text verglichen werden soll. Wird \'BLANK\' \u00FCbergeben, wird gepr\u00FCft ob das Feld leer ist.');
                items.push(getTextFromFocussedWinEleEQUALS_TEXTCompletion);

                const getTextFromFocussedWinEleTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                getTextFromFocussedWinEleTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                getTextFromFocussedWinEleTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                getTextFromFocussedWinEleTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den das Resultat geschrieben werden soll.');
                items.push(getTextFromFocussedWinEleTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*getTextJava\s*\(.*/.test(linePrefix)) {

                const getTextJavaTARGETCompletion = new vscode.CompletionItem('TARGET');
                getTextJavaTARGETCompletion.kind = vscode.CompletionItemKind.Field;
                getTextJavaTARGETCompletion.insertText = new vscode.SnippetString("TARGET = \"${1}\"");
                getTextJavaTARGETCompletion.documentation = new vscode.MarkdownString('Ziel');
                items.push(getTextJavaTARGETCompletion);

                const getTextJavaWAIT_MILLISCompletion = new vscode.CompletionItem('WAIT_MILLIS');
                getTextJavaWAIT_MILLISCompletion.kind = vscode.CompletionItemKind.Field;
                getTextJavaWAIT_MILLISCompletion.insertText = new vscode.SnippetString("WAIT_MILLIS = \"${1}\"");
                getTextJavaWAIT_MILLISCompletion.documentation = new vscode.MarkdownString('Optionale Anzahl zu wartender Millisekunden bis das Element verf\u00FCgbar ist. Default 10000.');
                items.push(getTextJavaWAIT_MILLISCompletion);

                const getTextJavaBY_NAMECompletion = new vscode.CompletionItem('BY_NAME');
                getTextJavaBY_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                getTextJavaBY_NAMECompletion.insertText = new vscode.SnippetString("BY_NAME = \"${1}\"");
                getTextJavaBY_NAMECompletion.documentation = new vscode.MarkdownString('Flag, \u00FCber den gekennzeichnet werden kann, dass das Element \u00FCber den Namen und nicht den Identifier (z.B. JButton1) angesprochen wird.');
                items.push(getTextJavaBY_NAMECompletion);

                const getTextJavaTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                getTextJavaTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                getTextJavaTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                getTextJavaTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Optionaler Key im Storage um den R\u00FCckgabewert zu speichern');
                items.push(getTextJavaTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*getTextMobile\s*\(.*/.test(linePrefix)) {

                const getTextMobileBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                getTextMobileBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                getTextMobileBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                getTextMobileBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll (m\u00F6glich sind: id, name, xpath, class_name, tag_name, link_name, partial_link_name, css, accessability_id, ios_automation). Der Default-Wert ist \'name\'.');
                items.push(getTextMobileBY_CRITERIACompletion);

                const getTextMobileEXPRESSION_TEXTCompletion = new vscode.CompletionItem('EXPRESSION_TEXT');
                getTextMobileEXPRESSION_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                getTextMobileEXPRESSION_TEXTCompletion.insertText = new vscode.SnippetString("EXPRESSION_TEXT = \"${1}\"");
                getTextMobileEXPRESSION_TEXTCompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(getTextMobileEXPRESSION_TEXTCompletion);

                const getTextMobileCOMPARE_TOCompletion = new vscode.CompletionItem('COMPARE_TO');
                getTextMobileCOMPARE_TOCompletion.kind = vscode.CompletionItemKind.Field;
                getTextMobileCOMPARE_TOCompletion.insertText = new vscode.SnippetString("COMPARE_TO = \"${1}\"");
                getTextMobileCOMPARE_TOCompletion.documentation = new vscode.MarkdownString('Der Parameter kann mit einem Text belegt werden, mit dem der ausgegeben Text verglichen wird. Weicht der ausgegebene Text von diesem Parameter ab, wird eine Warnung ausgegeben. Wird der Parameter mit \'BLANK\' belegt, wird \u00FCberpr\u00FCft, ob der Text leer ist.');
                items.push(getTextMobileCOMPARE_TOCompletion);

                const getTextMobileTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                getTextMobileTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                getTextMobileTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                getTextMobileTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Ist der Parameter belegt, wird der Text, der ausgegeben wird, in eine Variable mit diesem Namen gespeichert.');
                items.push(getTextMobileTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*getTextWindow\s*\(.*/.test(linePrefix)) {

                const getTextWindowWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                getTextWindowWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                getTextWindowWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                getTextWindowWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(getTextWindowWINDOW_NAMECompletion);

                const getTextWindowTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                getTextWindowTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                getTextWindowTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                getTextWindowTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier muss ein Schl\u00FCssel gesetzt werden, unter dem der Text des Fensters gespeichert wird.');
                items.push(getTextWindowTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*greaterThanAlpha\s*\(.*/.test(linePrefix)) {

                const greaterThanAlphaLEFTCompletion = new vscode.CompletionItem('LEFT');
                greaterThanAlphaLEFTCompletion.kind = vscode.CompletionItemKind.Field;
                greaterThanAlphaLEFTCompletion.insertText = new vscode.SnippetString("LEFT = \"${1}\"");
                greaterThanAlphaLEFTCompletion.documentation = new vscode.MarkdownString('Parameter, der links vom Vergleichs-Operator stehen soll.');
                items.push(greaterThanAlphaLEFTCompletion);

                const greaterThanAlphaRIGHTCompletion = new vscode.CompletionItem('RIGHT');
                greaterThanAlphaRIGHTCompletion.kind = vscode.CompletionItemKind.Field;
                greaterThanAlphaRIGHTCompletion.insertText = new vscode.SnippetString("RIGHT = \"${1}\"");
                greaterThanAlphaRIGHTCompletion.documentation = new vscode.MarkdownString('Parameter, der rechts vom Vergleichs-Operator stehen soll.');
                items.push(greaterThanAlphaRIGHTCompletion);
            }

            if (/.*\s*greaterThanDate\s*\(.*/.test(linePrefix)) {

                const greaterThanDateLEFTCompletion = new vscode.CompletionItem('LEFT');
                greaterThanDateLEFTCompletion.kind = vscode.CompletionItemKind.Field;
                greaterThanDateLEFTCompletion.insertText = new vscode.SnippetString("LEFT = \"${1}\"");
                greaterThanDateLEFTCompletion.documentation = new vscode.MarkdownString('Parameter, der links vom Vergleichs-Operator stehen soll.');
                items.push(greaterThanDateLEFTCompletion);

                const greaterThanDateRIGHTCompletion = new vscode.CompletionItem('RIGHT');
                greaterThanDateRIGHTCompletion.kind = vscode.CompletionItemKind.Field;
                greaterThanDateRIGHTCompletion.insertText = new vscode.SnippetString("RIGHT = \"${1}\"");
                greaterThanDateRIGHTCompletion.documentation = new vscode.MarkdownString('Parameter, der rechts vom Vergleichs-Operator stehen soll.');
                items.push(greaterThanDateRIGHTCompletion);
            }

            if (/.*\s*greaterThanNum\s*\(.*/.test(linePrefix)) {

                const greaterThanNumLEFTCompletion = new vscode.CompletionItem('LEFT');
                greaterThanNumLEFTCompletion.kind = vscode.CompletionItemKind.Field;
                greaterThanNumLEFTCompletion.insertText = new vscode.SnippetString("LEFT = \"${1}\"");
                greaterThanNumLEFTCompletion.documentation = new vscode.MarkdownString('Parameter, der links vom Vergleichs-Operator stehen soll.');
                items.push(greaterThanNumLEFTCompletion);

                const greaterThanNumRIGHTCompletion = new vscode.CompletionItem('RIGHT');
                greaterThanNumRIGHTCompletion.kind = vscode.CompletionItemKind.Field;
                greaterThanNumRIGHTCompletion.insertText = new vscode.SnippetString("RIGHT = \"${1}\"");
                greaterThanNumRIGHTCompletion.documentation = new vscode.MarkdownString('Parameter, der rechts vom Vergleichs-Operator stehen soll.');
                items.push(greaterThanNumRIGHTCompletion);
            }

            if (/.*\s*help\s*\(.*/.test(linePrefix)) {

                const helpMESSAGECompletion = new vscode.CompletionItem('MESSAGE');
                helpMESSAGECompletion.kind = vscode.CompletionItemKind.Field;
                helpMESSAGECompletion.insertText = new vscode.SnippetString("MESSAGE = \"${1}\"");
                helpMESSAGECompletion.documentation = new vscode.MarkdownString('Abzulegende Nachricht.');
                items.push(helpMESSAGECompletion);

                const helpFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                helpFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                helpFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                helpFILENAMECompletion.documentation = new vscode.MarkdownString('Pfad und Name der Datei.');
                items.push(helpFILENAMECompletion);
            }

            if (/.*\s*hideCommandOverlay\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*hideKeyboard\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*hoverAndClickWeb\s*\(.*/.test(linePrefix)) {

                const hoverAndClickWebBY_CRITERIA_HOVERCompletion = new vscode.CompletionItem('BY_CRITERIA_HOVER');
                hoverAndClickWebBY_CRITERIA_HOVERCompletion.kind = vscode.CompletionItemKind.Field;
                hoverAndClickWebBY_CRITERIA_HOVERCompletion.insertText = new vscode.SnippetString("BY_CRITERIA_HOVER = \"${1}\"");
                hoverAndClickWebBY_CRITERIA_HOVERCompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Hover-Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden.');
                items.push(hoverAndClickWebBY_CRITERIA_HOVERCompletion);

                const hoverAndClickWebELEMENT_NAME_HOVERCompletion = new vscode.CompletionItem('ELEMENT_NAME_HOVER');
                hoverAndClickWebELEMENT_NAME_HOVERCompletion.kind = vscode.CompletionItemKind.Field;
                hoverAndClickWebELEMENT_NAME_HOVERCompletion.insertText = new vscode.SnippetString("ELEMENT_NAME_HOVER = \"${1}\"");
                hoverAndClickWebELEMENT_NAME_HOVERCompletion.documentation = new vscode.MarkdownString('Bezeichner des Hover-Elements abh\u00E4ngig vom Kriterium.');
                items.push(hoverAndClickWebELEMENT_NAME_HOVERCompletion);

                const hoverAndClickWebBY_CRITERIA_CLICKCompletion = new vscode.CompletionItem('BY_CRITERIA_CLICK');
                hoverAndClickWebBY_CRITERIA_CLICKCompletion.kind = vscode.CompletionItemKind.Field;
                hoverAndClickWebBY_CRITERIA_CLICKCompletion.insertText = new vscode.SnippetString("BY_CRITERIA_CLICK = \"${1}\"");
                hoverAndClickWebBY_CRITERIA_CLICKCompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Click-Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden.');
                items.push(hoverAndClickWebBY_CRITERIA_CLICKCompletion);

                const hoverAndClickWebELEMENT_NAME_CLICKCompletion = new vscode.CompletionItem('ELEMENT_NAME_CLICK');
                hoverAndClickWebELEMENT_NAME_CLICKCompletion.kind = vscode.CompletionItemKind.Field;
                hoverAndClickWebELEMENT_NAME_CLICKCompletion.insertText = new vscode.SnippetString("ELEMENT_NAME_CLICK = \"${1}\"");
                hoverAndClickWebELEMENT_NAME_CLICKCompletion.documentation = new vscode.MarkdownString('Bezeichner des Click-Elements abh\u00E4ngig vom Kriterium.');
                items.push(hoverAndClickWebELEMENT_NAME_CLICKCompletion);

                const hoverAndClickWebSCROLL_XCompletion = new vscode.CompletionItem('SCROLL_X');
                hoverAndClickWebSCROLL_XCompletion.kind = vscode.CompletionItemKind.Field;
                hoverAndClickWebSCROLL_XCompletion.insertText = new vscode.SnippetString("SCROLL_X = \"${1}\"");
                hoverAndClickWebSCROLL_XCompletion.documentation = new vscode.MarkdownString('Anzahl des Pixel in horizontaler Richtung, um die das Fenster in Verh\u00E4ltnis zum Hover-Punkt vor dem Klicken des Click-Punkts verschoben werden soll.');
                items.push(hoverAndClickWebSCROLL_XCompletion);

                const hoverAndClickWebSCROLL_YCompletion = new vscode.CompletionItem('SCROLL_Y');
                hoverAndClickWebSCROLL_YCompletion.kind = vscode.CompletionItemKind.Field;
                hoverAndClickWebSCROLL_YCompletion.insertText = new vscode.SnippetString("SCROLL_Y = \"${1}\"");
                hoverAndClickWebSCROLL_YCompletion.documentation = new vscode.MarkdownString('Anzahl des Pixel in vertikaler Richtung, um die das Fenster in Verh\u00E4ltnis zum Hover-Punkt vor dem Klicken des Click-Punkts verschoben werden soll.');
                items.push(hoverAndClickWebSCROLL_YCompletion);

                const hoverAndClickWebCLICK_ON_HOVER_ELEMENTCompletion = new vscode.CompletionItem('CLICK_ON_HOVER_ELEMENT');
                hoverAndClickWebCLICK_ON_HOVER_ELEMENTCompletion.kind = vscode.CompletionItemKind.Field;
                hoverAndClickWebCLICK_ON_HOVER_ELEMENTCompletion.insertText = new vscode.SnippetString("CLICK_ON_HOVER_ELEMENT = \"${1}\"");
                hoverAndClickWebCLICK_ON_HOVER_ELEMENTCompletion.documentation = new vscode.MarkdownString('Soll das nach dem Bewegen der Maus auf das Hover-Element auch ein Klick auf das Hover-Element erfolgen? Default: true');
                items.push(hoverAndClickWebCLICK_ON_HOVER_ELEMENTCompletion);
            }

            if (/.*\s*httpDelete\s*\(.*/.test(linePrefix)) {

                const httpDeleteURLCompletion = new vscode.CompletionItem('URL');
                httpDeleteURLCompletion.kind = vscode.CompletionItemKind.Field;
                httpDeleteURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                httpDeleteURLCompletion.documentation = new vscode.MarkdownString('URL des Webservices');
                items.push(httpDeleteURLCompletion);

                const httpDeleteUSERNAMECompletion = new vscode.CompletionItem('USERNAME');
                httpDeleteUSERNAMECompletion.kind = vscode.CompletionItemKind.Field;
                httpDeleteUSERNAMECompletion.insertText = new vscode.SnippetString("USERNAME = \"${1}\"");
                httpDeleteUSERNAMECompletion.documentation = new vscode.MarkdownString('Username f\u00FCr Webservice Call (BasicAuth)');
                items.push(httpDeleteUSERNAMECompletion);

                const httpDeletePASSWORDCompletion = new vscode.CompletionItem('PASSWORD');
                httpDeletePASSWORDCompletion.kind = vscode.CompletionItemKind.Field;
                httpDeletePASSWORDCompletion.insertText = new vscode.SnippetString("PASSWORD = \"${1}\"");
                httpDeletePASSWORDCompletion.documentation = new vscode.MarkdownString('Passwort f\u00FCr Webservice Call (BasicAuth)');
                items.push(httpDeletePASSWORDCompletion);

                const httpDeleteBODYCompletion = new vscode.CompletionItem('BODY');
                httpDeleteBODYCompletion.kind = vscode.CompletionItemKind.Field;
                httpDeleteBODYCompletion.insertText = new vscode.SnippetString("BODY = \"${1}\"");
                httpDeleteBODYCompletion.documentation = new vscode.MarkdownString('HTTP Body');
                items.push(httpDeleteBODYCompletion);

                const httpDeleteCONTENT_TYPECompletion = new vscode.CompletionItem('CONTENT_TYPE');
                httpDeleteCONTENT_TYPECompletion.kind = vscode.CompletionItemKind.Field;
                httpDeleteCONTENT_TYPECompletion.insertText = new vscode.SnippetString("CONTENT_TYPE = \"${1}\"");
                httpDeleteCONTENT_TYPECompletion.documentation = new vscode.MarkdownString('Content Type');
                items.push(httpDeleteCONTENT_TYPECompletion);

                const httpDeleteIS_FILE_BODYCompletion = new vscode.CompletionItem('IS_FILE_BODY');
                httpDeleteIS_FILE_BODYCompletion.kind = vscode.CompletionItemKind.Field;
                httpDeleteIS_FILE_BODYCompletion.insertText = new vscode.SnippetString("IS_FILE_BODY = \"${1}\"");
                httpDeleteIS_FILE_BODYCompletion.documentation = new vscode.MarkdownString('\'true\' wenn im Parameter Body eine Datei angegeben werden soll.');
                items.push(httpDeleteIS_FILE_BODYCompletion);

                const httpDeleteHEADERCompletion = new vscode.CompletionItem('HEADER');
                httpDeleteHEADERCompletion.kind = vscode.CompletionItemKind.Field;
                httpDeleteHEADERCompletion.insertText = new vscode.SnippetString("HEADER = \"${1}\"");
                httpDeleteHEADERCompletion.documentation = new vscode.MarkdownString('Zusatzinformationen die Nutzdaten am Anfang eines Datenblocks erg\u00E4nzen');
                items.push(httpDeleteHEADERCompletion);

                const httpDeleteSHORT_OUTPUTCompletion = new vscode.CompletionItem('SHORT_OUTPUT');
                httpDeleteSHORT_OUTPUTCompletion.kind = vscode.CompletionItemKind.Field;
                httpDeleteSHORT_OUTPUTCompletion.insertText = new vscode.SnippetString("SHORT_OUTPUT = \"${1}\"");
                httpDeleteSHORT_OUTPUTCompletion.documentation = new vscode.MarkdownString('kurze Ausgabe');
                items.push(httpDeleteSHORT_OUTPUTCompletion);

                const httpDeleteTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                httpDeleteTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                httpDeleteTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                httpDeleteTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Schl\u00FCssel gesetzt werden, unter dem das Ergebnis des Aufrufs gespeichert wird.');
                items.push(httpDeleteTARGET_STORAGE_KEYCompletion);

                const httpDeleteWRITE_TO_FILECompletion = new vscode.CompletionItem('WRITE_TO_FILE');
                httpDeleteWRITE_TO_FILECompletion.kind = vscode.CompletionItemKind.Field;
                httpDeleteWRITE_TO_FILECompletion.insertText = new vscode.SnippetString("WRITE_TO_FILE = \"${1}\"");
                httpDeleteWRITE_TO_FILECompletion.documentation = new vscode.MarkdownString('Ins Verzeichnis schreiben');
                items.push(httpDeleteWRITE_TO_FILECompletion);

                const httpDeleteHTTPSTATUS_STORAGE_KEYCompletion = new vscode.CompletionItem('HTTPSTATUS_STORAGE_KEY');
                httpDeleteHTTPSTATUS_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                httpDeleteHTTPSTATUS_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("HTTPSTATUS_STORAGE_KEY = \"${1}\"");
                httpDeleteHTTPSTATUS_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Schl\u00FCssel gesetzt werden, unter dem der Status des Aufrufsergebnisses gespeichert wird.');
                items.push(httpDeleteHTTPSTATUS_STORAGE_KEYCompletion);

                const httpDeleteSAVE_HEADERSCompletion = new vscode.CompletionItem('SAVE_HEADERS');
                httpDeleteSAVE_HEADERSCompletion.kind = vscode.CompletionItemKind.Field;
                httpDeleteSAVE_HEADERSCompletion.insertText = new vscode.SnippetString("SAVE_HEADERS = \"${1}\"");
                httpDeleteSAVE_HEADERSCompletion.documentation = new vscode.MarkdownString('Speichert die Header der Response in den Storage (httpheaders_<headername>)');
                items.push(httpDeleteSAVE_HEADERSCompletion);

                const httpDeleteTIMEOUTCompletion = new vscode.CompletionItem('TIMEOUT');
                httpDeleteTIMEOUTCompletion.kind = vscode.CompletionItemKind.Field;
                httpDeleteTIMEOUTCompletion.insertText = new vscode.SnippetString("TIMEOUT = \"${1}\"");
                httpDeleteTIMEOUTCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Timeout gesetzt werden');
                items.push(httpDeleteTIMEOUTCompletion);

                const httpDeleteCOOKIESCompletion = new vscode.CompletionItem('COOKIES');
                httpDeleteCOOKIESCompletion.kind = vscode.CompletionItemKind.Field;
                httpDeleteCOOKIESCompletion.insertText = new vscode.SnippetString("COOKIES = \"${1}\"");
                httpDeleteCOOKIESCompletion.documentation = new vscode.MarkdownString('Liste von Cookies, die mitgeschickt werden sollen. F\u00FCr einzelne Cookies gilt die Schreibweise Key=Value. Die Cookies werden durch Semikolon getrennt. F\u00FCr ein Leerzeichen innerhalb eines Cookie-Werts muss \'%20\' gesetzt werden (also z.B. \'c%20v%203\' f\u00FCr \'c v 3\'). Beispielwert: \'firstCookie=ck01; secondCookie=ck02; ck3=c%20v%203\'');
                items.push(httpDeleteCOOKIESCompletion);
            }

            if (/.*\s*httpGet\s*\(.*/.test(linePrefix)) {

                const httpGetURLCompletion = new vscode.CompletionItem('URL');
                httpGetURLCompletion.kind = vscode.CompletionItemKind.Field;
                httpGetURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                httpGetURLCompletion.documentation = new vscode.MarkdownString('URL des Webservices');
                items.push(httpGetURLCompletion);

                const httpGetUSERNAMECompletion = new vscode.CompletionItem('USERNAME');
                httpGetUSERNAMECompletion.kind = vscode.CompletionItemKind.Field;
                httpGetUSERNAMECompletion.insertText = new vscode.SnippetString("USERNAME = \"${1}\"");
                httpGetUSERNAMECompletion.documentation = new vscode.MarkdownString('Username f\u00FCr Webservice Call (BasicAuth)');
                items.push(httpGetUSERNAMECompletion);

                const httpGetPASSWORDCompletion = new vscode.CompletionItem('PASSWORD');
                httpGetPASSWORDCompletion.kind = vscode.CompletionItemKind.Field;
                httpGetPASSWORDCompletion.insertText = new vscode.SnippetString("PASSWORD = \"${1}\"");
                httpGetPASSWORDCompletion.documentation = new vscode.MarkdownString('Passwort f\u00FCr Webservice Call (BasicAuth)');
                items.push(httpGetPASSWORDCompletion);

                const httpGetHEADERCompletion = new vscode.CompletionItem('HEADER');
                httpGetHEADERCompletion.kind = vscode.CompletionItemKind.Field;
                httpGetHEADERCompletion.insertText = new vscode.SnippetString("HEADER = \"${1}\"");
                httpGetHEADERCompletion.documentation = new vscode.MarkdownString('Zus\u00E4tzliche Informationen, die die Nutzdaten am Anfang eines Datenblocks erg\u00E4nzen. Die einzelnen Header werden durch kaufm\u00E4nnisches Und (\'&\') getrennt. Innerhalb der Header werden Key und Value jeweils durch Doppelpunkt (\':\') getrennt: \'Key1:Value1&Key2:Value2&Key3:Value3\' usw.');
                items.push(httpGetHEADERCompletion);

                const httpGetTIMEOUTCompletion = new vscode.CompletionItem('TIMEOUT');
                httpGetTIMEOUTCompletion.kind = vscode.CompletionItemKind.Field;
                httpGetTIMEOUTCompletion.insertText = new vscode.SnippetString("TIMEOUT = \"${1}\"");
                httpGetTIMEOUTCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Timeout gesetzt werden');
                items.push(httpGetTIMEOUTCompletion);

                const httpGetSHORT_OUTPUTCompletion = new vscode.CompletionItem('SHORT_OUTPUT');
                httpGetSHORT_OUTPUTCompletion.kind = vscode.CompletionItemKind.Field;
                httpGetSHORT_OUTPUTCompletion.insertText = new vscode.SnippetString("SHORT_OUTPUT = \"${1}\"");
                httpGetSHORT_OUTPUTCompletion.documentation = new vscode.MarkdownString('kurze Ausgabe');
                items.push(httpGetSHORT_OUTPUTCompletion);

                const httpGetTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                httpGetTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                httpGetTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                httpGetTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Schl\u00FCssel gesetzt werden, unter dem das Ergebnis des Aufrufs gespeichert wird.');
                items.push(httpGetTARGET_STORAGE_KEYCompletion);

                const httpGetWRITE_TO_FILECompletion = new vscode.CompletionItem('WRITE_TO_FILE');
                httpGetWRITE_TO_FILECompletion.kind = vscode.CompletionItemKind.Field;
                httpGetWRITE_TO_FILECompletion.insertText = new vscode.SnippetString("WRITE_TO_FILE = \"${1}\"");
                httpGetWRITE_TO_FILECompletion.documentation = new vscode.MarkdownString('Ins Verzeichnis schreiben');
                items.push(httpGetWRITE_TO_FILECompletion);

                const httpGetHTTPSTATUS_STORAGE_KEYCompletion = new vscode.CompletionItem('HTTPSTATUS_STORAGE_KEY');
                httpGetHTTPSTATUS_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                httpGetHTTPSTATUS_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("HTTPSTATUS_STORAGE_KEY = \"${1}\"");
                httpGetHTTPSTATUS_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Schl\u00FCssel gesetzt werden, unter dem der Status des Aufrufsergebnisses gespeichert wird.');
                items.push(httpGetHTTPSTATUS_STORAGE_KEYCompletion);

                const httpGetSAVE_HEADERSCompletion = new vscode.CompletionItem('SAVE_HEADERS');
                httpGetSAVE_HEADERSCompletion.kind = vscode.CompletionItemKind.Field;
                httpGetSAVE_HEADERSCompletion.insertText = new vscode.SnippetString("SAVE_HEADERS = \"${1}\"");
                httpGetSAVE_HEADERSCompletion.documentation = new vscode.MarkdownString('Speichert die Header der Response in den Storage (httpheader_<headername>)');
                items.push(httpGetSAVE_HEADERSCompletion);

                const httpGetCOOKIESCompletion = new vscode.CompletionItem('COOKIES');
                httpGetCOOKIESCompletion.kind = vscode.CompletionItemKind.Field;
                httpGetCOOKIESCompletion.insertText = new vscode.SnippetString("COOKIES = \"${1}\"");
                httpGetCOOKIESCompletion.documentation = new vscode.MarkdownString('Liste von Cookies, die mitgeschickt werden sollen. F\u00FCr einzelne Cookies gilt die Schreibweise Key=Value. Die Cookies werden durch Semikolon getrennt. Beispielwert: \'firstCookie=ck01; secondCookie=ck02; ck3=c%20v%203\'. F\u00FCr ein Leerzeichen innerhalb eines Cookie-Werts muss \'%20\' gesetzt werden (also z.B. \'c%20v%203\' f\u00FCr \'c v 3\').');
                items.push(httpGetCOOKIESCompletion);
            }

            if (/.*\s*httpPatch\s*\(.*/.test(linePrefix)) {

                const httpPatchURLCompletion = new vscode.CompletionItem('URL');
                httpPatchURLCompletion.kind = vscode.CompletionItemKind.Field;
                httpPatchURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                httpPatchURLCompletion.documentation = new vscode.MarkdownString('URL des Webservices');
                items.push(httpPatchURLCompletion);

                const httpPatchUSERNAMECompletion = new vscode.CompletionItem('USERNAME');
                httpPatchUSERNAMECompletion.kind = vscode.CompletionItemKind.Field;
                httpPatchUSERNAMECompletion.insertText = new vscode.SnippetString("USERNAME = \"${1}\"");
                httpPatchUSERNAMECompletion.documentation = new vscode.MarkdownString('Username f\u00FCr Webservice Call (BasicAuth)');
                items.push(httpPatchUSERNAMECompletion);

                const httpPatchPASSWORDCompletion = new vscode.CompletionItem('PASSWORD');
                httpPatchPASSWORDCompletion.kind = vscode.CompletionItemKind.Field;
                httpPatchPASSWORDCompletion.insertText = new vscode.SnippetString("PASSWORD = \"${1}\"");
                httpPatchPASSWORDCompletion.documentation = new vscode.MarkdownString('Passwort f\u00FCr Webservice Call (BasicAuth)');
                items.push(httpPatchPASSWORDCompletion);

                const httpPatchBODYCompletion = new vscode.CompletionItem('BODY');
                httpPatchBODYCompletion.kind = vscode.CompletionItemKind.Field;
                httpPatchBODYCompletion.insertText = new vscode.SnippetString("BODY = \"${1}\"");
                httpPatchBODYCompletion.documentation = new vscode.MarkdownString('HTTP Body');
                items.push(httpPatchBODYCompletion);

                const httpPatchCONTENT_TYPECompletion = new vscode.CompletionItem('CONTENT_TYPE');
                httpPatchCONTENT_TYPECompletion.kind = vscode.CompletionItemKind.Field;
                httpPatchCONTENT_TYPECompletion.insertText = new vscode.SnippetString("CONTENT_TYPE = \"${1}\"");
                httpPatchCONTENT_TYPECompletion.documentation = new vscode.MarkdownString('Content Type');
                items.push(httpPatchCONTENT_TYPECompletion);

                const httpPatchIS_FILE_BODYCompletion = new vscode.CompletionItem('IS_FILE_BODY');
                httpPatchIS_FILE_BODYCompletion.kind = vscode.CompletionItemKind.Field;
                httpPatchIS_FILE_BODYCompletion.insertText = new vscode.SnippetString("IS_FILE_BODY = \"${1}\"");
                httpPatchIS_FILE_BODYCompletion.documentation = new vscode.MarkdownString('\'true\' wenn im Parameter Body eine Datei angegeben werden soll.');
                items.push(httpPatchIS_FILE_BODYCompletion);

                const httpPatchHEADERCompletion = new vscode.CompletionItem('HEADER');
                httpPatchHEADERCompletion.kind = vscode.CompletionItemKind.Field;
                httpPatchHEADERCompletion.insertText = new vscode.SnippetString("HEADER = \"${1}\"");
                httpPatchHEADERCompletion.documentation = new vscode.MarkdownString('Zusatzinformationen die Nutzdaten am Anfang eines Datenblocks erg\u00E4nzen');
                items.push(httpPatchHEADERCompletion);

                const httpPatchSHORT_OUTPUTCompletion = new vscode.CompletionItem('SHORT_OUTPUT');
                httpPatchSHORT_OUTPUTCompletion.kind = vscode.CompletionItemKind.Field;
                httpPatchSHORT_OUTPUTCompletion.insertText = new vscode.SnippetString("SHORT_OUTPUT = \"${1}\"");
                httpPatchSHORT_OUTPUTCompletion.documentation = new vscode.MarkdownString('kurze Ausgabe');
                items.push(httpPatchSHORT_OUTPUTCompletion);

                const httpPatchTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                httpPatchTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                httpPatchTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                httpPatchTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Schl\u00FCssel gesetzt werden, unter dem das Ergebnis des Aufrufs gespeichert wird.');
                items.push(httpPatchTARGET_STORAGE_KEYCompletion);

                const httpPatchWRITE_TO_FILECompletion = new vscode.CompletionItem('WRITE_TO_FILE');
                httpPatchWRITE_TO_FILECompletion.kind = vscode.CompletionItemKind.Field;
                httpPatchWRITE_TO_FILECompletion.insertText = new vscode.SnippetString("WRITE_TO_FILE = \"${1}\"");
                httpPatchWRITE_TO_FILECompletion.documentation = new vscode.MarkdownString('Ins Verzeichnis schreiben');
                items.push(httpPatchWRITE_TO_FILECompletion);

                const httpPatchHTTPSTATUS_STORAGE_KEYCompletion = new vscode.CompletionItem('HTTPSTATUS_STORAGE_KEY');
                httpPatchHTTPSTATUS_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                httpPatchHTTPSTATUS_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("HTTPSTATUS_STORAGE_KEY = \"${1}\"");
                httpPatchHTTPSTATUS_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Schl\u00FCssel gesetzt werden, unter dem der Status des Aufrufsergebnisses gespeichert wird.');
                items.push(httpPatchHTTPSTATUS_STORAGE_KEYCompletion);

                const httpPatchSAVE_HEADERSCompletion = new vscode.CompletionItem('SAVE_HEADERS');
                httpPatchSAVE_HEADERSCompletion.kind = vscode.CompletionItemKind.Field;
                httpPatchSAVE_HEADERSCompletion.insertText = new vscode.SnippetString("SAVE_HEADERS = \"${1}\"");
                httpPatchSAVE_HEADERSCompletion.documentation = new vscode.MarkdownString('Speichert die Header der Response in den Storage (httpheaders_<headername>)');
                items.push(httpPatchSAVE_HEADERSCompletion);

                const httpPatchTIMEOUTCompletion = new vscode.CompletionItem('TIMEOUT');
                httpPatchTIMEOUTCompletion.kind = vscode.CompletionItemKind.Field;
                httpPatchTIMEOUTCompletion.insertText = new vscode.SnippetString("TIMEOUT = \"${1}\"");
                httpPatchTIMEOUTCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Timeout gesetzt werden');
                items.push(httpPatchTIMEOUTCompletion);

                const httpPatchCOOKIESCompletion = new vscode.CompletionItem('COOKIES');
                httpPatchCOOKIESCompletion.kind = vscode.CompletionItemKind.Field;
                httpPatchCOOKIESCompletion.insertText = new vscode.SnippetString("COOKIES = \"${1}\"");
                httpPatchCOOKIESCompletion.documentation = new vscode.MarkdownString('Liste von Cookies, die mitgeschickt werden sollen. F\u00FCr einzelne Cookies gilt die Schreibweise Key=Value. Die Cookies werden durch Semikolon getrennt. F\u00FCr ein Leerzeichen innerhalb eines Cookie-Werts muss \'%20\' gesetzt werden (also z.B. \'c%20v%203\' f\u00FCr \'c v 3\'). Beispielwert: \'firstCookie=ck01; secondCookie=ck02; ck3=c%20v%203\'');
                items.push(httpPatchCOOKIESCompletion);
            }

            if (/.*\s*httpPost\s*\(.*/.test(linePrefix)) {

                const httpPostURLCompletion = new vscode.CompletionItem('URL');
                httpPostURLCompletion.kind = vscode.CompletionItemKind.Field;
                httpPostURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                httpPostURLCompletion.documentation = new vscode.MarkdownString('URL des Webservices');
                items.push(httpPostURLCompletion);

                const httpPostUSERNAMECompletion = new vscode.CompletionItem('USERNAME');
                httpPostUSERNAMECompletion.kind = vscode.CompletionItemKind.Field;
                httpPostUSERNAMECompletion.insertText = new vscode.SnippetString("USERNAME = \"${1}\"");
                httpPostUSERNAMECompletion.documentation = new vscode.MarkdownString('Username f\u00FCr Webservice Call (BasicAuth)');
                items.push(httpPostUSERNAMECompletion);

                const httpPostPASSWORDCompletion = new vscode.CompletionItem('PASSWORD');
                httpPostPASSWORDCompletion.kind = vscode.CompletionItemKind.Field;
                httpPostPASSWORDCompletion.insertText = new vscode.SnippetString("PASSWORD = \"${1}\"");
                httpPostPASSWORDCompletion.documentation = new vscode.MarkdownString('Passwort f\u00FCr Webservice Call (BasicAuth)');
                items.push(httpPostPASSWORDCompletion);

                const httpPostBODYCompletion = new vscode.CompletionItem('BODY');
                httpPostBODYCompletion.kind = vscode.CompletionItemKind.Field;
                httpPostBODYCompletion.insertText = new vscode.SnippetString("BODY = \"${1}\"");
                httpPostBODYCompletion.documentation = new vscode.MarkdownString('HTTP Body');
                items.push(httpPostBODYCompletion);

                const httpPostCONTENT_TYPECompletion = new vscode.CompletionItem('CONTENT_TYPE');
                httpPostCONTENT_TYPECompletion.kind = vscode.CompletionItemKind.Field;
                httpPostCONTENT_TYPECompletion.insertText = new vscode.SnippetString("CONTENT_TYPE = \"${1}\"");
                httpPostCONTENT_TYPECompletion.documentation = new vscode.MarkdownString('Content Type');
                items.push(httpPostCONTENT_TYPECompletion);

                const httpPostIS_FILE_BODYCompletion = new vscode.CompletionItem('IS_FILE_BODY');
                httpPostIS_FILE_BODYCompletion.kind = vscode.CompletionItemKind.Field;
                httpPostIS_FILE_BODYCompletion.insertText = new vscode.SnippetString("IS_FILE_BODY = \"${1}\"");
                httpPostIS_FILE_BODYCompletion.documentation = new vscode.MarkdownString('\'true\' wenn im Parameter Body eine Datei angegeben werden soll.');
                items.push(httpPostIS_FILE_BODYCompletion);

                const httpPostHEADERCompletion = new vscode.CompletionItem('HEADER');
                httpPostHEADERCompletion.kind = vscode.CompletionItemKind.Field;
                httpPostHEADERCompletion.insertText = new vscode.SnippetString("HEADER = \"${1}\"");
                httpPostHEADERCompletion.documentation = new vscode.MarkdownString('Zusatzinformationen die Nutzdaten am Anfang eines Datenblocks erg\u00E4nzen');
                items.push(httpPostHEADERCompletion);

                const httpPostSHORT_OUTPUTCompletion = new vscode.CompletionItem('SHORT_OUTPUT');
                httpPostSHORT_OUTPUTCompletion.kind = vscode.CompletionItemKind.Field;
                httpPostSHORT_OUTPUTCompletion.insertText = new vscode.SnippetString("SHORT_OUTPUT = \"${1}\"");
                httpPostSHORT_OUTPUTCompletion.documentation = new vscode.MarkdownString('kurze Ausgabe');
                items.push(httpPostSHORT_OUTPUTCompletion);

                const httpPostTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                httpPostTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                httpPostTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                httpPostTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Schl\u00FCssel gesetzt werden, unter dem das Ergebnis des Aufrufs gespeichert wird.');
                items.push(httpPostTARGET_STORAGE_KEYCompletion);

                const httpPostWRITE_TO_FILECompletion = new vscode.CompletionItem('WRITE_TO_FILE');
                httpPostWRITE_TO_FILECompletion.kind = vscode.CompletionItemKind.Field;
                httpPostWRITE_TO_FILECompletion.insertText = new vscode.SnippetString("WRITE_TO_FILE = \"${1}\"");
                httpPostWRITE_TO_FILECompletion.documentation = new vscode.MarkdownString('Ins Verzeichnis schreiben');
                items.push(httpPostWRITE_TO_FILECompletion);

                const httpPostHTTPSTATUS_STORAGE_KEYCompletion = new vscode.CompletionItem('HTTPSTATUS_STORAGE_KEY');
                httpPostHTTPSTATUS_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                httpPostHTTPSTATUS_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("HTTPSTATUS_STORAGE_KEY = \"${1}\"");
                httpPostHTTPSTATUS_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Schl\u00FCssel gesetzt werden, unter dem der Status des Aufrufsergebnisses gespeichert wird.');
                items.push(httpPostHTTPSTATUS_STORAGE_KEYCompletion);

                const httpPostSAVE_HEADERSCompletion = new vscode.CompletionItem('SAVE_HEADERS');
                httpPostSAVE_HEADERSCompletion.kind = vscode.CompletionItemKind.Field;
                httpPostSAVE_HEADERSCompletion.insertText = new vscode.SnippetString("SAVE_HEADERS = \"${1}\"");
                httpPostSAVE_HEADERSCompletion.documentation = new vscode.MarkdownString('Speichert die Header der Response in den Storage (httpheaders_<headername>)');
                items.push(httpPostSAVE_HEADERSCompletion);

                const httpPostTIMEOUTCompletion = new vscode.CompletionItem('TIMEOUT');
                httpPostTIMEOUTCompletion.kind = vscode.CompletionItemKind.Field;
                httpPostTIMEOUTCompletion.insertText = new vscode.SnippetString("TIMEOUT = \"${1}\"");
                httpPostTIMEOUTCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Timeout gesetzt werden');
                items.push(httpPostTIMEOUTCompletion);

                const httpPostCOOKIESCompletion = new vscode.CompletionItem('COOKIES');
                httpPostCOOKIESCompletion.kind = vscode.CompletionItemKind.Field;
                httpPostCOOKIESCompletion.insertText = new vscode.SnippetString("COOKIES = \"${1}\"");
                httpPostCOOKIESCompletion.documentation = new vscode.MarkdownString('Liste von Cookies, die mitgeschickt werden sollen. F\u00FCr einzelne Cookies gilt die Schreibweise Key=Value. Die Cookies werden durch Semikolon getrennt. F\u00FCr ein Leerzeichen innerhalb eines Cookie-Werts muss \'%20\' gesetzt werden (also z.B. \'c%20v%203\' f\u00FCr \'c v 3\'). Beispielwert: \'firstCookie=ck01; secondCookie=ck02; ck3=c%20v%203\'');
                items.push(httpPostCOOKIESCompletion);
            }

            if (/.*\s*httpPut\s*\(.*/.test(linePrefix)) {

                const httpPutURLCompletion = new vscode.CompletionItem('URL');
                httpPutURLCompletion.kind = vscode.CompletionItemKind.Field;
                httpPutURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                httpPutURLCompletion.documentation = new vscode.MarkdownString('URL des Webservices');
                items.push(httpPutURLCompletion);

                const httpPutUSERNAMECompletion = new vscode.CompletionItem('USERNAME');
                httpPutUSERNAMECompletion.kind = vscode.CompletionItemKind.Field;
                httpPutUSERNAMECompletion.insertText = new vscode.SnippetString("USERNAME = \"${1}\"");
                httpPutUSERNAMECompletion.documentation = new vscode.MarkdownString('Username f\u00FCr Webservice Call (BasicAuth)');
                items.push(httpPutUSERNAMECompletion);

                const httpPutPASSWORDCompletion = new vscode.CompletionItem('PASSWORD');
                httpPutPASSWORDCompletion.kind = vscode.CompletionItemKind.Field;
                httpPutPASSWORDCompletion.insertText = new vscode.SnippetString("PASSWORD = \"${1}\"");
                httpPutPASSWORDCompletion.documentation = new vscode.MarkdownString('Passwort f\u00FCr Webservice Call (BasicAuth)');
                items.push(httpPutPASSWORDCompletion);

                const httpPutBODYCompletion = new vscode.CompletionItem('BODY');
                httpPutBODYCompletion.kind = vscode.CompletionItemKind.Field;
                httpPutBODYCompletion.insertText = new vscode.SnippetString("BODY = \"${1}\"");
                httpPutBODYCompletion.documentation = new vscode.MarkdownString('HTTP Body');
                items.push(httpPutBODYCompletion);

                const httpPutCONTENT_TYPECompletion = new vscode.CompletionItem('CONTENT_TYPE');
                httpPutCONTENT_TYPECompletion.kind = vscode.CompletionItemKind.Field;
                httpPutCONTENT_TYPECompletion.insertText = new vscode.SnippetString("CONTENT_TYPE = \"${1}\"");
                httpPutCONTENT_TYPECompletion.documentation = new vscode.MarkdownString('Content Type');
                items.push(httpPutCONTENT_TYPECompletion);

                const httpPutIS_FILE_BODYCompletion = new vscode.CompletionItem('IS_FILE_BODY');
                httpPutIS_FILE_BODYCompletion.kind = vscode.CompletionItemKind.Field;
                httpPutIS_FILE_BODYCompletion.insertText = new vscode.SnippetString("IS_FILE_BODY = \"${1}\"");
                httpPutIS_FILE_BODYCompletion.documentation = new vscode.MarkdownString('\'true\' wenn im Parameter Body eine Datei angegeben werden soll.');
                items.push(httpPutIS_FILE_BODYCompletion);

                const httpPutHEADERCompletion = new vscode.CompletionItem('HEADER');
                httpPutHEADERCompletion.kind = vscode.CompletionItemKind.Field;
                httpPutHEADERCompletion.insertText = new vscode.SnippetString("HEADER = \"${1}\"");
                httpPutHEADERCompletion.documentation = new vscode.MarkdownString('Zusatzinformationen die Nutzdaten am Anfang eines Datenblocks erg\u00E4nzen');
                items.push(httpPutHEADERCompletion);

                const httpPutSHORT_OUTPUTCompletion = new vscode.CompletionItem('SHORT_OUTPUT');
                httpPutSHORT_OUTPUTCompletion.kind = vscode.CompletionItemKind.Field;
                httpPutSHORT_OUTPUTCompletion.insertText = new vscode.SnippetString("SHORT_OUTPUT = \"${1}\"");
                httpPutSHORT_OUTPUTCompletion.documentation = new vscode.MarkdownString('kurze Ausgabe');
                items.push(httpPutSHORT_OUTPUTCompletion);

                const httpPutTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                httpPutTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                httpPutTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                httpPutTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Schl\u00FCssel gesetzt werden, unter dem das Ergebnis des Aufrufs gespeichert wird.');
                items.push(httpPutTARGET_STORAGE_KEYCompletion);

                const httpPutWRITE_TO_FILECompletion = new vscode.CompletionItem('WRITE_TO_FILE');
                httpPutWRITE_TO_FILECompletion.kind = vscode.CompletionItemKind.Field;
                httpPutWRITE_TO_FILECompletion.insertText = new vscode.SnippetString("WRITE_TO_FILE = \"${1}\"");
                httpPutWRITE_TO_FILECompletion.documentation = new vscode.MarkdownString('Ins Verzeichnis schreiben');
                items.push(httpPutWRITE_TO_FILECompletion);

                const httpPutHTTPSTATUS_STORAGE_KEYCompletion = new vscode.CompletionItem('HTTPSTATUS_STORAGE_KEY');
                httpPutHTTPSTATUS_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                httpPutHTTPSTATUS_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("HTTPSTATUS_STORAGE_KEY = \"${1}\"");
                httpPutHTTPSTATUS_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Schl\u00FCssel gesetzt werden, unter dem der Status des Aufrufsergebnisses gespeichert wird.');
                items.push(httpPutHTTPSTATUS_STORAGE_KEYCompletion);

                const httpPutSAVE_HEADERSCompletion = new vscode.CompletionItem('SAVE_HEADERS');
                httpPutSAVE_HEADERSCompletion.kind = vscode.CompletionItemKind.Field;
                httpPutSAVE_HEADERSCompletion.insertText = new vscode.SnippetString("SAVE_HEADERS = \"${1}\"");
                httpPutSAVE_HEADERSCompletion.documentation = new vscode.MarkdownString('Speichert die Header der Response in den Storage (httpheaders_<headername>)');
                items.push(httpPutSAVE_HEADERSCompletion);

                const httpPutTIMEOUTCompletion = new vscode.CompletionItem('TIMEOUT');
                httpPutTIMEOUTCompletion.kind = vscode.CompletionItemKind.Field;
                httpPutTIMEOUTCompletion.insertText = new vscode.SnippetString("TIMEOUT = \"${1}\"");
                httpPutTIMEOUTCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Timeout gesetzt werden');
                items.push(httpPutTIMEOUTCompletion);

                const httpPutCOOKIESCompletion = new vscode.CompletionItem('COOKIES');
                httpPutCOOKIESCompletion.kind = vscode.CompletionItemKind.Field;
                httpPutCOOKIESCompletion.insertText = new vscode.SnippetString("COOKIES = \"${1}\"");
                httpPutCOOKIESCompletion.documentation = new vscode.MarkdownString('Liste von Cookies, die mitgeschickt werden sollen. F\u00FCr einzelne Cookies gilt die Schreibweise Key=Value. Die Cookies werden durch Semikolon getrennt. F\u00FCr ein Leerzeichen innerhalb eines Cookie-Werts muss \'%20\' gesetzt werden (also z.B. \'c%20v%203\' f\u00FCr \'c v 3\'). Beispielwert: \'firstCookie=ck01; secondCookie=ck02; ck3=c%20v%203\'');
                items.push(httpPutCOOKIESCompletion);
            }

            if (/.*\s*if\s*\(.*/.test(linePrefix)) {

                const ifACCEPTABLE_RESULT_LEVELSCompletion = new vscode.CompletionItem('ACCEPTABLE_RESULT_LEVELS');
                ifACCEPTABLE_RESULT_LEVELSCompletion.kind = vscode.CompletionItemKind.Field;
                ifACCEPTABLE_RESULT_LEVELSCompletion.insertText = new vscode.SnippetString("ACCEPTABLE_RESULT_LEVELS = \"${1}\"");
                ifACCEPTABLE_RESULT_LEVELSCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(ifACCEPTABLE_RESULT_LEVELSCompletion);
            }

            if (/.*\s*ifNot\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*inputDialog\s*\(.*/.test(linePrefix)) {

                const inputDialogMESSAGECompletion = new vscode.CompletionItem('MESSAGE');
                inputDialogMESSAGECompletion.kind = vscode.CompletionItemKind.Field;
                inputDialogMESSAGECompletion.insertText = new vscode.SnippetString("MESSAGE = \"${1}\"");
                inputDialogMESSAGECompletion.documentation = new vscode.MarkdownString('Beschreibung\/Anweisung des Fensters');
                items.push(inputDialogMESSAGECompletion);

                const inputDialogTITLECompletion = new vscode.CompletionItem('TITLE');
                inputDialogTITLECompletion.kind = vscode.CompletionItemKind.Field;
                inputDialogTITLECompletion.insertText = new vscode.SnippetString("TITLE = \"${1}\"");
                inputDialogTITLECompletion.documentation = new vscode.MarkdownString('Title des Dialogfensters');
                items.push(inputDialogTITLECompletion);

                const inputDialogMAX_WAIT_TIMECompletion = new vscode.CompletionItem('MAX_WAIT_TIME');
                inputDialogMAX_WAIT_TIMECompletion.kind = vscode.CompletionItemKind.Field;
                inputDialogMAX_WAIT_TIMECompletion.insertText = new vscode.SnippetString("MAX_WAIT_TIME = \"${1}\"");
                inputDialogMAX_WAIT_TIMECompletion.documentation = new vscode.MarkdownString('Zeit bis das Fenster automatisch geschlossen und die Eingabe \u00FCbernommen wird (in Millisekunden)');
                items.push(inputDialogMAX_WAIT_TIMECompletion);

                const inputDialogDEFAULT_VALUECompletion = new vscode.CompletionItem('DEFAULT_VALUE');
                inputDialogDEFAULT_VALUECompletion.kind = vscode.CompletionItemKind.Field;
                inputDialogDEFAULT_VALUECompletion.insertText = new vscode.SnippetString("DEFAULT_VALUE = \"${1}\"");
                inputDialogDEFAULT_VALUECompletion.documentation = new vscode.MarkdownString('Optionaler voreingegebener Wert');
                items.push(inputDialogDEFAULT_VALUECompletion);

                const inputDialogHIDE_CHARACTERSCompletion = new vscode.CompletionItem('HIDE_CHARACTERS');
                inputDialogHIDE_CHARACTERSCompletion.kind = vscode.CompletionItemKind.Field;
                inputDialogHIDE_CHARACTERSCompletion.insertText = new vscode.SnippetString("HIDE_CHARACTERS = \"${1}\"");
                inputDialogHIDE_CHARACTERSCompletion.documentation = new vscode.MarkdownString('Verdeckte Eingabe z.B. f\u00FCr Passw\u00F6rter aktiviert, wenn auf \'True\' gesetzt');
                items.push(inputDialogHIDE_CHARACTERSCompletion);

                const inputDialogTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                inputDialogTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                inputDialogTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                inputDialogTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Schl\u00FCssel gesetzt werden, unter dem die Eingabe gespeichert wird.');
                items.push(inputDialogTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*lessThanAlpha\s*\(.*/.test(linePrefix)) {

                const lessThanAlphaLEFTCompletion = new vscode.CompletionItem('LEFT');
                lessThanAlphaLEFTCompletion.kind = vscode.CompletionItemKind.Field;
                lessThanAlphaLEFTCompletion.insertText = new vscode.SnippetString("LEFT = \"${1}\"");
                lessThanAlphaLEFTCompletion.documentation = new vscode.MarkdownString('Parameter, der links vom Vergleichs-Operator stehen soll.');
                items.push(lessThanAlphaLEFTCompletion);

                const lessThanAlphaRIGHTCompletion = new vscode.CompletionItem('RIGHT');
                lessThanAlphaRIGHTCompletion.kind = vscode.CompletionItemKind.Field;
                lessThanAlphaRIGHTCompletion.insertText = new vscode.SnippetString("RIGHT = \"${1}\"");
                lessThanAlphaRIGHTCompletion.documentation = new vscode.MarkdownString('Parameter, der rechts vom Vergleichs-Operator stehen soll.');
                items.push(lessThanAlphaRIGHTCompletion);
            }

            if (/.*\s*lessThanDate\s*\(.*/.test(linePrefix)) {

                const lessThanDateLEFTCompletion = new vscode.CompletionItem('LEFT');
                lessThanDateLEFTCompletion.kind = vscode.CompletionItemKind.Field;
                lessThanDateLEFTCompletion.insertText = new vscode.SnippetString("LEFT = \"${1}\"");
                lessThanDateLEFTCompletion.documentation = new vscode.MarkdownString('Parameter, der links vom Vergleichs-Operator stehen soll.');
                items.push(lessThanDateLEFTCompletion);

                const lessThanDateRIGHTCompletion = new vscode.CompletionItem('RIGHT');
                lessThanDateRIGHTCompletion.kind = vscode.CompletionItemKind.Field;
                lessThanDateRIGHTCompletion.insertText = new vscode.SnippetString("RIGHT = \"${1}\"");
                lessThanDateRIGHTCompletion.documentation = new vscode.MarkdownString('Parameter, der rechts vom Vergleichs-Operator stehen soll.');
                items.push(lessThanDateRIGHTCompletion);
            }

            if (/.*\s*lessThanNum\s*\(.*/.test(linePrefix)) {

                const lessThanNumLEFTCompletion = new vscode.CompletionItem('LEFT');
                lessThanNumLEFTCompletion.kind = vscode.CompletionItemKind.Field;
                lessThanNumLEFTCompletion.insertText = new vscode.SnippetString("LEFT = \"${1}\"");
                lessThanNumLEFTCompletion.documentation = new vscode.MarkdownString('Parameter, der links vom Vergleichs-Operator stehen soll.');
                items.push(lessThanNumLEFTCompletion);

                const lessThanNumRIGHTCompletion = new vscode.CompletionItem('RIGHT');
                lessThanNumRIGHTCompletion.kind = vscode.CompletionItemKind.Field;
                lessThanNumRIGHTCompletion.insertText = new vscode.SnippetString("RIGHT = \"${1}\"");
                lessThanNumRIGHTCompletion.documentation = new vscode.MarkdownString('Parameter, der rechts vom Vergleichs-Operator stehen soll.');
                items.push(lessThanNumRIGHTCompletion);
            }

            if (/.*\s*loadCsvSql\s*\(.*/.test(linePrefix)) {

                const loadCsvSqlCONNECTION_NAMECompletion = new vscode.CompletionItem('CONNECTION_NAME');
                loadCsvSqlCONNECTION_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                loadCsvSqlCONNECTION_NAMECompletion.insertText = new vscode.SnippetString("CONNECTION_NAME = \"${1}\"");
                loadCsvSqlCONNECTION_NAMECompletion.documentation = new vscode.MarkdownString('Name der bestehenden Datenbankverbindung');
                items.push(loadCsvSqlCONNECTION_NAMECompletion);

                const loadCsvSqlTARGET_TABLECompletion = new vscode.CompletionItem('TARGET_TABLE');
                loadCsvSqlTARGET_TABLECompletion.kind = vscode.CompletionItemKind.Field;
                loadCsvSqlTARGET_TABLECompletion.insertText = new vscode.SnippetString("TARGET_TABLE = \"${1}\"");
                loadCsvSqlTARGET_TABLECompletion.documentation = new vscode.MarkdownString('Name der Tabelle die erstellt werden soll.');
                items.push(loadCsvSqlTARGET_TABLECompletion);

                const loadCsvSqlCSV_FILECompletion = new vscode.CompletionItem('CSV_FILE');
                loadCsvSqlCSV_FILECompletion.kind = vscode.CompletionItemKind.Field;
                loadCsvSqlCSV_FILECompletion.insertText = new vscode.SnippetString("CSV_FILE = \"${1}\"");
                loadCsvSqlCSV_FILECompletion.documentation = new vscode.MarkdownString('Name der CSV Datei');
                items.push(loadCsvSqlCSV_FILECompletion);

                const loadCsvSqlSEPARATORCompletion = new vscode.CompletionItem('SEPARATOR');
                loadCsvSqlSEPARATORCompletion.kind = vscode.CompletionItemKind.Field;
                loadCsvSqlSEPARATORCompletion.insertText = new vscode.SnippetString("SEPARATOR = \"${1}\"");
                loadCsvSqlSEPARATORCompletion.documentation = new vscode.MarkdownString('Festlegen, welches Zeichen als Trennsymbol benutzt werden soll');
                items.push(loadCsvSqlSEPARATORCompletion);

                const loadCsvSqlDATA_TYPESCompletion = new vscode.CompletionItem('DATA_TYPES');
                loadCsvSqlDATA_TYPESCompletion.kind = vscode.CompletionItemKind.Field;
                loadCsvSqlDATA_TYPESCompletion.insertText = new vscode.SnippetString("DATA_TYPES = \"${1}\"");
                loadCsvSqlDATA_TYPESCompletion.documentation = new vscode.MarkdownString('Datentyp');
                items.push(loadCsvSqlDATA_TYPESCompletion);

                const loadCsvSqlHAS_HEADERSCompletion = new vscode.CompletionItem('HAS_HEADERS');
                loadCsvSqlHAS_HEADERSCompletion.kind = vscode.CompletionItemKind.Field;
                loadCsvSqlHAS_HEADERSCompletion.insertText = new vscode.SnippetString("HAS_HEADERS = \"${1}\"");
                loadCsvSqlHAS_HEADERSCompletion.documentation = new vscode.MarkdownString('True falls Kopfzeile vorhanden ist');
                items.push(loadCsvSqlHAS_HEADERSCompletion);

                const loadCsvSqlCREATE_TABLECompletion = new vscode.CompletionItem('CREATE_TABLE');
                loadCsvSqlCREATE_TABLECompletion.kind = vscode.CompletionItemKind.Field;
                loadCsvSqlCREATE_TABLECompletion.insertText = new vscode.SnippetString("CREATE_TABLE = \"${1}\"");
                loadCsvSqlCREATE_TABLECompletion.documentation = new vscode.MarkdownString('True, falls Tabelle erzeugt werden soll.');
                items.push(loadCsvSqlCREATE_TABLECompletion);

                const loadCsvSqlDROP_IF_EXISTSCompletion = new vscode.CompletionItem('DROP_IF_EXISTS');
                loadCsvSqlDROP_IF_EXISTSCompletion.kind = vscode.CompletionItemKind.Field;
                loadCsvSqlDROP_IF_EXISTSCompletion.insertText = new vscode.SnippetString("DROP_IF_EXISTS = \"${1}\"");
                loadCsvSqlDROP_IF_EXISTSCompletion.documentation = new vscode.MarkdownString('True falls, verwerfen falls bereits vorhanden.');
                items.push(loadCsvSqlDROP_IF_EXISTSCompletion);

                const loadCsvSqlENCODINGCompletion = new vscode.CompletionItem('ENCODING');
                loadCsvSqlENCODINGCompletion.kind = vscode.CompletionItemKind.Field;
                loadCsvSqlENCODINGCompletion.insertText = new vscode.SnippetString("ENCODING = \"${1}\"");
                loadCsvSqlENCODINGCompletion.documentation = new vscode.MarkdownString('Encoding der Output-Files (Default: UTF-8)');
                items.push(loadCsvSqlENCODINGCompletion);

                const loadCsvSqlDEFAULT_TEXT_TYPECompletion = new vscode.CompletionItem('DEFAULT_TEXT_TYPE');
                loadCsvSqlDEFAULT_TEXT_TYPECompletion.kind = vscode.CompletionItemKind.Field;
                loadCsvSqlDEFAULT_TEXT_TYPECompletion.insertText = new vscode.SnippetString("DEFAULT_TEXT_TYPE = \"${1}\"");
                loadCsvSqlDEFAULT_TEXT_TYPECompletion.documentation = new vscode.MarkdownString('Standarttext-Typ festlegen');
                items.push(loadCsvSqlDEFAULT_TEXT_TYPECompletion);
            }

            if (/.*\s*logAppendCase\s*\(.*/.test(linePrefix)) {

                const logAppendCaseMESSAGECompletion = new vscode.CompletionItem('MESSAGE');
                logAppendCaseMESSAGECompletion.kind = vscode.CompletionItemKind.Field;
                logAppendCaseMESSAGECompletion.insertText = new vscode.SnippetString("MESSAGE = \"${1}\"");
                logAppendCaseMESSAGECompletion.documentation = new vscode.MarkdownString('Nachricht, die im Bericht angezeigt werden soll.');
                items.push(logAppendCaseMESSAGECompletion);
            }

            if (/.*\s*logAppendSet\s*\(.*/.test(linePrefix)) {

                const logAppendSetMESSAGECompletion = new vscode.CompletionItem('MESSAGE');
                logAppendSetMESSAGECompletion.kind = vscode.CompletionItemKind.Field;
                logAppendSetMESSAGECompletion.insertText = new vscode.SnippetString("MESSAGE = \"${1}\"");
                logAppendSetMESSAGECompletion.documentation = new vscode.MarkdownString('Nachricht, die im Bericht angezeigt werden soll.');
                items.push(logAppendSetMESSAGECompletion);
            }

            if (/.*\s*logAppendStep\s*\(.*/.test(linePrefix)) {

                const logAppendStepMESSAGECompletion = new vscode.CompletionItem('MESSAGE');
                logAppendStepMESSAGECompletion.kind = vscode.CompletionItemKind.Field;
                logAppendStepMESSAGECompletion.insertText = new vscode.SnippetString("MESSAGE = \"${1}\"");
                logAppendStepMESSAGECompletion.documentation = new vscode.MarkdownString('Nachricht, die im Bericht angezeigt werden soll.');
                items.push(logAppendStepMESSAGECompletion);
            }

            if (/.*\s*maximizeWindowWinEle\s*\(.*/.test(linePrefix)) {

                const maximizeWindowWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                maximizeWindowWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                maximizeWindowWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                maximizeWindowWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Names des Fenster, dessen Gr\u00F6\u00DFe maximiert werden soll.');
                items.push(maximizeWindowWinEleWINDOW_NAMECompletion);

                const maximizeWindowWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                maximizeWindowWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                maximizeWindowWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                maximizeWindowWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(maximizeWindowWinElePROCESS_NAMECompletion);
            }

            if (/.*\s*monkeyClick\s*\(.*/.test(linePrefix)) {

                const monkeyClickITERATIONSCompletion = new vscode.CompletionItem('ITERATIONS');
                monkeyClickITERATIONSCompletion.kind = vscode.CompletionItemKind.Field;
                monkeyClickITERATIONSCompletion.insertText = new vscode.SnippetString("ITERATIONS = \"${1}\"");
                monkeyClickITERATIONSCompletion.documentation = new vscode.MarkdownString('Anzahl Klicks');
                items.push(monkeyClickITERATIONSCompletion);

                const monkeyClickWAIT_BETWEENCompletion = new vscode.CompletionItem('WAIT_BETWEEN');
                monkeyClickWAIT_BETWEENCompletion.kind = vscode.CompletionItemKind.Field;
                monkeyClickWAIT_BETWEENCompletion.insertText = new vscode.SnippetString("WAIT_BETWEEN = \"${1}\"");
                monkeyClickWAIT_BETWEENCompletion.documentation = new vscode.MarkdownString('Wartezeit zwischen zwei Klicks.');
                items.push(monkeyClickWAIT_BETWEENCompletion);
            }

            if (/.*\s*mouseMoveToImageInWindowWin\s*\(.*/.test(linePrefix)) {

                const mouseMoveToImageInWindowWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                mouseMoveToImageInWindowWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                mouseMoveToImageInWindowWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                mouseMoveToImageInWindowWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(mouseMoveToImageInWindowWinWINDOW_NAMECompletion);

                const mouseMoveToImageInWindowWinIMAGE_RELATIVE_PATHCompletion = new vscode.CompletionItem('IMAGE_RELATIVE_PATH');
                mouseMoveToImageInWindowWinIMAGE_RELATIVE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                mouseMoveToImageInWindowWinIMAGE_RELATIVE_PATHCompletion.insertText = new vscode.SnippetString("IMAGE_RELATIVE_PATH = \"${1}\"");
                mouseMoveToImageInWindowWinIMAGE_RELATIVE_PATHCompletion.documentation = new vscode.MarkdownString('Pfad zum Bild ');
                items.push(mouseMoveToImageInWindowWinIMAGE_RELATIVE_PATHCompletion);

                const mouseMoveToImageInWindowWinBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                mouseMoveToImageInWindowWinBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                mouseMoveToImageInWindowWinBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                mouseMoveToImageInWindowWinBASEDIRCompletion.documentation = new vscode.MarkdownString('Angabe des Basisverzeichnisses');
                items.push(mouseMoveToImageInWindowWinBASEDIRCompletion);

                const mouseMoveToImageInWindowWinRELATIVE_XCompletion = new vscode.CompletionItem('RELATIVE_X');
                mouseMoveToImageInWindowWinRELATIVE_XCompletion.kind = vscode.CompletionItemKind.Field;
                mouseMoveToImageInWindowWinRELATIVE_XCompletion.insertText = new vscode.SnippetString("RELATIVE_X = \"${1}\"");
                mouseMoveToImageInWindowWinRELATIVE_XCompletion.documentation = new vscode.MarkdownString('Verschiebung auf der X-Achse. Links: Negativ. Rechts: Positiv');
                items.push(mouseMoveToImageInWindowWinRELATIVE_XCompletion);

                const mouseMoveToImageInWindowWinRELATIVE_YCompletion = new vscode.CompletionItem('RELATIVE_Y');
                mouseMoveToImageInWindowWinRELATIVE_YCompletion.kind = vscode.CompletionItemKind.Field;
                mouseMoveToImageInWindowWinRELATIVE_YCompletion.insertText = new vscode.SnippetString("RELATIVE_Y = \"${1}\"");
                mouseMoveToImageInWindowWinRELATIVE_YCompletion.documentation = new vscode.MarkdownString('Verschiebung auf der Y-Achse. Oben: Negativ. Unten: Positiv');
                items.push(mouseMoveToImageInWindowWinRELATIVE_YCompletion);
            }

            if (/.*\s*moveFile\s*\(.*/.test(linePrefix)) {

                const moveFileFILENAME_FROMCompletion = new vscode.CompletionItem('FILENAME_FROM');
                moveFileFILENAME_FROMCompletion.kind = vscode.CompletionItemKind.Field;
                moveFileFILENAME_FROMCompletion.insertText = new vscode.SnippetString("FILENAME_FROM = \"${1}\"");
                moveFileFILENAME_FROMCompletion.documentation = new vscode.MarkdownString('Quelle');
                items.push(moveFileFILENAME_FROMCompletion);

                const moveFileFILENAME_TOCompletion = new vscode.CompletionItem('FILENAME_TO');
                moveFileFILENAME_TOCompletion.kind = vscode.CompletionItemKind.Field;
                moveFileFILENAME_TOCompletion.insertText = new vscode.SnippetString("FILENAME_TO = \"${1}\"");
                moveFileFILENAME_TOCompletion.documentation = new vscode.MarkdownString('Ziel');
                items.push(moveFileFILENAME_TOCompletion);

                const moveFileMUST_DELETECompletion = new vscode.CompletionItem('MUST_DELETE');
                moveFileMUST_DELETECompletion.kind = vscode.CompletionItemKind.Field;
                moveFileMUST_DELETECompletion.insertText = new vscode.SnippetString("MUST_DELETE = \"${1}\"");
                moveFileMUST_DELETECompletion.documentation = new vscode.MarkdownString('Muss etwas gel\u00F6scht werden? {true, false} Default: true');
                items.push(moveFileMUST_DELETECompletion);

                const moveFileOLDER_THAN_DAYSCompletion = new vscode.CompletionItem('OLDER_THAN_DAYS');
                moveFileOLDER_THAN_DAYSCompletion.kind = vscode.CompletionItemKind.Field;
                moveFileOLDER_THAN_DAYSCompletion.insertText = new vscode.SnippetString("OLDER_THAN_DAYS = \"${1}\"");
                moveFileOLDER_THAN_DAYSCompletion.documentation = new vscode.MarkdownString('Alle Dateien in einem Verzeichnis (angegeben \u00FCber den FILENAME) verschieben die \u00E4lter als die angegebene Zahl Tage sind.');
                items.push(moveFileOLDER_THAN_DAYSCompletion);
            }

            if (/.*\s*moveFilesOlderThan\s*\(.*/.test(linePrefix)) {

                const moveFilesOlderThanFILENAME_FROMCompletion = new vscode.CompletionItem('FILENAME_FROM');
                moveFilesOlderThanFILENAME_FROMCompletion.kind = vscode.CompletionItemKind.Field;
                moveFilesOlderThanFILENAME_FROMCompletion.insertText = new vscode.SnippetString("FILENAME_FROM = \"${1}\"");
                moveFilesOlderThanFILENAME_FROMCompletion.documentation = new vscode.MarkdownString('Quelle');
                items.push(moveFilesOlderThanFILENAME_FROMCompletion);

                const moveFilesOlderThanFILENAME_TOCompletion = new vscode.CompletionItem('FILENAME_TO');
                moveFilesOlderThanFILENAME_TOCompletion.kind = vscode.CompletionItemKind.Field;
                moveFilesOlderThanFILENAME_TOCompletion.insertText = new vscode.SnippetString("FILENAME_TO = \"${1}\"");
                moveFilesOlderThanFILENAME_TOCompletion.documentation = new vscode.MarkdownString('Ziel');
                items.push(moveFilesOlderThanFILENAME_TOCompletion);

                const moveFilesOlderThanMUST_DELETECompletion = new vscode.CompletionItem('MUST_DELETE');
                moveFilesOlderThanMUST_DELETECompletion.kind = vscode.CompletionItemKind.Field;
                moveFilesOlderThanMUST_DELETECompletion.insertText = new vscode.SnippetString("MUST_DELETE = \"${1}\"");
                moveFilesOlderThanMUST_DELETECompletion.documentation = new vscode.MarkdownString('Muss etwas gel\u00F6scht werden? {true, false} Default: true');
                items.push(moveFilesOlderThanMUST_DELETECompletion);

                const moveFilesOlderThanOLDER_THAN_DAYSCompletion = new vscode.CompletionItem('OLDER_THAN_DAYS');
                moveFilesOlderThanOLDER_THAN_DAYSCompletion.kind = vscode.CompletionItemKind.Field;
                moveFilesOlderThanOLDER_THAN_DAYSCompletion.insertText = new vscode.SnippetString("OLDER_THAN_DAYS = \"${1}\"");
                moveFilesOlderThanOLDER_THAN_DAYSCompletion.documentation = new vscode.MarkdownString('Alle Dateien in einem Verzeichnis (angegeben \u00FCber den FILENAME) verschieben die \u00E4lter als die angegebene Zahl Tage sind.');
                items.push(moveFilesOlderThanOLDER_THAN_DAYSCompletion);
            }

            if (/.*\s*moveMouseWin\s*\(.*/.test(linePrefix)) {

                const moveMouseWinWINDOWCompletion = new vscode.CompletionItem('WINDOW');
                moveMouseWinWINDOWCompletion.kind = vscode.CompletionItemKind.Field;
                moveMouseWinWINDOWCompletion.insertText = new vscode.SnippetString("WINDOW = \"${1}\"");
                moveMouseWinWINDOWCompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(moveMouseWinWINDOWCompletion);

                const moveMouseWinMOVE_TO_XCompletion = new vscode.CompletionItem('MOVE_TO_X');
                moveMouseWinMOVE_TO_XCompletion.kind = vscode.CompletionItemKind.Field;
                moveMouseWinMOVE_TO_XCompletion.insertText = new vscode.SnippetString("MOVE_TO_X = \"${1}\"");
                moveMouseWinMOVE_TO_XCompletion.documentation = new vscode.MarkdownString('X-Koordinate.');
                items.push(moveMouseWinMOVE_TO_XCompletion);

                const moveMouseWinMOVE_TO_YCompletion = new vscode.CompletionItem('MOVE_TO_Y');
                moveMouseWinMOVE_TO_YCompletion.kind = vscode.CompletionItemKind.Field;
                moveMouseWinMOVE_TO_YCompletion.insertText = new vscode.SnippetString("MOVE_TO_Y = \"${1}\"");
                moveMouseWinMOVE_TO_YCompletion.documentation = new vscode.MarkdownString('Y-Koordinate');
                items.push(moveMouseWinMOVE_TO_YCompletion);
            }

            if (/.*\s*moveToWeb\s*\(.*/.test(linePrefix)) {

                const moveToWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                moveToWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                moveToWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                moveToWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(moveToWebBY_CRITERIACompletion);

                const moveToWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                moveToWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                moveToWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                moveToWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(moveToWebELEMENT_NAMECompletion);

                const moveToWebWITH_OFFSETCompletion = new vscode.CompletionItem('WITH_OFFSET');
                moveToWebWITH_OFFSETCompletion.kind = vscode.CompletionItemKind.Field;
                moveToWebWITH_OFFSETCompletion.insertText = new vscode.SnippetString("WITH_OFFSET = \"${1}\"");
                moveToWebWITH_OFFSETCompletion.documentation = new vscode.MarkdownString('Muss auf \'true\' gesetzt werden, wenn ein Offset benutzt werden soll');
                items.push(moveToWebWITH_OFFSETCompletion);

                const moveToWebEND_OFFSET_XCompletion = new vscode.CompletionItem('END_OFFSET_X');
                moveToWebEND_OFFSET_XCompletion.kind = vscode.CompletionItemKind.Field;
                moveToWebEND_OFFSET_XCompletion.insertText = new vscode.SnippetString("END_OFFSET_X = \"${1}\"");
                moveToWebEND_OFFSET_XCompletion.documentation = new vscode.MarkdownString('Gibt den Offset zum ausgew\u00E4hlten Element in vertikale Richtung an');
                items.push(moveToWebEND_OFFSET_XCompletion);

                const moveToWebEND_OFFSET_YCompletion = new vscode.CompletionItem('END_OFFSET_Y');
                moveToWebEND_OFFSET_YCompletion.kind = vscode.CompletionItemKind.Field;
                moveToWebEND_OFFSET_YCompletion.insertText = new vscode.SnippetString("END_OFFSET_Y = \"${1}\"");
                moveToWebEND_OFFSET_YCompletion.documentation = new vscode.MarkdownString('Gibt den Offset zum ausgew\u00E4hlten Element in horizontale Richtung an');
                items.push(moveToWebEND_OFFSET_YCompletion);
            }

            if (/.*\s*navigateMobile\s*\(.*/.test(linePrefix)) {

                const navigateMobileURLCompletion = new vscode.CompletionItem('URL');
                navigateMobileURLCompletion.kind = vscode.CompletionItemKind.Field;
                navigateMobileURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                navigateMobileURLCompletion.documentation = new vscode.MarkdownString('Der Parameter muss mit der URL der Webseite belegt werden, zu der navigiert werden soll.');
                items.push(navigateMobileURLCompletion);

                const navigateMobileDIRECTIONCompletion = new vscode.CompletionItem('DIRECTION');
                navigateMobileDIRECTIONCompletion.kind = vscode.CompletionItemKind.Field;
                navigateMobileDIRECTIONCompletion.insertText = new vscode.SnippetString("DIRECTION = \"${1}\"");
                navigateMobileDIRECTIONCompletion.documentation = new vscode.MarkdownString('Der Parameter kann mit den Werten \'BACK\' oder \'FORWARD\' belegt werden.');
                items.push(navigateMobileDIRECTIONCompletion);
            }

            if (/.*\s*navigateWeb\s*\(.*/.test(linePrefix)) {

                const navigateWebEXPECTED_WEBSITE_TITLECompletion = new vscode.CompletionItem('EXPECTED_WEBSITE_TITLE');
                navigateWebEXPECTED_WEBSITE_TITLECompletion.kind = vscode.CompletionItemKind.Field;
                navigateWebEXPECTED_WEBSITE_TITLECompletion.insertText = new vscode.SnippetString("EXPECTED_WEBSITE_TITLE = \"${1}\"");
                navigateWebEXPECTED_WEBSITE_TITLECompletion.documentation = new vscode.MarkdownString('Erwarteter Seiten-Titel.');
                items.push(navigateWebEXPECTED_WEBSITE_TITLECompletion);

                const navigateWebURLCompletion = new vscode.CompletionItem('URL');
                navigateWebURLCompletion.kind = vscode.CompletionItemKind.Field;
                navigateWebURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                navigateWebURLCompletion.documentation = new vscode.MarkdownString('Zu \u00F6ffnende URL (http:\/\/www...).');
                items.push(navigateWebURLCompletion);
            }

            if (/.*\s*networkAndroid\s*\(.*/.test(linePrefix)) {

                const networkAndroidWIFICompletion = new vscode.CompletionItem('WIFI');
                networkAndroidWIFICompletion.kind = vscode.CompletionItemKind.Field;
                networkAndroidWIFICompletion.insertText = new vscode.SnippetString("WIFI = \"${1}\"");
                networkAndroidWIFICompletion.documentation = new vscode.MarkdownString('Wird der Parameter mit \'on\' belegt, wird das WIFI eingeschaltet, wird er mit \'off\' belegt, wird es ausgeschaltet.');
                items.push(networkAndroidWIFICompletion);

                const networkAndroidDATACompletion = new vscode.CompletionItem('DATA');
                networkAndroidDATACompletion.kind = vscode.CompletionItemKind.Field;
                networkAndroidDATACompletion.insertText = new vscode.SnippetString("DATA = \"${1}\"");
                networkAndroidDATACompletion.documentation = new vscode.MarkdownString('Wird der Parameter mit \'on\' belegt, wird die mobile Datennutzung eingeschaltet, wird er mit \'off\' belegt, wird sie ausgeschaltet.');
                items.push(networkAndroidDATACompletion);

                const networkAndroidAIRPLANECompletion = new vscode.CompletionItem('AIRPLANE');
                networkAndroidAIRPLANECompletion.kind = vscode.CompletionItemKind.Field;
                networkAndroidAIRPLANECompletion.insertText = new vscode.SnippetString("AIRPLANE = \"${1}\"");
                networkAndroidAIRPLANECompletion.documentation = new vscode.MarkdownString('Wird der Parameter mit \'on\' belegt, wird der Flugzeugmodus eingeschaltet, wird er mit \'off\' belegt, wird er ausgeschaltet.');
                items.push(networkAndroidAIRPLANECompletion);
            }

            if (/.*\s*not\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*notEmpty\s*\(.*/.test(linePrefix)) {

                const notEmptyVALUECompletion = new vscode.CompletionItem('VALUE');
                notEmptyVALUECompletion.kind = vscode.CompletionItemKind.Field;
                notEmptyVALUECompletion.insertText = new vscode.SnippetString("VALUE = \"${1}\"");
                notEmptyVALUECompletion.documentation = new vscode.MarkdownString('Zu \u00FCberpr\u00FCfender Parameter');
                items.push(notEmptyVALUECompletion);
            }

            if (/.*\s*notEqualsAlpha\s*\(.*/.test(linePrefix)) {

                const notEqualsAlphaLEFTCompletion = new vscode.CompletionItem('LEFT');
                notEqualsAlphaLEFTCompletion.kind = vscode.CompletionItemKind.Field;
                notEqualsAlphaLEFTCompletion.insertText = new vscode.SnippetString("LEFT = \"${1}\"");
                notEqualsAlphaLEFTCompletion.documentation = new vscode.MarkdownString('Parameter, der links vom Vergleichs-Operator stehen soll.');
                items.push(notEqualsAlphaLEFTCompletion);

                const notEqualsAlphaRIGHTCompletion = new vscode.CompletionItem('RIGHT');
                notEqualsAlphaRIGHTCompletion.kind = vscode.CompletionItemKind.Field;
                notEqualsAlphaRIGHTCompletion.insertText = new vscode.SnippetString("RIGHT = \"${1}\"");
                notEqualsAlphaRIGHTCompletion.documentation = new vscode.MarkdownString('Parameter, der rechts vom Vergleichs-Operator stehen soll.');
                items.push(notEqualsAlphaRIGHTCompletion);
            }

            if (/.*\s*openNotificationAndroid\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*openSql\s*\(.*/.test(linePrefix)) {

                const openSqlCONNECTION_NAMECompletion = new vscode.CompletionItem('CONNECTION_NAME');
                openSqlCONNECTION_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                openSqlCONNECTION_NAMECompletion.insertText = new vscode.SnippetString("CONNECTION_NAME = \"${1}\"");
                openSqlCONNECTION_NAMECompletion.documentation = new vscode.MarkdownString('Name der zu er\u00F6ffenden Datenbankverbindung');
                items.push(openSqlCONNECTION_NAMECompletion);

                const openSqlJDBC_URLCompletion = new vscode.CompletionItem('JDBC_URL');
                openSqlJDBC_URLCompletion.kind = vscode.CompletionItemKind.Field;
                openSqlJDBC_URLCompletion.insertText = new vscode.SnippetString("JDBC_URL = \"${1}\"");
                openSqlJDBC_URLCompletion.documentation = new vscode.MarkdownString('JDBC-URL zur Verbindung mit der Datenbank. Z. B. jdbc:mysql:\/\/localhost\/Test.');
                items.push(openSqlJDBC_URLCompletion);

                const openSqlDB_USERNAMECompletion = new vscode.CompletionItem('DB_USERNAME');
                openSqlDB_USERNAMECompletion.kind = vscode.CompletionItemKind.Field;
                openSqlDB_USERNAMECompletion.insertText = new vscode.SnippetString("DB_USERNAME = \"${1}\"");
                openSqlDB_USERNAMECompletion.documentation = new vscode.MarkdownString('Name des DB-Users');
                items.push(openSqlDB_USERNAMECompletion);

                const openSqlDB_PASSWORDCompletion = new vscode.CompletionItem('DB_PASSWORD');
                openSqlDB_PASSWORDCompletion.kind = vscode.CompletionItemKind.Field;
                openSqlDB_PASSWORDCompletion.insertText = new vscode.SnippetString("DB_PASSWORD = \"${1}\"");
                openSqlDB_PASSWORDCompletion.documentation = new vscode.MarkdownString('Passwort des DB-Users');
                items.push(openSqlDB_PASSWORDCompletion);

                const openSqlJDBC_DRIVERCompletion = new vscode.CompletionItem('JDBC_DRIVER');
                openSqlJDBC_DRIVERCompletion.kind = vscode.CompletionItemKind.Field;
                openSqlJDBC_DRIVERCompletion.insertText = new vscode.SnippetString("JDBC_DRIVER = \"${1}\"");
                openSqlJDBC_DRIVERCompletion.documentation = new vscode.MarkdownString('Falls angegeben, wird der gegebene JDBC driver (z. B. com.mysql.jdbc.Driver) geladen. Sonst wird der Autoload-Mechanismus von JDBC 4.0 genutzt.');
                items.push(openSqlJDBC_DRIVERCompletion);
            }

            if (/.*\s*or\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*pasteTextCP\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*pickNumericalFromPickerRoll\s*\(.*/.test(linePrefix)) {

                const pickNumericalFromPickerRollELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                pickNumericalFromPickerRollELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                pickNumericalFromPickerRollELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                pickNumericalFromPickerRollELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements als XPATH.');
                items.push(pickNumericalFromPickerRollELEMENT_NAMECompletion);

                const pickNumericalFromPickerRollDIRECTION_GREATERCompletion = new vscode.CompletionItem('DIRECTION_GREATER');
                pickNumericalFromPickerRollDIRECTION_GREATERCompletion.kind = vscode.CompletionItemKind.Field;
                pickNumericalFromPickerRollDIRECTION_GREATERCompletion.insertText = new vscode.SnippetString("DIRECTION_GREATER = \"${1}\"");
                pickNumericalFromPickerRollDIRECTION_GREATERCompletion.documentation = new vscode.MarkdownString('Richtung, in der die Werte gr\u00F6\u00DFer werden. Default ist \'down\'. Up ist die zweite Alternative.');
                items.push(pickNumericalFromPickerRollDIRECTION_GREATERCompletion);

                const pickNumericalFromPickerRollTARGET_VALUECompletion = new vscode.CompletionItem('TARGET_VALUE');
                pickNumericalFromPickerRollTARGET_VALUECompletion.kind = vscode.CompletionItemKind.Field;
                pickNumericalFromPickerRollTARGET_VALUECompletion.insertText = new vscode.SnippetString("TARGET_VALUE = \"${1}\"");
                pickNumericalFromPickerRollTARGET_VALUECompletion.documentation = new vscode.MarkdownString('Zielwert, der erreicht werden soll.');
                items.push(pickNumericalFromPickerRollTARGET_VALUECompletion);
            }

            if (/.*\s*pinchMobile\s*\(.*/.test(linePrefix)) {

                const pinchMobileX_POSITIONCompletion = new vscode.CompletionItem('X_POSITION');
                pinchMobileX_POSITIONCompletion.kind = vscode.CompletionItemKind.Field;
                pinchMobileX_POSITIONCompletion.insertText = new vscode.SnippetString("X_POSITION = \"${1}\"");
                pinchMobileX_POSITIONCompletion.documentation = new vscode.MarkdownString('Der Parameter gibt die X-Koordinate des Punktes in Pixeln an, an dem die Pinch-Geste durchgef\u00FChrt werden soll. Der Parameter muss als positive, ganze Zahl angegeben werden.');
                items.push(pinchMobileX_POSITIONCompletion);

                const pinchMobileY_POSITIONCompletion = new vscode.CompletionItem('Y_POSITION');
                pinchMobileY_POSITIONCompletion.kind = vscode.CompletionItemKind.Field;
                pinchMobileY_POSITIONCompletion.insertText = new vscode.SnippetString("Y_POSITION = \"${1}\"");
                pinchMobileY_POSITIONCompletion.documentation = new vscode.MarkdownString('Der Parameter gibt die Y-Koordinate des Punktes in Pixeln an, an dem die Pinch-Geste durchgef\u00FChrt werden soll. Der Parameter muss als positive, ganze Zahl angegeben werden.');
                items.push(pinchMobileY_POSITIONCompletion);
            }

            if (/.*\s*queryJson\s*\(.*/.test(linePrefix)) {

                const queryJsonJSONTEXTCompletion = new vscode.CompletionItem('JSONTEXT');
                queryJsonJSONTEXTCompletion.kind = vscode.CompletionItemKind.Field;
                queryJsonJSONTEXTCompletion.insertText = new vscode.SnippetString("JSONTEXT = \"${1}\"");
                queryJsonJSONTEXTCompletion.documentation = new vscode.MarkdownString('Zu durchsuchender Text im JSON Format');
                items.push(queryJsonJSONTEXTCompletion);

                const queryJsonQUERYCompletion = new vscode.CompletionItem('QUERY');
                queryJsonQUERYCompletion.kind = vscode.CompletionItemKind.Field;
                queryJsonQUERYCompletion.insertText = new vscode.SnippetString("QUERY = \"${1}\"");
                queryJsonQUERYCompletion.documentation = new vscode.MarkdownString('JsonPath-Query auf den JSONTEXT');
                items.push(queryJsonQUERYCompletion);

                const queryJsonTARGET_FILECompletion = new vscode.CompletionItem('TARGET_FILE');
                queryJsonTARGET_FILECompletion.kind = vscode.CompletionItemKind.Field;
                queryJsonTARGET_FILECompletion.insertText = new vscode.SnippetString("TARGET_FILE = \"${1}\"");
                queryJsonTARGET_FILECompletion.documentation = new vscode.MarkdownString('Dateipfad f\u00FCr csv Datei, in die das Ergebnis geschrieben werden soll.');
                items.push(queryJsonTARGET_FILECompletion);

                const queryJsonVALUE_DELIMITERCompletion = new vscode.CompletionItem('VALUE_DELIMITER');
                queryJsonVALUE_DELIMITERCompletion.kind = vscode.CompletionItemKind.Field;
                queryJsonVALUE_DELIMITERCompletion.insertText = new vscode.SnippetString("VALUE_DELIMITER = \"${1}\"");
                queryJsonVALUE_DELIMITERCompletion.documentation = new vscode.MarkdownString('Festlegen des Trennzeichen zwischn zwei Elementen.');
                items.push(queryJsonVALUE_DELIMITERCompletion);

                const queryJsonTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                queryJsonTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                queryJsonTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                queryJsonTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Element-Text geschrieben werden soll.');
                items.push(queryJsonTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*querySql\s*\(.*/.test(linePrefix)) {

                const querySqlCONNECTION_NAMECompletion = new vscode.CompletionItem('CONNECTION_NAME');
                querySqlCONNECTION_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                querySqlCONNECTION_NAMECompletion.insertText = new vscode.SnippetString("CONNECTION_NAME = \"${1}\"");
                querySqlCONNECTION_NAMECompletion.documentation = new vscode.MarkdownString('Name der bestehenden Datenbankverbindung');
                items.push(querySqlCONNECTION_NAMECompletion);

                const querySqlSQL_STATEMENT_OR_FILECompletion = new vscode.CompletionItem('SQL_STATEMENT_OR_FILE');
                querySqlSQL_STATEMENT_OR_FILECompletion.kind = vscode.CompletionItemKind.Field;
                querySqlSQL_STATEMENT_OR_FILECompletion.insertText = new vscode.SnippetString("SQL_STATEMENT_OR_FILE = \"${1}\"");
                querySqlSQL_STATEMENT_OR_FILECompletion.documentation = new vscode.MarkdownString('1) Absoluter, vollst\u00E4ndig qualifizierter Dateiname (sollte als Separator immer \'\/\' verwenden) einer Datei, die ein oder mehrere auszuf\u00FChrende SQL-Statements enth\u00E4lt (Dateiendung muss .sql sein). Beispiel: C:\/sql\/commands.sql        2) Ein oder mehrere SQL-Statements. Mehrere SQL-statements sind durch \';\' zu trennen (wird nur eins vorgegeben, ist dies optional).');
                items.push(querySqlSQL_STATEMENT_OR_FILECompletion);

                const querySqlTARGET_FILECompletion = new vscode.CompletionItem('TARGET_FILE');
                querySqlTARGET_FILECompletion.kind = vscode.CompletionItemKind.Field;
                querySqlTARGET_FILECompletion.insertText = new vscode.SnippetString("TARGET_FILE = \"${1}\"");
                querySqlTARGET_FILECompletion.documentation = new vscode.MarkdownString('Pfad zur CSV Datei, in welche das Ergebnis geschrieben wird.');
                items.push(querySqlTARGET_FILECompletion);

                const querySqlVALUE_DELIMITERCompletion = new vscode.CompletionItem('VALUE_DELIMITER');
                querySqlVALUE_DELIMITERCompletion.kind = vscode.CompletionItemKind.Field;
                querySqlVALUE_DELIMITERCompletion.insertText = new vscode.SnippetString("VALUE_DELIMITER = \"${1}\"");
                querySqlVALUE_DELIMITERCompletion.documentation = new vscode.MarkdownString('Festlegen des Trennzeichen zwischen zwei Elementen.');
                items.push(querySqlVALUE_DELIMITERCompletion);

                const querySqlWRITE_ENCODINGCompletion = new vscode.CompletionItem('WRITE_ENCODING');
                querySqlWRITE_ENCODINGCompletion.kind = vscode.CompletionItemKind.Field;
                querySqlWRITE_ENCODINGCompletion.insertText = new vscode.SnippetString("WRITE_ENCODING = \"${1}\"");
                querySqlWRITE_ENCODINGCompletion.documentation = new vscode.MarkdownString('Encoding, welches beim Schreiben benutzt werden soll.');
                items.push(querySqlWRITE_ENCODINGCompletion);

                const querySqlREAD_ENCODINGCompletion = new vscode.CompletionItem('READ_ENCODING');
                querySqlREAD_ENCODINGCompletion.kind = vscode.CompletionItemKind.Field;
                querySqlREAD_ENCODINGCompletion.insertText = new vscode.SnippetString("READ_ENCODING = \"${1}\"");
                querySqlREAD_ENCODINGCompletion.documentation = new vscode.MarkdownString('Encoding, welches beim Lesen benutzt werden soll.');
                items.push(querySqlREAD_ENCODINGCompletion);

                const querySqlTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                querySqlTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                querySqlTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                querySqlTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Falls angegeben, wird das Resultat in der durch diesen Schl\u00FCssel identifizierten Laufzeitvariable gespeichert (durch Hinzuf\u00FCgen oder Ersetzen). Das Resultat wird dabei im Format eines JSON-Array gespeichert, wobei jede zur\u00FCckgegebene Zeile einem Eintrag des JSON-Arrays entspricht. F\u00FCr den Sonderfall, das nur ein einzelner Wert aus einer einzelnen Zeile abgefragt wird, kann es notwendig sein, diesen vor der weiteren Verwendung zu parsen (z.B. wird anstelle des gesamten Ergebnisses [{\'ID\':123}] nur der Wert 123 ben\u00F6tigt. Dazu ist das Kommando changeStorageValue mit der Option extractSingleSqlResultFromJson zu verwenden.');
                items.push(querySqlTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*queryXML\s*\(.*/.test(linePrefix)) {

                const queryXMLXMLTEXTCompletion = new vscode.CompletionItem('XMLTEXT');
                queryXMLXMLTEXTCompletion.kind = vscode.CompletionItemKind.Field;
                queryXMLXMLTEXTCompletion.insertText = new vscode.SnippetString("XMLTEXT = \"${1}\"");
                queryXMLXMLTEXTCompletion.documentation = new vscode.MarkdownString('Pfad oder String im XML Format');
                items.push(queryXMLXMLTEXTCompletion);

                const queryXMLEXPRESSIONCompletion = new vscode.CompletionItem('EXPRESSION');
                queryXMLEXPRESSIONCompletion.kind = vscode.CompletionItemKind.Field;
                queryXMLEXPRESSIONCompletion.insertText = new vscode.SnippetString("EXPRESSION = \"${1}\"");
                queryXMLEXPRESSIONCompletion.documentation = new vscode.MarkdownString('XPath Expression');
                items.push(queryXMLEXPRESSIONCompletion);

                const queryXMLIS_FILECompletion = new vscode.CompletionItem('IS_FILE');
                queryXMLIS_FILECompletion.kind = vscode.CompletionItemKind.Field;
                queryXMLIS_FILECompletion.insertText = new vscode.SnippetString("IS_FILE = \"${1}\"");
                queryXMLIS_FILECompletion.documentation = new vscode.MarkdownString('True, falls es sich um eine lokale Datei handelt');
                items.push(queryXMLIS_FILECompletion);

                const queryXMLTARGET_FILECompletion = new vscode.CompletionItem('TARGET_FILE');
                queryXMLTARGET_FILECompletion.kind = vscode.CompletionItemKind.Field;
                queryXMLTARGET_FILECompletion.insertText = new vscode.SnippetString("TARGET_FILE = \"${1}\"");
                queryXMLTARGET_FILECompletion.documentation = new vscode.MarkdownString('Pfad der CSV Datei, in die das Abfrage-Ergebnis geschrieben wird.');
                items.push(queryXMLTARGET_FILECompletion);

                const queryXMLWRITE_AS_XMLCompletion = new vscode.CompletionItem('WRITE_AS_XML');
                queryXMLWRITE_AS_XMLCompletion.kind = vscode.CompletionItemKind.Field;
                queryXMLWRITE_AS_XMLCompletion.insertText = new vscode.SnippetString("WRITE_AS_XML = \"${1}\"");
                queryXMLWRITE_AS_XMLCompletion.documentation = new vscode.MarkdownString('Falls true, wird das Query Result in den Target Storage als XML geschrieben');
                items.push(queryXMLWRITE_AS_XMLCompletion);

                const queryXMLTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                queryXMLTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                queryXMLTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                queryXMLTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel der Storage-Variable, in die das Abfrage-Ergebnis geschrieben wird.');
                items.push(queryXMLTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*readFileToStorage\s*\(.*/.test(linePrefix)) {

                const readFileToStorageFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                readFileToStorageFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                readFileToStorageFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                readFileToStorageFILENAMECompletion.documentation = new vscode.MarkdownString('Dateiname der einzulesenden Datei');
                items.push(readFileToStorageFILENAMECompletion);

                const readFileToStorageENCODING_TEXTCompletion = new vscode.CompletionItem('ENCODING_TEXT');
                readFileToStorageENCODING_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                readFileToStorageENCODING_TEXTCompletion.insertText = new vscode.SnippetString("ENCODING_TEXT = \"${1}\"");
                readFileToStorageENCODING_TEXTCompletion.documentation = new vscode.MarkdownString('Explizite Angabe der Zeichenkodierung der einzulesenden Datei (Default: UTF_8). M\u00F6gliche Werte entsprechen org.apache.commons.io.Charsets. Dies sind: UTF_8, UTF_16, UTF_16BE, UTF_16LE, ISO_8859_1, US_ASCII.');
                items.push(readFileToStorageENCODING_TEXTCompletion);

                const readFileToStorageTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                readFileToStorageTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                readFileToStorageTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                readFileToStorageTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Element-Text geschrieben werden soll.');
                items.push(readFileToStorageTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*readTextInPicture\s*\(.*/.test(linePrefix)) {

                const readTextInPictureFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                readTextInPictureFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                readTextInPictureFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                readTextInPictureFILENAMECompletion.documentation = new vscode.MarkdownString('Name der Bilddatei, die untersucht werden soll. Wenn keine Bilddatei angegeben wird, wird der Zwischenspeicher nach Bilddaten durchsucht. Ist auch hier kein Bild vorhanden, wird ein Screenshot erstellt.');
                items.push(readTextInPictureFILENAMECompletion);

                const readTextInPictureBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                readTextInPictureBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                readTextInPictureBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                readTextInPictureBASEDIRCompletion.documentation = new vscode.MarkdownString('Gibt das Basisverzeichnis an.');
                items.push(readTextInPictureBASEDIRCompletion);

                const readTextInPictureX1Completion = new vscode.CompletionItem('X1');
                readTextInPictureX1Completion.kind = vscode.CompletionItemKind.Field;
                readTextInPictureX1Completion.insertText = new vscode.SnippetString("X1 = \"${1}\"");
                readTextInPictureX1Completion.documentation = new vscode.MarkdownString('Wenn nur ein Bildschnitt untersucht werden soll: X-Koordinate der linken oberen Ecke.');
                items.push(readTextInPictureX1Completion);

                const readTextInPictureY1Completion = new vscode.CompletionItem('Y1');
                readTextInPictureY1Completion.kind = vscode.CompletionItemKind.Field;
                readTextInPictureY1Completion.insertText = new vscode.SnippetString("Y1 = \"${1}\"");
                readTextInPictureY1Completion.documentation = new vscode.MarkdownString('Wenn nur ein Bildschnitt untersucht werden soll: Y-Koordinate der linken oberen Ecke.');
                items.push(readTextInPictureY1Completion);

                const readTextInPictureX2Completion = new vscode.CompletionItem('X2');
                readTextInPictureX2Completion.kind = vscode.CompletionItemKind.Field;
                readTextInPictureX2Completion.insertText = new vscode.SnippetString("X2 = \"${1}\"");
                readTextInPictureX2Completion.documentation = new vscode.MarkdownString('Wenn nur ein Bildschnitt untersucht werden soll: X-Koordinate der rechten unteren Ecke.');
                items.push(readTextInPictureX2Completion);

                const readTextInPictureY2Completion = new vscode.CompletionItem('Y2');
                readTextInPictureY2Completion.kind = vscode.CompletionItemKind.Field;
                readTextInPictureY2Completion.insertText = new vscode.SnippetString("Y2 = \"${1}\"");
                readTextInPictureY2Completion.documentation = new vscode.MarkdownString('Wenn nur ein Bildschnitt untersucht werden soll: Y-Koordinate der rechten unteren Ecke.');
                items.push(readTextInPictureY2Completion);

                const readTextInPictureTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                readTextInPictureTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                readTextInPictureTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                readTextInPictureTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel unter dem die gefundenen Worte, getrennt durch Leerzeichen, in der Storage-Datei abgelegt werden.');
                items.push(readTextInPictureTARGET_STORAGE_KEYCompletion);

                const readTextInPictureOCR_IMPLEMENTATIONCompletion = new vscode.CompletionItem('OCR_IMPLEMENTATION');
                readTextInPictureOCR_IMPLEMENTATIONCompletion.kind = vscode.CompletionItemKind.Field;
                readTextInPictureOCR_IMPLEMENTATIONCompletion.insertText = new vscode.SnippetString("OCR_IMPLEMENTATION = \"${1}\"");
                readTextInPictureOCR_IMPLEMENTATIONCompletion.documentation = new vscode.MarkdownString('Wahl der verwendeten OCR Implementierung. GCP oder TESSERACT.');
                items.push(readTextInPictureOCR_IMPLEMENTATIONCompletion);
            }

            if (/.*\s*receiveMail\s*\(.*/.test(linePrefix)) {

                const receiveMailSERVERCompletion = new vscode.CompletionItem('SERVER');
                receiveMailSERVERCompletion.kind = vscode.CompletionItemKind.Field;
                receiveMailSERVERCompletion.insertText = new vscode.SnippetString("SERVER = \"${1}\"");
                receiveMailSERVERCompletion.documentation = new vscode.MarkdownString('Servername des Mailanbieters.');
                items.push(receiveMailSERVERCompletion);

                const receiveMailUSERCompletion = new vscode.CompletionItem('USER');
                receiveMailUSERCompletion.kind = vscode.CompletionItemKind.Field;
                receiveMailUSERCompletion.insertText = new vscode.SnippetString("USER = \"${1}\"");
                receiveMailUSERCompletion.documentation = new vscode.MarkdownString('Benutzername f\u00FCr das Mailkonto');
                items.push(receiveMailUSERCompletion);

                const receiveMailPASSWORDCompletion = new vscode.CompletionItem('PASSWORD');
                receiveMailPASSWORDCompletion.kind = vscode.CompletionItemKind.Field;
                receiveMailPASSWORDCompletion.insertText = new vscode.SnippetString("PASSWORD = \"${1}\"");
                receiveMailPASSWORDCompletion.documentation = new vscode.MarkdownString('Passwort f\u00FCr das Mailkonto');
                items.push(receiveMailPASSWORDCompletion);

                const receiveMailFOLDERCompletion = new vscode.CompletionItem('FOLDER');
                receiveMailFOLDERCompletion.kind = vscode.CompletionItemKind.Field;
                receiveMailFOLDERCompletion.insertText = new vscode.SnippetString("FOLDER = \"${1}\"");
                receiveMailFOLDERCompletion.documentation = new vscode.MarkdownString('Name des Ordners auf dem E-Mail-Server, auf den zugegriffen werden soll.');
                items.push(receiveMailFOLDERCompletion);

                const receiveMailSUBJECTCompletion = new vscode.CompletionItem('SUBJECT');
                receiveMailSUBJECTCompletion.kind = vscode.CompletionItemKind.Field;
                receiveMailSUBJECTCompletion.insertText = new vscode.SnippetString("SUBJECT = \"${1}\"");
                receiveMailSUBJECTCompletion.documentation = new vscode.MarkdownString('Betreff der empfangenden E-Mail.');
                items.push(receiveMailSUBJECTCompletion);

                const receiveMailSEARCHCompletion = new vscode.CompletionItem('SEARCH');
                receiveMailSEARCHCompletion.kind = vscode.CompletionItemKind.Field;
                receiveMailSEARCHCompletion.insertText = new vscode.SnippetString("SEARCH = \"${1}\"");
                receiveMailSEARCHCompletion.documentation = new vscode.MarkdownString('Regul\u00E4rer Ausdruck, nach dem gesucht werden soll.');
                items.push(receiveMailSEARCHCompletion);

                const receiveMailLOCATIONCompletion = new vscode.CompletionItem('LOCATION');
                receiveMailLOCATIONCompletion.kind = vscode.CompletionItemKind.Field;
                receiveMailLOCATIONCompletion.insertText = new vscode.SnippetString("LOCATION = \"${1}\"");
                receiveMailLOCATIONCompletion.documentation = new vscode.MarkdownString('Ort der Suche. M\u00F6glich sind \'body\' oder \'subject\'.');
                items.push(receiveMailLOCATIONCompletion);

                const receiveMailTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                receiveMailTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                receiveMailTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                receiveMailTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Name der Laufzeitvariablen, in der das Resultat des regul\u00E4ren Ausdrucks gespeichert wird.');
                items.push(receiveMailTARGET_STORAGE_KEYCompletion);

                const receiveMailATTACHMENT_LOCATIONCompletion = new vscode.CompletionItem('ATTACHMENT_LOCATION');
                receiveMailATTACHMENT_LOCATIONCompletion.kind = vscode.CompletionItemKind.Field;
                receiveMailATTACHMENT_LOCATIONCompletion.insertText = new vscode.SnippetString("ATTACHMENT_LOCATION = \"${1}\"");
                receiveMailATTACHMENT_LOCATIONCompletion.documentation = new vscode.MarkdownString('Pfad zu dem Ordner, in dem die Anh\u00E4nge gespeichert werden sollen.');
                items.push(receiveMailATTACHMENT_LOCATIONCompletion);

                const receiveMailATTACHMENT_NAME_TARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('ATTACHMENT_NAME_TARGET_STORAGE_KEY');
                receiveMailATTACHMENT_NAME_TARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                receiveMailATTACHMENT_NAME_TARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("ATTACHMENT_NAME_TARGET_STORAGE_KEY = \"${1}\"");
                receiveMailATTACHMENT_NAME_TARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Name der Laufzeitvariablen, in der die Namen der heruntergeladenen Anh\u00E4nge gespeichert werden.      Trennzeichen bei mehreren Anh\u00E4ngen ist dabei jeweils ein Semikolon (\';\').');
                items.push(receiveMailATTACHMENT_NAME_TARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*receiveUnseenMailsSaveAttachment\s*\(.*/.test(linePrefix)) {

                const receiveUnseenMailsSaveAttachmentSERVERCompletion = new vscode.CompletionItem('SERVER');
                receiveUnseenMailsSaveAttachmentSERVERCompletion.kind = vscode.CompletionItemKind.Field;
                receiveUnseenMailsSaveAttachmentSERVERCompletion.insertText = new vscode.SnippetString("SERVER = \"${1}\"");
                receiveUnseenMailsSaveAttachmentSERVERCompletion.documentation = new vscode.MarkdownString('Servername des Mailanbieters.');
                items.push(receiveUnseenMailsSaveAttachmentSERVERCompletion);

                const receiveUnseenMailsSaveAttachmentUSERCompletion = new vscode.CompletionItem('USER');
                receiveUnseenMailsSaveAttachmentUSERCompletion.kind = vscode.CompletionItemKind.Field;
                receiveUnseenMailsSaveAttachmentUSERCompletion.insertText = new vscode.SnippetString("USER = \"${1}\"");
                receiveUnseenMailsSaveAttachmentUSERCompletion.documentation = new vscode.MarkdownString('Benutzername f\u00FCr das Mailkonto');
                items.push(receiveUnseenMailsSaveAttachmentUSERCompletion);

                const receiveUnseenMailsSaveAttachmentPASSWORDCompletion = new vscode.CompletionItem('PASSWORD');
                receiveUnseenMailsSaveAttachmentPASSWORDCompletion.kind = vscode.CompletionItemKind.Field;
                receiveUnseenMailsSaveAttachmentPASSWORDCompletion.insertText = new vscode.SnippetString("PASSWORD = \"${1}\"");
                receiveUnseenMailsSaveAttachmentPASSWORDCompletion.documentation = new vscode.MarkdownString('Passwort f\u00FCr das Mailkonto');
                items.push(receiveUnseenMailsSaveAttachmentPASSWORDCompletion);

                const receiveUnseenMailsSaveAttachmentSUBJECTCompletion = new vscode.CompletionItem('SUBJECT');
                receiveUnseenMailsSaveAttachmentSUBJECTCompletion.kind = vscode.CompletionItemKind.Field;
                receiveUnseenMailsSaveAttachmentSUBJECTCompletion.insertText = new vscode.SnippetString("SUBJECT = \"${1}\"");
                receiveUnseenMailsSaveAttachmentSUBJECTCompletion.documentation = new vscode.MarkdownString('Betreff der empfangenden E-Mail.');
                items.push(receiveUnseenMailsSaveAttachmentSUBJECTCompletion);

                const receiveUnseenMailsSaveAttachmentFOLDERCompletion = new vscode.CompletionItem('FOLDER');
                receiveUnseenMailsSaveAttachmentFOLDERCompletion.kind = vscode.CompletionItemKind.Field;
                receiveUnseenMailsSaveAttachmentFOLDERCompletion.insertText = new vscode.SnippetString("FOLDER = \"${1}\"");
                receiveUnseenMailsSaveAttachmentFOLDERCompletion.documentation = new vscode.MarkdownString('Name des Ordners auf dem E-Mail-Server, auf den zugegriffen werden soll.');
                items.push(receiveUnseenMailsSaveAttachmentFOLDERCompletion);

                const receiveUnseenMailsSaveAttachmentATTACHMENT_LOCATIONCompletion = new vscode.CompletionItem('ATTACHMENT_LOCATION');
                receiveUnseenMailsSaveAttachmentATTACHMENT_LOCATIONCompletion.kind = vscode.CompletionItemKind.Field;
                receiveUnseenMailsSaveAttachmentATTACHMENT_LOCATIONCompletion.insertText = new vscode.SnippetString("ATTACHMENT_LOCATION = \"${1}\"");
                receiveUnseenMailsSaveAttachmentATTACHMENT_LOCATIONCompletion.documentation = new vscode.MarkdownString('Pfad zu dem Ordner, in dem die Anh\u00E4nge gespeichert werden sollen.');
                items.push(receiveUnseenMailsSaveAttachmentATTACHMENT_LOCATIONCompletion);

                const receiveUnseenMailsSaveAttachmentATTACHMENT_NAME_TARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('ATTACHMENT_NAME_TARGET_STORAGE_KEY');
                receiveUnseenMailsSaveAttachmentATTACHMENT_NAME_TARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                receiveUnseenMailsSaveAttachmentATTACHMENT_NAME_TARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("ATTACHMENT_NAME_TARGET_STORAGE_KEY = \"${1}\"");
                receiveUnseenMailsSaveAttachmentATTACHMENT_NAME_TARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Name der Laufzeitvariablen, in der die Namen der heruntergeladenen Anh\u00E4nge gespeichert werden.      Trennzeichen bei mehreren Anh\u00E4ngen ist dabei jeweils ein Semikolon (\';\').');
                items.push(receiveUnseenMailsSaveAttachmentATTACHMENT_NAME_TARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*refreshWeb\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*removeDuplicates\s*\(.*/.test(linePrefix)) {

                const removeDuplicatesTEXTCompletion = new vscode.CompletionItem('TEXT');
                removeDuplicatesTEXTCompletion.kind = vscode.CompletionItemKind.Field;
                removeDuplicatesTEXTCompletion.insertText = new vscode.SnippetString("TEXT = \"${1}\"");
                removeDuplicatesTEXTCompletion.documentation = new vscode.MarkdownString('Der zu ver\u00E4ndernde Text');
                items.push(removeDuplicatesTEXTCompletion);

                const removeDuplicatesIS_FILECompletion = new vscode.CompletionItem('IS_FILE');
                removeDuplicatesIS_FILECompletion.kind = vscode.CompletionItemKind.Field;
                removeDuplicatesIS_FILECompletion.insertText = new vscode.SnippetString("IS_FILE = \"${1}\"");
                removeDuplicatesIS_FILECompletion.documentation = new vscode.MarkdownString('Angabe, ob der \u00FCbergebene Text ein Dateipfad ist. Default false');
                items.push(removeDuplicatesIS_FILECompletion);

                const removeDuplicatesTARGET_FILECompletion = new vscode.CompletionItem('TARGET_FILE');
                removeDuplicatesTARGET_FILECompletion.kind = vscode.CompletionItemKind.Field;
                removeDuplicatesTARGET_FILECompletion.insertText = new vscode.SnippetString("TARGET_FILE = \"${1}\"");
                removeDuplicatesTARGET_FILECompletion.documentation = new vscode.MarkdownString('Dateipfad, in welche die bearbeitete Datei geschrieben werden soll. Wenn leer, wird in Storage geschrieben');
                items.push(removeDuplicatesTARGET_FILECompletion);

                const removeDuplicatesSEPARATE_BY_LINECompletion = new vscode.CompletionItem('SEPARATE_BY_LINE');
                removeDuplicatesSEPARATE_BY_LINECompletion.kind = vscode.CompletionItemKind.Field;
                removeDuplicatesSEPARATE_BY_LINECompletion.insertText = new vscode.SnippetString("SEPARATE_BY_LINE = \"${1}\"");
                removeDuplicatesSEPARATE_BY_LINECompletion.documentation = new vscode.MarkdownString('Angabe, ob es sich um eine zeilengetrennte Separarierung handelt. Wenn nicht, wird jeder kommaseparierte Wert beachtet.');
                items.push(removeDuplicatesSEPARATE_BY_LINECompletion);

                const removeDuplicatesTRIMCompletion = new vscode.CompletionItem('TRIM');
                removeDuplicatesTRIMCompletion.kind = vscode.CompletionItemKind.Field;
                removeDuplicatesTRIMCompletion.insertText = new vscode.SnippetString("TRIM = \"${1}\"");
                removeDuplicatesTRIMCompletion.documentation = new vscode.MarkdownString('Angabe, ob die .False per Default');
                items.push(removeDuplicatesTRIMCompletion);

                const removeDuplicatesTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                removeDuplicatesTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                removeDuplicatesTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                removeDuplicatesTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der resultierende Text geschrieben wird.');
                items.push(removeDuplicatesTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*renderFullscreenImage\s*\(.*/.test(linePrefix)) {

                const renderFullscreenImageURLCompletion = new vscode.CompletionItem('URL');
                renderFullscreenImageURLCompletion.kind = vscode.CompletionItemKind.Field;
                renderFullscreenImageURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                renderFullscreenImageURLCompletion.documentation = new vscode.MarkdownString('URL des anzuzeigenden Bildes. ');
                items.push(renderFullscreenImageURLCompletion);

                const renderFullscreenImageDURATIONCompletion = new vscode.CompletionItem('DURATION');
                renderFullscreenImageDURATIONCompletion.kind = vscode.CompletionItemKind.Field;
                renderFullscreenImageDURATIONCompletion.insertText = new vscode.SnippetString("DURATION = \"${1}\"");
                renderFullscreenImageDURATIONCompletion.documentation = new vscode.MarkdownString('Anzeigedauer des Bildes in Millisekunden. Default: 3000');
                items.push(renderFullscreenImageDURATIONCompletion);

                const renderFullscreenImageWAITCompletion = new vscode.CompletionItem('WAIT');
                renderFullscreenImageWAITCompletion.kind = vscode.CompletionItemKind.Field;
                renderFullscreenImageWAITCompletion.insertText = new vscode.SnippetString("WAIT = \"${1}\"");
                renderFullscreenImageWAITCompletion.documentation = new vscode.MarkdownString('Soll auf den Abschluss des Renderings gewartet werden? Default: true');
                items.push(renderFullscreenImageWAITCompletion);

                const renderFullscreenImageCLEARCompletion = new vscode.CompletionItem('CLEAR');
                renderFullscreenImageCLEARCompletion.kind = vscode.CompletionItemKind.Field;
                renderFullscreenImageCLEARCompletion.insertText = new vscode.SnippetString("CLEAR = \"${1}\"");
                renderFullscreenImageCLEARCompletion.documentation = new vscode.MarkdownString('Soll der Renderer nach dem Rendering geleert werden? Default: true');
                items.push(renderFullscreenImageCLEARCompletion);
            }

            if (/.*\s*renderOverlayImage\s*\(.*/.test(linePrefix)) {

                const renderOverlayImageURLCompletion = new vscode.CompletionItem('URL');
                renderOverlayImageURLCompletion.kind = vscode.CompletionItemKind.Field;
                renderOverlayImageURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                renderOverlayImageURLCompletion.documentation = new vscode.MarkdownString('URL, die auf das anzuzeigende Bild verweist. Diese URL kann auf eine Bilddatei auf dem lokalen Dateisystem verweisen (Beispiel: file:\/\/D:\/mateo\/splash.png) oder auf eine Bilddatei im Internet (Beispiel: https:\/\/mateo-web.de\/wp-content\/uploads\/2020\/04\/mateo-web_klein.png).');
                items.push(renderOverlayImageURLCompletion);

                const renderOverlayImageDURATIONCompletion = new vscode.CompletionItem('DURATION');
                renderOverlayImageDURATIONCompletion.kind = vscode.CompletionItemKind.Field;
                renderOverlayImageDURATIONCompletion.insertText = new vscode.SnippetString("DURATION = \"${1}\"");
                renderOverlayImageDURATIONCompletion.documentation = new vscode.MarkdownString('Anzeigedauer des Bildes in Millisekunden. Standardm\u00E4\u00DFig wird das Bild dauerhaft angezeigt.');
                items.push(renderOverlayImageDURATIONCompletion);

                const renderOverlayImageOPACITYCompletion = new vscode.CompletionItem('OPACITY');
                renderOverlayImageOPACITYCompletion.kind = vscode.CompletionItemKind.Field;
                renderOverlayImageOPACITYCompletion.insertText = new vscode.SnippetString("OPACITY = \"${1}\"");
                renderOverlayImageOPACITYCompletion.documentation = new vscode.MarkdownString('Deckkraft des Bildes. Default: 1.0');
                items.push(renderOverlayImageOPACITYCompletion);

                const renderOverlayImageWIDTHCompletion = new vscode.CompletionItem('WIDTH');
                renderOverlayImageWIDTHCompletion.kind = vscode.CompletionItemKind.Field;
                renderOverlayImageWIDTHCompletion.insertText = new vscode.SnippetString("WIDTH = \"${1}\"");
                renderOverlayImageWIDTHCompletion.documentation = new vscode.MarkdownString('Breite des anzuzeigenden Bildes. Es kann ein absoluter Wert in Form von \'500\', oder ein relativer Wert in Form vom \'50%\' angegeben werden. Default: Original-Breite des Bildes');
                items.push(renderOverlayImageWIDTHCompletion);

                const renderOverlayImageHEIGHTCompletion = new vscode.CompletionItem('HEIGHT');
                renderOverlayImageHEIGHTCompletion.kind = vscode.CompletionItemKind.Field;
                renderOverlayImageHEIGHTCompletion.insertText = new vscode.SnippetString("HEIGHT = \"${1}\"");
                renderOverlayImageHEIGHTCompletion.documentation = new vscode.MarkdownString('H\u00F6he des anzuzeigenden Bildes. Es kann ein absoluter Wert in Form von \'500\', oder ein relativer Wert in Form vom \'50%\' angegeben werden. Default: Original-H\u00F6he des Bildes');
                items.push(renderOverlayImageHEIGHTCompletion);

                const renderOverlayImageHORIZ_ALIGNCompletion = new vscode.CompletionItem('HORIZ_ALIGN');
                renderOverlayImageHORIZ_ALIGNCompletion.kind = vscode.CompletionItemKind.Field;
                renderOverlayImageHORIZ_ALIGNCompletion.insertText = new vscode.SnippetString("HORIZ_ALIGN = \"${1}\"");
                renderOverlayImageHORIZ_ALIGNCompletion.documentation = new vscode.MarkdownString('Horizontale Ausrichtung des Bildes. M\u00F6gliche Werte: LEFT, CENTER, RIGHT. Default: right');
                items.push(renderOverlayImageHORIZ_ALIGNCompletion);

                const renderOverlayImageVERT_ALIGNCompletion = new vscode.CompletionItem('VERT_ALIGN');
                renderOverlayImageVERT_ALIGNCompletion.kind = vscode.CompletionItemKind.Field;
                renderOverlayImageVERT_ALIGNCompletion.insertText = new vscode.SnippetString("VERT_ALIGN = \"${1}\"");
                renderOverlayImageVERT_ALIGNCompletion.documentation = new vscode.MarkdownString('Vertikale Ausrichtung des Bildes. M\u00F6gliche Werte: TOP, CENTER, BOTTOM. Default: right');
                items.push(renderOverlayImageVERT_ALIGNCompletion);
            }

            if (/.*\s*renderText\s*\(.*/.test(linePrefix)) {

                const renderTextTEXTCompletion = new vscode.CompletionItem('TEXT');
                renderTextTEXTCompletion.kind = vscode.CompletionItemKind.Field;
                renderTextTEXTCompletion.insertText = new vscode.SnippetString("TEXT = \"${1}\"");
                renderTextTEXTCompletion.documentation = new vscode.MarkdownString('Anzuzeigender Text. Zur Formatierung kann HTML verwendet werden. ');
                items.push(renderTextTEXTCompletion);

                const renderTextDURATIONCompletion = new vscode.CompletionItem('DURATION');
                renderTextDURATIONCompletion.kind = vscode.CompletionItemKind.Field;
                renderTextDURATIONCompletion.insertText = new vscode.SnippetString("DURATION = \"${1}\"");
                renderTextDURATIONCompletion.documentation = new vscode.MarkdownString('Anzeigedauer des Textes in Millisekunden. ');
                items.push(renderTextDURATIONCompletion);

                const renderTextVERT_ALIGNCompletion = new vscode.CompletionItem('VERT_ALIGN');
                renderTextVERT_ALIGNCompletion.kind = vscode.CompletionItemKind.Field;
                renderTextVERT_ALIGNCompletion.insertText = new vscode.SnippetString("VERT_ALIGN = \"${1}\"");
                renderTextVERT_ALIGNCompletion.documentation = new vscode.MarkdownString('Vertikale Ausrichtung des Textes. M\u00F6gliche Werte: TOP, CENTER, BOTTOM. Default: bottom');
                items.push(renderTextVERT_ALIGNCompletion);

                const renderTextWAITCompletion = new vscode.CompletionItem('WAIT');
                renderTextWAITCompletion.kind = vscode.CompletionItemKind.Field;
                renderTextWAITCompletion.insertText = new vscode.SnippetString("WAIT = \"${1}\"");
                renderTextWAITCompletion.documentation = new vscode.MarkdownString('Soll das n\u00E4chste Kommando erst nach Abschluss des Renderings - also nachdem das hier angezeigte Element wieder ausgeblendet wurde - ausgef\u00FChrt werden? Default: true');
                items.push(renderTextWAITCompletion);

                const renderTextCLEARCompletion = new vscode.CompletionItem('CLEAR');
                renderTextCLEARCompletion.kind = vscode.CompletionItemKind.Field;
                renderTextCLEARCompletion.insertText = new vscode.SnippetString("CLEAR = \"${1}\"");
                renderTextCLEARCompletion.documentation = new vscode.MarkdownString('Soll der Renderer nach dem Rendering geleert werden? Default: true');
                items.push(renderTextCLEARCompletion);
            }

            if (/.*\s*replaceInText\s*\(.*/.test(linePrefix)) {

                const replaceInTextTEXT_OR_FILECompletion = new vscode.CompletionItem('TEXT_OR_FILE');
                replaceInTextTEXT_OR_FILECompletion.kind = vscode.CompletionItemKind.Field;
                replaceInTextTEXT_OR_FILECompletion.insertText = new vscode.SnippetString("TEXT_OR_FILE = \"${1}\"");
                replaceInTextTEXT_OR_FILECompletion.documentation = new vscode.MarkdownString('Vollst\u00E4ndiger Text oder Dateipfad');
                items.push(replaceInTextTEXT_OR_FILECompletion);

                const replaceInTextWORD_TO_REPLACECompletion = new vscode.CompletionItem('WORD_TO_REPLACE');
                replaceInTextWORD_TO_REPLACECompletion.kind = vscode.CompletionItemKind.Field;
                replaceInTextWORD_TO_REPLACECompletion.insertText = new vscode.SnippetString("WORD_TO_REPLACE = \"${1}\"");
                replaceInTextWORD_TO_REPLACECompletion.documentation = new vscode.MarkdownString('Zu ersetzender Text. Entweder dieser Parameter, oder die beiden POS Werte m\u00FCssen gesetzt sein.');
                items.push(replaceInTextWORD_TO_REPLACECompletion);

                const replaceInTextSUBSTITUTECompletion = new vscode.CompletionItem('SUBSTITUTE');
                replaceInTextSUBSTITUTECompletion.kind = vscode.CompletionItemKind.Field;
                replaceInTextSUBSTITUTECompletion.insertText = new vscode.SnippetString("SUBSTITUTE = \"${1}\"");
                replaceInTextSUBSTITUTECompletion.documentation = new vscode.MarkdownString('Wort, durch das ersetzt werden soll. Falls leer, wird der gefundene Text gel\u00F6scht.');
                items.push(replaceInTextSUBSTITUTECompletion);

                const replaceInTextIS_FILECompletion = new vscode.CompletionItem('IS_FILE');
                replaceInTextIS_FILECompletion.kind = vscode.CompletionItemKind.Field;
                replaceInTextIS_FILECompletion.insertText = new vscode.SnippetString("IS_FILE = \"${1}\"");
                replaceInTextIS_FILECompletion.documentation = new vscode.MarkdownString('Boolean, ob es sich bei TEXT_OR_FILE um eine Datei handelt');
                items.push(replaceInTextIS_FILECompletion);

                const replaceInTextPOS_FROMCompletion = new vscode.CompletionItem('POS_FROM');
                replaceInTextPOS_FROMCompletion.kind = vscode.CompletionItemKind.Field;
                replaceInTextPOS_FROMCompletion.insertText = new vscode.SnippetString("POS_FROM = \"${1}\"");
                replaceInTextPOS_FROMCompletion.documentation = new vscode.MarkdownString('Positionsweises Ersetzen: ab dieser Position im Text wird durch das SUBSTITUE ersetzt. Wenn gesetzt, muss POS_TO auch gesetzt sein.');
                items.push(replaceInTextPOS_FROMCompletion);

                const replaceInTextPOS_TOCompletion = new vscode.CompletionItem('POS_TO');
                replaceInTextPOS_TOCompletion.kind = vscode.CompletionItemKind.Field;
                replaceInTextPOS_TOCompletion.insertText = new vscode.SnippetString("POS_TO = \"${1}\"");
                replaceInTextPOS_TOCompletion.documentation = new vscode.MarkdownString('Positionsweises Ersetzen, bis zu dieser Position im Text wird durch das SUBSTITUE ersetzt. Wenn gesetzt, muss POS_FROM auch gesetzt sein.');
                items.push(replaceInTextPOS_TOCompletion);

                const replaceInTextTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                replaceInTextTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                replaceInTextTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                replaceInTextTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Variable, in die der resultierende Text geschrieben wird.');
                items.push(replaceInTextTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*replaceStringInStorageValue\s*\(.*/.test(linePrefix)) {

                const replaceStringInStorageValueSOURCE_KEYCompletion = new vscode.CompletionItem('SOURCE_KEY');
                replaceStringInStorageValueSOURCE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                replaceStringInStorageValueSOURCE_KEYCompletion.insertText = new vscode.SnippetString("SOURCE_KEY = \"${1}\"");
                replaceStringInStorageValueSOURCE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel des urspr\u00FCnglichen Wertes. Hier wird gespeichert wenn kein TARGET_STORAGE_KEY angegeben ist.');
                items.push(replaceStringInStorageValueSOURCE_KEYCompletion);

                const replaceStringInStorageValueREGEX_TO_FINDCompletion = new vscode.CompletionItem('REGEX_TO_FIND');
                replaceStringInStorageValueREGEX_TO_FINDCompletion.kind = vscode.CompletionItemKind.Field;
                replaceStringInStorageValueREGEX_TO_FINDCompletion.insertText = new vscode.SnippetString("REGEX_TO_FIND = \"${1}\"");
                replaceStringInStorageValueREGEX_TO_FINDCompletion.documentation = new vscode.MarkdownString('Zu findender regul\u00E4rer Ausdruck.');
                items.push(replaceStringInStorageValueREGEX_TO_FINDCompletion);

                const replaceStringInStorageValueREPLACEMENTCompletion = new vscode.CompletionItem('REPLACEMENT');
                replaceStringInStorageValueREPLACEMENTCompletion.kind = vscode.CompletionItemKind.Field;
                replaceStringInStorageValueREPLACEMENTCompletion.insertText = new vscode.SnippetString("REPLACEMENT = \"${1}\"");
                replaceStringInStorageValueREPLACEMENTCompletion.documentation = new vscode.MarkdownString('Wert, mit dem Ersetzt werden soll.');
                items.push(replaceStringInStorageValueREPLACEMENTCompletion);

                const replaceStringInStorageValueTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                replaceStringInStorageValueTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                replaceStringInStorageValueTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                replaceStringInStorageValueTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann ein neuer Schl\u00FCssel gesetzt werden, unter dem das Ergebnis dieser Operation gespeichert wird.');
                items.push(replaceStringInStorageValueTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*resetContext\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*rotateMobile\s*\(.*/.test(linePrefix)) {

                const rotateMobileORIENTATIONCompletion = new vscode.CompletionItem('ORIENTATION');
                rotateMobileORIENTATIONCompletion.kind = vscode.CompletionItemKind.Field;
                rotateMobileORIENTATIONCompletion.insertText = new vscode.SnippetString("ORIENTATION = \"${1}\"");
                rotateMobileORIENTATIONCompletion.documentation = new vscode.MarkdownString('Wird der Parameter mit \'LANDSCAPE\' belegt, wird das Display im Querformat angezeigt, wird der Parameter mit \'PORTRAIT\' belegt, wird das Display im \'Hochformat\' angezeigt.');
                items.push(rotateMobileORIENTATIONCompletion);
            }

            if (/.*\s*runAppInBackgroundMobile\s*\(.*/.test(linePrefix)) {

                const runAppInBackgroundMobileWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                runAppInBackgroundMobileWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                runAppInBackgroundMobileWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                runAppInBackgroundMobileWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Der Parameter gibt an, wie viele Millisekunden die App im Hintergrund gehalten werden soll.');
                items.push(runAppInBackgroundMobileWAIT_SECONDSCompletion);
            }

            if (/.*\s*runJavascriptAndroid\s*\(.*/.test(linePrefix)) {

                const runJavascriptAndroidJAVASCRIPT_TO_RUNCompletion = new vscode.CompletionItem('JAVASCRIPT_TO_RUN');
                runJavascriptAndroidJAVASCRIPT_TO_RUNCompletion.kind = vscode.CompletionItemKind.Field;
                runJavascriptAndroidJAVASCRIPT_TO_RUNCompletion.insertText = new vscode.SnippetString("JAVASCRIPT_TO_RUN = \"${1}\"");
                runJavascriptAndroidJAVASCRIPT_TO_RUNCompletion.documentation = new vscode.MarkdownString('Der Parameter muss mit dem Java-Code des Skripts belegt werden, das ausgef\u00FChrt werden soll.');
                items.push(runJavascriptAndroidJAVASCRIPT_TO_RUNCompletion);
            }

            if (/.*\s*runJavascriptWeb\s*\(.*/.test(linePrefix)) {

                const runJavascriptWebJS_SCRIPT_OR_FILECompletion = new vscode.CompletionItem('JS_SCRIPT_OR_FILE');
                runJavascriptWebJS_SCRIPT_OR_FILECompletion.kind = vscode.CompletionItemKind.Field;
                runJavascriptWebJS_SCRIPT_OR_FILECompletion.insertText = new vscode.SnippetString("JS_SCRIPT_OR_FILE = \"${1}\"");
                runJavascriptWebJS_SCRIPT_OR_FILECompletion.documentation = new vscode.MarkdownString('Javascript, das ausgef\u00FChrt werden soll oder Pfad zu einer .js-Datei, die dieses Javascript enth\u00E4lt.      Bei einem Dateipfad muss der Parameterwert mit \'.js\' enden. Der Pfad kann absolut oder auch relativ zum Verzeichnis angegeben werden, das das Testset enth\u00E4lt.       Verzeichnisnamen in absoluten Pfade d\u00FCrfen unter Unix\/Linux\/MacOS nur durch \'\/\' getrennt werden, nicht durch \'\'.        ');
                items.push(runJavascriptWebJS_SCRIPT_OR_FILECompletion);

                const runJavascriptWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                runJavascriptWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                runJavascriptWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                runJavascriptWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Falls das Javascript sich auf ein Element beziehen soll (in JS referenzierbar mit arguments[0]): Kriterium, um das Element zu finden (css, js, xpath, linktext, partiallinktext, tagname, id, name, firstLinkName, class).');
                items.push(runJavascriptWebBY_CRITERIACompletion);

                const runJavascriptWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                runJavascriptWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                runJavascriptWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                runJavascriptWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Falls das Javascript sich auf ein Element beziehen soll (in JS referenzierbar mit arguments[0]): Name des Elements, abh\u00E4ngig von BY_CRITERIA.');
                items.push(runJavascriptWebELEMENT_NAMECompletion);

                const runJavascriptWebRESOLVE_SCRIPTCompletion = new vscode.CompletionItem('RESOLVE_SCRIPT');
                runJavascriptWebRESOLVE_SCRIPTCompletion.kind = vscode.CompletionItemKind.Field;
                runJavascriptWebRESOLVE_SCRIPTCompletion.insertText = new vscode.SnippetString("RESOLVE_SCRIPT = \"${1}\"");
                runJavascriptWebRESOLVE_SCRIPTCompletion.documentation = new vscode.MarkdownString('Hier kann optional die Ersetzungen des Storage Resolver abgeschaltet werden, damit der Code exakt wie aus der Datei verwendet wird. Default ist: true (Resolution active)');
                items.push(runJavascriptWebRESOLVE_SCRIPTCompletion);

                const runJavascriptWebENCODING_TEXTCompletion = new vscode.CompletionItem('ENCODING_TEXT');
                runJavascriptWebENCODING_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                runJavascriptWebENCODING_TEXTCompletion.insertText = new vscode.SnippetString("ENCODING_TEXT = \"${1}\"");
                runJavascriptWebENCODING_TEXTCompletion.documentation = new vscode.MarkdownString('Hier kann optional angegeben werden, welche encoding unterst\u00FCtzt werden soll');
                items.push(runJavascriptWebENCODING_TEXTCompletion);

                const runJavascriptWebTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                runJavascriptWebTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                runJavascriptWebTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                runJavascriptWebTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Falls das Skript einen R\u00FCckgabewert hat (also mit einem Return-Statement abschlie\u00DFt),      kann dieser Wert unter dem hier angegebenen Schl\u00FCssel in der Storage-Datei abgelegt werden.');
                items.push(runJavascriptWebTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*sapConnectionNumberClear\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*sapConnectionNumberSet\s*\(.*/.test(linePrefix)) {

                const sapConnectionNumberSetCONNECTION_NRCompletion = new vscode.CompletionItem('CONNECTION_NR');
                sapConnectionNumberSetCONNECTION_NRCompletion.kind = vscode.CompletionItemKind.Field;
                sapConnectionNumberSetCONNECTION_NRCompletion.insertText = new vscode.SnippetString("CONNECTION_NR = \"${1}\"");
                sapConnectionNumberSetCONNECTION_NRCompletion.documentation = new vscode.MarkdownString('Nummer der Connection.');
                items.push(sapConnectionNumberSetCONNECTION_NRCompletion);
            }

            if (/.*\s*sapContextMenu\s*\(.*/.test(linePrefix)) {

                const sapContextMenuOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapContextMenuOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapContextMenuOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapContextMenuOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapContextMenuOBJECT_IDCompletion);
            }

            if (/.*\s*sapDoubleClick\s*\(.*/.test(linePrefix)) {

                const sapDoubleClickOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapDoubleClickOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapDoubleClickOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapDoubleClickOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapDoubleClickOBJECT_IDCompletion);
            }

            if (/.*\s*sapFindStringInTreeAndDoubleClick\s*\(.*/.test(linePrefix)) {

                const sapFindStringInTreeAndDoubleClickOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapFindStringInTreeAndDoubleClickOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapFindStringInTreeAndDoubleClickOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapFindStringInTreeAndDoubleClickOBJECT_IDCompletion.documentation = new vscode.MarkdownString('SAP Objekt-Container innerhalb dessen gesucht werden soll (z.B. shell).');
                items.push(sapFindStringInTreeAndDoubleClickOBJECT_IDCompletion);

                const sapFindStringInTreeAndDoubleClickSUBSTRINGCompletion = new vscode.CompletionItem('SUBSTRING');
                sapFindStringInTreeAndDoubleClickSUBSTRINGCompletion.kind = vscode.CompletionItemKind.Field;
                sapFindStringInTreeAndDoubleClickSUBSTRINGCompletion.insertText = new vscode.SnippetString("SUBSTRING = \"${1}\"");
                sapFindStringInTreeAndDoubleClickSUBSTRINGCompletion.documentation = new vscode.MarkdownString('Der Ausdruck nach dem gesucht werden soll.');
                items.push(sapFindStringInTreeAndDoubleClickSUBSTRINGCompletion);
            }

            if (/.*\s*sapFindStringInTreeAndSelect\s*\(.*/.test(linePrefix)) {

                const sapFindStringInTreeAndSelectOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapFindStringInTreeAndSelectOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapFindStringInTreeAndSelectOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapFindStringInTreeAndSelectOBJECT_IDCompletion.documentation = new vscode.MarkdownString('SAP Objekt-Container innerhalb dessen gesucht werden soll (z.B. shell).');
                items.push(sapFindStringInTreeAndSelectOBJECT_IDCompletion);

                const sapFindStringInTreeAndSelectSUBSTRINGCompletion = new vscode.CompletionItem('SUBSTRING');
                sapFindStringInTreeAndSelectSUBSTRINGCompletion.kind = vscode.CompletionItemKind.Field;
                sapFindStringInTreeAndSelectSUBSTRINGCompletion.insertText = new vscode.SnippetString("SUBSTRING = \"${1}\"");
                sapFindStringInTreeAndSelectSUBSTRINGCompletion.documentation = new vscode.MarkdownString('Der Ausdruck nach dem gesucht werden soll.');
                items.push(sapFindStringInTreeAndSelectSUBSTRINGCompletion);
            }

            if (/.*\s*sapFindStringInTreeByRegexAndDoubleClick\s*\(.*/.test(linePrefix)) {

                const sapFindStringInTreeByRegexAndDoubleClickOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapFindStringInTreeByRegexAndDoubleClickOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapFindStringInTreeByRegexAndDoubleClickOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapFindStringInTreeByRegexAndDoubleClickOBJECT_IDCompletion.documentation = new vscode.MarkdownString('SAP Objekt-Container innerhalb dessen gesucht werden soll (z.B. shell).');
                items.push(sapFindStringInTreeByRegexAndDoubleClickOBJECT_IDCompletion);

                const sapFindStringInTreeByRegexAndDoubleClickSUBSTRINGCompletion = new vscode.CompletionItem('SUBSTRING');
                sapFindStringInTreeByRegexAndDoubleClickSUBSTRINGCompletion.kind = vscode.CompletionItemKind.Field;
                sapFindStringInTreeByRegexAndDoubleClickSUBSTRINGCompletion.insertText = new vscode.SnippetString("SUBSTRING = \"${1}\"");
                sapFindStringInTreeByRegexAndDoubleClickSUBSTRINGCompletion.documentation = new vscode.MarkdownString('Der regul\u00E4re Ausdruck nach dem gesucht werden soll.');
                items.push(sapFindStringInTreeByRegexAndDoubleClickSUBSTRINGCompletion);
            }

            if (/.*\s*sapFindStringInTreeByRegexAndSelect\s*\(.*/.test(linePrefix)) {

                const sapFindStringInTreeByRegexAndSelectOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapFindStringInTreeByRegexAndSelectOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapFindStringInTreeByRegexAndSelectOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapFindStringInTreeByRegexAndSelectOBJECT_IDCompletion.documentation = new vscode.MarkdownString('SAP Objekt-Container innerhalb dessen gesucht werden soll (z.B. shell).');
                items.push(sapFindStringInTreeByRegexAndSelectOBJECT_IDCompletion);

                const sapFindStringInTreeByRegexAndSelectSUBSTRINGCompletion = new vscode.CompletionItem('SUBSTRING');
                sapFindStringInTreeByRegexAndSelectSUBSTRINGCompletion.kind = vscode.CompletionItemKind.Field;
                sapFindStringInTreeByRegexAndSelectSUBSTRINGCompletion.insertText = new vscode.SnippetString("SUBSTRING = \"${1}\"");
                sapFindStringInTreeByRegexAndSelectSUBSTRINGCompletion.documentation = new vscode.MarkdownString('Der regul\u00E4re Ausdruck nach dem gesucht werden soll.');
                items.push(sapFindStringInTreeByRegexAndSelectSUBSTRINGCompletion);
            }

            if (/.*\s*sapFindStringInTreeUseFunction\s*\(.*/.test(linePrefix)) {

                const sapFindStringInTreeUseFunctionOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapFindStringInTreeUseFunctionOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapFindStringInTreeUseFunctionOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapFindStringInTreeUseFunctionOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapFindStringInTreeUseFunctionOBJECT_IDCompletion);

                const sapFindStringInTreeUseFunctionSUBSTRINGCompletion = new vscode.CompletionItem('SUBSTRING');
                sapFindStringInTreeUseFunctionSUBSTRINGCompletion.kind = vscode.CompletionItemKind.Field;
                sapFindStringInTreeUseFunctionSUBSTRINGCompletion.insertText = new vscode.SnippetString("SUBSTRING = \"${1}\"");
                sapFindStringInTreeUseFunctionSUBSTRINGCompletion.documentation = new vscode.MarkdownString('Zu suchender Substring');
                items.push(sapFindStringInTreeUseFunctionSUBSTRINGCompletion);

                const sapFindStringInTreeUseFunctionFUNCTIONCompletion = new vscode.CompletionItem('FUNCTION');
                sapFindStringInTreeUseFunctionFUNCTIONCompletion.kind = vscode.CompletionItemKind.Field;
                sapFindStringInTreeUseFunctionFUNCTIONCompletion.insertText = new vscode.SnippetString("FUNCTION = \"${1}\"");
                sapFindStringInTreeUseFunctionFUNCTIONCompletion.documentation = new vscode.MarkdownString('Aufzurufende Funktion des Kontextmen\u00FCs');
                items.push(sapFindStringInTreeUseFunctionFUNCTIONCompletion);
            }

            if (/.*\s*sapGetCellValue\s*\(.*/.test(linePrefix)) {

                const sapGetCellValueOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapGetCellValueOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapGetCellValueOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapGetCellValueOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des SAP-Objekt-Containers');
                items.push(sapGetCellValueOBJECT_IDCompletion);

                const sapGetCellValueROW_NUMBERCompletion = new vscode.CompletionItem('ROW_NUMBER');
                sapGetCellValueROW_NUMBERCompletion.kind = vscode.CompletionItemKind.Field;
                sapGetCellValueROW_NUMBERCompletion.insertText = new vscode.SnippetString("ROW_NUMBER = \"${1}\"");
                sapGetCellValueROW_NUMBERCompletion.documentation = new vscode.MarkdownString('Nummer der Zeile');
                items.push(sapGetCellValueROW_NUMBERCompletion);

                const sapGetCellValueCOLUMN_NAMECompletion = new vscode.CompletionItem('COLUMN_NAME');
                sapGetCellValueCOLUMN_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sapGetCellValueCOLUMN_NAMECompletion.insertText = new vscode.SnippetString("COLUMN_NAME = \"${1}\"");
                sapGetCellValueCOLUMN_NAMECompletion.documentation = new vscode.MarkdownString('SAP Bezeichnung der Spalte');
                items.push(sapGetCellValueCOLUMN_NAMECompletion);

                const sapGetCellValueTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                sapGetCellValueTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                sapGetCellValueTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                sapGetCellValueTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann ein Schl\u00FCssel gesetzt werden, unter dem das Ergebnis dieser Operation gespeichert wird.');
                items.push(sapGetCellValueTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*sapGetRowNrWithRegex\s*\(.*/.test(linePrefix)) {

                const sapGetRowNrWithRegexOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapGetRowNrWithRegexOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapGetRowNrWithRegexOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapGetRowNrWithRegexOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapGetRowNrWithRegexOBJECT_IDCompletion);

                const sapGetRowNrWithRegexCOLUMN_NAMECompletion = new vscode.CompletionItem('COLUMN_NAME');
                sapGetRowNrWithRegexCOLUMN_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sapGetRowNrWithRegexCOLUMN_NAMECompletion.insertText = new vscode.SnippetString("COLUMN_NAME = \"${1}\"");
                sapGetRowNrWithRegexCOLUMN_NAMECompletion.documentation = new vscode.MarkdownString('Name der Spalte in der gesucht werden soll');
                items.push(sapGetRowNrWithRegexCOLUMN_NAMECompletion);

                const sapGetRowNrWithRegexREGEXCompletion = new vscode.CompletionItem('REGEX');
                sapGetRowNrWithRegexREGEXCompletion.kind = vscode.CompletionItemKind.Field;
                sapGetRowNrWithRegexREGEXCompletion.insertText = new vscode.SnippetString("REGEX = \"${1}\"");
                sapGetRowNrWithRegexREGEXCompletion.documentation = new vscode.MarkdownString('Regul\u00E4rer Ausdruck nach dem gesucht werden soll');
                items.push(sapGetRowNrWithRegexREGEXCompletion);

                const sapGetRowNrWithRegexTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                sapGetRowNrWithRegexTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                sapGetRowNrWithRegexTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                sapGetRowNrWithRegexTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den die Zeilennummer geschrieben wird.');
                items.push(sapGetRowNrWithRegexTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*sapGetValueOfRowWithRegex\s*\(.*/.test(linePrefix)) {

                const sapGetValueOfRowWithRegexOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapGetValueOfRowWithRegexOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapGetValueOfRowWithRegexOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapGetValueOfRowWithRegexOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapGetValueOfRowWithRegexOBJECT_IDCompletion);

                const sapGetValueOfRowWithRegexCOLUMN_NAMECompletion = new vscode.CompletionItem('COLUMN_NAME');
                sapGetValueOfRowWithRegexCOLUMN_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sapGetValueOfRowWithRegexCOLUMN_NAMECompletion.insertText = new vscode.SnippetString("COLUMN_NAME = \"${1}\"");
                sapGetValueOfRowWithRegexCOLUMN_NAMECompletion.documentation = new vscode.MarkdownString('Name der Spalte in der gesucht werden soll');
                items.push(sapGetValueOfRowWithRegexCOLUMN_NAMECompletion);

                const sapGetValueOfRowWithRegexREGEXCompletion = new vscode.CompletionItem('REGEX');
                sapGetValueOfRowWithRegexREGEXCompletion.kind = vscode.CompletionItemKind.Field;
                sapGetValueOfRowWithRegexREGEXCompletion.insertText = new vscode.SnippetString("REGEX = \"${1}\"");
                sapGetValueOfRowWithRegexREGEXCompletion.documentation = new vscode.MarkdownString('Regul\u00E4rer Ausdruck nach dem gesucht werden soll');
                items.push(sapGetValueOfRowWithRegexREGEXCompletion);

                const sapGetValueOfRowWithRegexOFFSETCompletion = new vscode.CompletionItem('OFFSET');
                sapGetValueOfRowWithRegexOFFSETCompletion.kind = vscode.CompletionItemKind.Field;
                sapGetValueOfRowWithRegexOFFSETCompletion.insertText = new vscode.SnippetString("OFFSET = \"${1}\"");
                sapGetValueOfRowWithRegexOFFSETCompletion.documentation = new vscode.MarkdownString('Position ab der im String gesucht werden soll');
                items.push(sapGetValueOfRowWithRegexOFFSETCompletion);

                const sapGetValueOfRowWithRegexTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                sapGetValueOfRowWithRegexTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                sapGetValueOfRowWithRegexTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                sapGetValueOfRowWithRegexTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den das Ergebnis geschrieben werden soll.');
                items.push(sapGetValueOfRowWithRegexTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*sapNodeCollapseByKey\s*\(.*/.test(linePrefix)) {

                const sapNodeCollapseByKeyOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapNodeCollapseByKeyOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapNodeCollapseByKeyOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapNodeCollapseByKeyOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapNodeCollapseByKeyOBJECT_IDCompletion);

                const sapNodeCollapseByKeyNODECompletion = new vscode.CompletionItem('NODE');
                sapNodeCollapseByKeyNODECompletion.kind = vscode.CompletionItemKind.Field;
                sapNodeCollapseByKeyNODECompletion.insertText = new vscode.SnippetString("NODE = \"${1}\"");
                sapNodeCollapseByKeyNODECompletion.documentation = new vscode.MarkdownString('Name der auszuw\u00E4hlenden Node');
                items.push(sapNodeCollapseByKeyNODECompletion);
            }

            if (/.*\s*sapNodeContextMenu\s*\(.*/.test(linePrefix)) {

                const sapNodeContextMenuOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapNodeContextMenuOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapNodeContextMenuOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapNodeContextMenuOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapNodeContextMenuOBJECT_IDCompletion);

                const sapNodeContextMenuNODECompletion = new vscode.CompletionItem('NODE');
                sapNodeContextMenuNODECompletion.kind = vscode.CompletionItemKind.Field;
                sapNodeContextMenuNODECompletion.insertText = new vscode.SnippetString("NODE = \"${1}\"");
                sapNodeContextMenuNODECompletion.documentation = new vscode.MarkdownString('Name der auszuw\u00E4hlenden Node');
                items.push(sapNodeContextMenuNODECompletion);
            }

            if (/.*\s*sapNodeDoubleClick\s*\(.*/.test(linePrefix)) {

                const sapNodeDoubleClickOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapNodeDoubleClickOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapNodeDoubleClickOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapNodeDoubleClickOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapNodeDoubleClickOBJECT_IDCompletion);

                const sapNodeDoubleClickNODECompletion = new vscode.CompletionItem('NODE');
                sapNodeDoubleClickNODECompletion.kind = vscode.CompletionItemKind.Field;
                sapNodeDoubleClickNODECompletion.insertText = new vscode.SnippetString("NODE = \"${1}\"");
                sapNodeDoubleClickNODECompletion.documentation = new vscode.MarkdownString('Name der auszuw\u00E4hlenden Node');
                items.push(sapNodeDoubleClickNODECompletion);
            }

            if (/.*\s*sapNodeExpandByKey\s*\(.*/.test(linePrefix)) {

                const sapNodeExpandByKeyOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapNodeExpandByKeyOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapNodeExpandByKeyOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapNodeExpandByKeyOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapNodeExpandByKeyOBJECT_IDCompletion);

                const sapNodeExpandByKeyNODECompletion = new vscode.CompletionItem('NODE');
                sapNodeExpandByKeyNODECompletion.kind = vscode.CompletionItemKind.Field;
                sapNodeExpandByKeyNODECompletion.insertText = new vscode.SnippetString("NODE = \"${1}\"");
                sapNodeExpandByKeyNODECompletion.documentation = new vscode.MarkdownString('Name der auszuw\u00E4hlenden Node');
                items.push(sapNodeExpandByKeyNODECompletion);
            }

            if (/.*\s*sapObjDeselect\s*\(.*/.test(linePrefix)) {

                const sapObjDeselectOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapObjDeselectOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjDeselectOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapObjDeselectOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapObjDeselectOBJECT_IDCompletion);
            }

            if (/.*\s*sapObjFindByRegex\s*\(.*/.test(linePrefix)) {

                const sapObjFindByRegexOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapObjFindByRegexOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjFindByRegexOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapObjFindByRegexOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Elements unterhalb dessen gesucht werden soll (Falls nicht angegeben wird => \/usr verwendet)');
                items.push(sapObjFindByRegexOBJECT_IDCompletion);

                const sapObjFindByRegexREGEXCompletion = new vscode.CompletionItem('REGEX');
                sapObjFindByRegexREGEXCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjFindByRegexREGEXCompletion.insertText = new vscode.SnippetString("REGEX = \"${1}\"");
                sapObjFindByRegexREGEXCompletion.documentation = new vscode.MarkdownString('Regul\u00E4rer Ausdruck nach dem gesucht wird');
                items.push(sapObjFindByRegexREGEXCompletion);

                const sapObjFindByRegexINSTANCECompletion = new vscode.CompletionItem('INSTANCE');
                sapObjFindByRegexINSTANCECompletion.kind = vscode.CompletionItemKind.Field;
                sapObjFindByRegexINSTANCECompletion.insertText = new vscode.SnippetString("INSTANCE = \"${1}\"");
                sapObjFindByRegexINSTANCECompletion.documentation = new vscode.MarkdownString('Instanz des zu suchenden Werts. Bei INSTANCE = 3 wird erst das dritte Element mit dem passenden regul\u00E4ren Ausdruck zur\u00FCckgegeben.');
                items.push(sapObjFindByRegexINSTANCECompletion);

                const sapObjFindByRegexOBJECT_OFFSETCompletion = new vscode.CompletionItem('OBJECT_OFFSET');
                sapObjFindByRegexOBJECT_OFFSETCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjFindByRegexOBJECT_OFFSETCompletion.insertText = new vscode.SnippetString("OBJECT_OFFSET = \"${1}\"");
                sapObjFindByRegexOBJECT_OFFSETCompletion.documentation = new vscode.MarkdownString('Offset vom gesuchten Objekt. Bei OBJECT_OFFSET = 3 wird das dritte Element hinter dem Gesuchten im Objektbaum zur\u00FCckgegeben.');
                items.push(sapObjFindByRegexOBJECT_OFFSETCompletion);

                const sapObjFindByRegexTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                sapObjFindByRegexTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjFindByRegexTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                sapObjFindByRegexTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den das Ergebnis geschrieben werden soll.');
                items.push(sapObjFindByRegexTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*sapObjFindByValue\s*\(.*/.test(linePrefix)) {

                const sapObjFindByValueOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapObjFindByValueOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjFindByValueOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapObjFindByValueOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Elements unterhalb dessen gesucht werden soll (Falls nicht angegeben wird => \/usr verwendet)');
                items.push(sapObjFindByValueOBJECT_IDCompletion);

                const sapObjFindByValueOBJECT_VALUECompletion = new vscode.CompletionItem('OBJECT_VALUE');
                sapObjFindByValueOBJECT_VALUECompletion.kind = vscode.CompletionItemKind.Field;
                sapObjFindByValueOBJECT_VALUECompletion.insertText = new vscode.SnippetString("OBJECT_VALUE = \"${1}\"");
                sapObjFindByValueOBJECT_VALUECompletion.documentation = new vscode.MarkdownString('Wert des zu suchenden Elements');
                items.push(sapObjFindByValueOBJECT_VALUECompletion);

                const sapObjFindByValueMATCH_TYPECompletion = new vscode.CompletionItem('MATCH_TYPE');
                sapObjFindByValueMATCH_TYPECompletion.kind = vscode.CompletionItemKind.Field;
                sapObjFindByValueMATCH_TYPECompletion.insertText = new vscode.SnippetString("MATCH_TYPE = \"${1}\"");
                sapObjFindByValueMATCH_TYPECompletion.documentation = new vscode.MarkdownString('Typ der Suche (0 => Wert gleich OBJECT_VALUE, 1 => Wert beinhaltet OBJECT_VALUE)');
                items.push(sapObjFindByValueMATCH_TYPECompletion);

                const sapObjFindByValueINSTANCECompletion = new vscode.CompletionItem('INSTANCE');
                sapObjFindByValueINSTANCECompletion.kind = vscode.CompletionItemKind.Field;
                sapObjFindByValueINSTANCECompletion.insertText = new vscode.SnippetString("INSTANCE = \"${1}\"");
                sapObjFindByValueINSTANCECompletion.documentation = new vscode.MarkdownString('Instanz des zu suchenden Werts. Bei INSTANCE = 3 wird erst das Dritte Element mit dem gew\u00FCnschten OBJECT_VALUE zur\u00FCckgegeben.');
                items.push(sapObjFindByValueINSTANCECompletion);

                const sapObjFindByValueOBJECT_OFFSETCompletion = new vscode.CompletionItem('OBJECT_OFFSET');
                sapObjFindByValueOBJECT_OFFSETCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjFindByValueOBJECT_OFFSETCompletion.insertText = new vscode.SnippetString("OBJECT_OFFSET = \"${1}\"");
                sapObjFindByValueOBJECT_OFFSETCompletion.documentation = new vscode.MarkdownString('Offset vom gesuchten Objekt. Bei OBJECT_OFFSET = 3 wird das dritte Element hinter dem Gesuchten im Objektbaum zur\u00FCckgegeben.');
                items.push(sapObjFindByValueOBJECT_OFFSETCompletion);

                const sapObjFindByValueTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                sapObjFindByValueTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjFindByValueTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                sapObjFindByValueTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den das Ergebnis geschrieben werden soll.');
                items.push(sapObjFindByValueTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*sapObjPress\s*\(.*/.test(linePrefix)) {

                const sapObjPressOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapObjPressOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjPressOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapObjPressOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapObjPressOBJECT_IDCompletion);
            }

            if (/.*\s*sapObjPropertyGet\s*\(.*/.test(linePrefix)) {

                const sapObjPropertyGetOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapObjPropertyGetOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjPropertyGetOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapObjPropertyGetOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapObjPropertyGetOBJECT_IDCompletion);

                const sapObjPropertyGetOBJECT_PROPERTYCompletion = new vscode.CompletionItem('OBJECT_PROPERTY');
                sapObjPropertyGetOBJECT_PROPERTYCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjPropertyGetOBJECT_PROPERTYCompletion.insertText = new vscode.SnippetString("OBJECT_PROPERTY = \"${1}\"");
                sapObjPropertyGetOBJECT_PROPERTYCompletion.documentation = new vscode.MarkdownString('Name des Attributs');
                items.push(sapObjPropertyGetOBJECT_PROPERTYCompletion);

                const sapObjPropertyGetTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                sapObjPropertyGetTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjPropertyGetTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                sapObjPropertyGetTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den das Ergebnis geschrieben werden soll.');
                items.push(sapObjPropertyGetTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*sapObjPropertySet\s*\(.*/.test(linePrefix)) {

                const sapObjPropertySetOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapObjPropertySetOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjPropertySetOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapObjPropertySetOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapObjPropertySetOBJECT_IDCompletion);

                const sapObjPropertySetOBJECT_PROPERTYCompletion = new vscode.CompletionItem('OBJECT_PROPERTY');
                sapObjPropertySetOBJECT_PROPERTYCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjPropertySetOBJECT_PROPERTYCompletion.insertText = new vscode.SnippetString("OBJECT_PROPERTY = \"${1}\"");
                sapObjPropertySetOBJECT_PROPERTYCompletion.documentation = new vscode.MarkdownString('Name des Attributs');
                items.push(sapObjPropertySetOBJECT_PROPERTYCompletion);

                const sapObjPropertySetOBJECT_VALUECompletion = new vscode.CompletionItem('OBJECT_VALUE');
                sapObjPropertySetOBJECT_VALUECompletion.kind = vscode.CompletionItemKind.Field;
                sapObjPropertySetOBJECT_VALUECompletion.insertText = new vscode.SnippetString("OBJECT_VALUE = \"${1}\"");
                sapObjPropertySetOBJECT_VALUECompletion.documentation = new vscode.MarkdownString('Wert des Attributs');
                items.push(sapObjPropertySetOBJECT_VALUECompletion);
            }

            if (/.*\s*sapObjSelect\s*\(.*/.test(linePrefix)) {

                const sapObjSelectOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapObjSelectOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjSelectOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapObjSelectOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapObjSelectOBJECT_IDCompletion);
            }

            if (/.*\s*sapObjSelectColumn\s*\(.*/.test(linePrefix)) {

                const sapObjSelectColumnOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapObjSelectColumnOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjSelectColumnOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapObjSelectColumnOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapObjSelectColumnOBJECT_IDCompletion);

                const sapObjSelectColumnCOLUMN_IDCompletion = new vscode.CompletionItem('COLUMN_ID');
                sapObjSelectColumnCOLUMN_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjSelectColumnCOLUMN_IDCompletion.insertText = new vscode.SnippetString("COLUMN_ID = \"${1}\"");
                sapObjSelectColumnCOLUMN_IDCompletion.documentation = new vscode.MarkdownString('Name der auszuw\u00E4hlenden Spalte');
                items.push(sapObjSelectColumnCOLUMN_IDCompletion);
            }

            if (/.*\s*sapObjSelectKey\s*\(.*/.test(linePrefix)) {

                const sapObjSelectKeyOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapObjSelectKeyOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjSelectKeyOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapObjSelectKeyOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapObjSelectKeyOBJECT_IDCompletion);

                const sapObjSelectKeyKEY_VALUECompletion = new vscode.CompletionItem('KEY_VALUE');
                sapObjSelectKeyKEY_VALUECompletion.kind = vscode.CompletionItemKind.Field;
                sapObjSelectKeyKEY_VALUECompletion.insertText = new vscode.SnippetString("KEY_VALUE = \"${1}\"");
                sapObjSelectKeyKEY_VALUECompletion.documentation = new vscode.MarkdownString('Objekt-Schl\u00FCssel');
                items.push(sapObjSelectKeyKEY_VALUECompletion);
            }

            if (/.*\s*sapObjSetFocus\s*\(.*/.test(linePrefix)) {

                const sapObjSetFocusOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapObjSetFocusOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjSetFocusOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapObjSetFocusOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapObjSetFocusOBJECT_IDCompletion);
            }

            if (/.*\s*sapObjValueGet\s*\(.*/.test(linePrefix)) {

                const sapObjValueGetOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapObjValueGetOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjValueGetOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapObjValueGetOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapObjValueGetOBJECT_IDCompletion);

                const sapObjValueGetTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                sapObjValueGetTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjValueGetTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                sapObjValueGetTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den das Ergebnis geschrieben werden soll.');
                items.push(sapObjValueGetTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*sapObjValueSet\s*\(.*/.test(linePrefix)) {

                const sapObjValueSetOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapObjValueSetOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapObjValueSetOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapObjValueSetOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapObjValueSetOBJECT_IDCompletion);

                const sapObjValueSetOBJECT_VALUECompletion = new vscode.CompletionItem('OBJECT_VALUE');
                sapObjValueSetOBJECT_VALUECompletion.kind = vscode.CompletionItemKind.Field;
                sapObjValueSetOBJECT_VALUECompletion.insertText = new vscode.SnippetString("OBJECT_VALUE = \"${1}\"");
                sapObjValueSetOBJECT_VALUECompletion.documentation = new vscode.MarkdownString('Wert des Objekts');
                items.push(sapObjValueSetOBJECT_VALUECompletion);
            }

            if (/.*\s*sapPressContextButton\s*\(.*/.test(linePrefix)) {

                const sapPressContextButtonOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapPressContextButtonOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapPressContextButtonOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapPressContextButtonOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapPressContextButtonOBJECT_IDCompletion);

                const sapPressContextButtonBUTTONCompletion = new vscode.CompletionItem('BUTTON');
                sapPressContextButtonBUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                sapPressContextButtonBUTTONCompletion.insertText = new vscode.SnippetString("BUTTON = \"${1}\"");
                sapPressContextButtonBUTTONCompletion.documentation = new vscode.MarkdownString('Zu dr\u00FCckender Button');
                items.push(sapPressContextButtonBUTTONCompletion);
            }

            if (/.*\s*sapSelectComboBoxEntryByValue\s*\(.*/.test(linePrefix)) {

                const sapSelectComboBoxEntryByValueOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapSelectComboBoxEntryByValueOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapSelectComboBoxEntryByValueOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapSelectComboBoxEntryByValueOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapSelectComboBoxEntryByValueOBJECT_IDCompletion);

                const sapSelectComboBoxEntryByValueSEARCHSTRINGCompletion = new vscode.CompletionItem('SEARCHSTRING');
                sapSelectComboBoxEntryByValueSEARCHSTRINGCompletion.kind = vscode.CompletionItemKind.Field;
                sapSelectComboBoxEntryByValueSEARCHSTRINGCompletion.insertText = new vscode.SnippetString("SEARCHSTRING = \"${1}\"");
                sapSelectComboBoxEntryByValueSEARCHSTRINGCompletion.documentation = new vscode.MarkdownString('Zu w\u00E4hlender String');
                items.push(sapSelectComboBoxEntryByValueSEARCHSTRINGCompletion);
            }

            if (/.*\s*sapSelectContextMenuItem\s*\(.*/.test(linePrefix)) {

                const sapSelectContextMenuItemOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapSelectContextMenuItemOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapSelectContextMenuItemOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapSelectContextMenuItemOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapSelectContextMenuItemOBJECT_IDCompletion);

                const sapSelectContextMenuItemITEMCompletion = new vscode.CompletionItem('ITEM');
                sapSelectContextMenuItemITEMCompletion.kind = vscode.CompletionItemKind.Field;
                sapSelectContextMenuItemITEMCompletion.insertText = new vscode.SnippetString("ITEM = \"${1}\"");
                sapSelectContextMenuItemITEMCompletion.documentation = new vscode.MarkdownString('Name des Eintrags');
                items.push(sapSelectContextMenuItemITEMCompletion);
            }

            if (/.*\s*sapSelectContextMenuItemByPosition\s*\(.*/.test(linePrefix)) {

                const sapSelectContextMenuItemByPositionOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapSelectContextMenuItemByPositionOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapSelectContextMenuItemByPositionOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapSelectContextMenuItemByPositionOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapSelectContextMenuItemByPositionOBJECT_IDCompletion);

                const sapSelectContextMenuItemByPositionPOSITIONCompletion = new vscode.CompletionItem('POSITION');
                sapSelectContextMenuItemByPositionPOSITIONCompletion.kind = vscode.CompletionItemKind.Field;
                sapSelectContextMenuItemByPositionPOSITIONCompletion.insertText = new vscode.SnippetString("POSITION = \"${1}\"");
                sapSelectContextMenuItemByPositionPOSITIONCompletion.documentation = new vscode.MarkdownString('Position des Eintrags');
                items.push(sapSelectContextMenuItemByPositionPOSITIONCompletion);
            }

            if (/.*\s*sapSessAttach\s*\(.*/.test(linePrefix)) {

                const sapSessAttachWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                sapSessAttachWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sapSessAttachWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                sapSessAttachWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des SAP Fensters (meist aktueller Titel)');
                items.push(sapSessAttachWINDOW_NAMECompletion);
            }

            if (/.*\s*sapSessCreate\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*sapSetCurrentCellFocus\s*\(.*/.test(linePrefix)) {

                const sapSetCurrentCellFocusOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapSetCurrentCellFocusOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapSetCurrentCellFocusOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapSetCurrentCellFocusOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des SAP-Objekt-Containers');
                items.push(sapSetCurrentCellFocusOBJECT_IDCompletion);

                const sapSetCurrentCellFocusCOLUMN_NAMECompletion = new vscode.CompletionItem('COLUMN_NAME');
                sapSetCurrentCellFocusCOLUMN_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sapSetCurrentCellFocusCOLUMN_NAMECompletion.insertText = new vscode.SnippetString("COLUMN_NAME = \"${1}\"");
                sapSetCurrentCellFocusCOLUMN_NAMECompletion.documentation = new vscode.MarkdownString('SAP Bezeichnung der Spalte');
                items.push(sapSetCurrentCellFocusCOLUMN_NAMECompletion);

                const sapSetCurrentCellFocusROW_NUMBERCompletion = new vscode.CompletionItem('ROW_NUMBER');
                sapSetCurrentCellFocusROW_NUMBERCompletion.kind = vscode.CompletionItemKind.Field;
                sapSetCurrentCellFocusROW_NUMBERCompletion.insertText = new vscode.SnippetString("ROW_NUMBER = \"${1}\"");
                sapSetCurrentCellFocusROW_NUMBERCompletion.documentation = new vscode.MarkdownString('Nummer der Zeile');
                items.push(sapSetCurrentCellFocusROW_NUMBERCompletion);
            }

            if (/.*\s*sapShowContextMenu\s*\(.*/.test(linePrefix)) {

                const sapShowContextMenuOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapShowContextMenuOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapShowContextMenuOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapShowContextMenuOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapShowContextMenuOBJECT_IDCompletion);
            }

            if (/.*\s*sapVKeysSend\s*\(.*/.test(linePrefix)) {

                const sapVKeysSendVKEYS_TO_SENDCompletion = new vscode.CompletionItem('VKEYS_TO_SEND');
                sapVKeysSendVKEYS_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sapVKeysSendVKEYS_TO_SENDCompletion.insertText = new vscode.SnippetString("VKEYS_TO_SEND = \"${1}\"");
                sapVKeysSendVKEYS_TO_SENDCompletion.documentation = new vscode.MarkdownString('Komma separierte Liste der zu sendenden VKeys (z.B.: Enter,Shift+F1,Ctrl+N)');
                items.push(sapVKeysSendVKEYS_TO_SENDCompletion);
            }

            if (/.*\s*sapVKeysSendUntilWinExists\s*\(.*/.test(linePrefix)) {

                const sapVKeysSendUntilWinExistsVKEYS_TO_SENDCompletion = new vscode.CompletionItem('VKEYS_TO_SEND');
                sapVKeysSendUntilWinExistsVKEYS_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sapVKeysSendUntilWinExistsVKEYS_TO_SENDCompletion.insertText = new vscode.SnippetString("VKEYS_TO_SEND = \"${1}\"");
                sapVKeysSendUntilWinExistsVKEYS_TO_SENDCompletion.documentation = new vscode.MarkdownString('Komma separierte Liste der zu sendenden VKeys (z.B.: Enter,Shift+F1,Ctrl+N)');
                items.push(sapVKeysSendUntilWinExistsVKEYS_TO_SENDCompletion);

                const sapVKeysSendUntilWinExistsWIN_TITLECompletion = new vscode.CompletionItem('WIN_TITLE');
                sapVKeysSendUntilWinExistsWIN_TITLECompletion.kind = vscode.CompletionItemKind.Field;
                sapVKeysSendUntilWinExistsWIN_TITLECompletion.insertText = new vscode.SnippetString("WIN_TITLE = \"${1}\"");
                sapVKeysSendUntilWinExistsWIN_TITLECompletion.documentation = new vscode.MarkdownString('Fenstername auf den gepr\u00FCft werden soll.');
                items.push(sapVKeysSendUntilWinExistsWIN_TITLECompletion);
            }

            if (/.*\s*sapVerticalScrollbarPosition\s*\(.*/.test(linePrefix)) {

                const sapVerticalScrollbarPositionOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapVerticalScrollbarPositionOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapVerticalScrollbarPositionOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapVerticalScrollbarPositionOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapVerticalScrollbarPositionOBJECT_IDCompletion);

                const sapVerticalScrollbarPositionPOSITIONCompletion = new vscode.CompletionItem('POSITION');
                sapVerticalScrollbarPositionPOSITIONCompletion.kind = vscode.CompletionItemKind.Field;
                sapVerticalScrollbarPositionPOSITIONCompletion.insertText = new vscode.SnippetString("POSITION = \"${1}\"");
                sapVerticalScrollbarPositionPOSITIONCompletion.documentation = new vscode.MarkdownString('Zu setzende Position der Scrollbar');
                items.push(sapVerticalScrollbarPositionPOSITIONCompletion);
            }

            if (/.*\s*sapVerticalScrollbarPositionIncrease\s*\(.*/.test(linePrefix)) {

                const sapVerticalScrollbarPositionIncreaseOBJECT_IDCompletion = new vscode.CompletionItem('OBJECT_ID');
                sapVerticalScrollbarPositionIncreaseOBJECT_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sapVerticalScrollbarPositionIncreaseOBJECT_IDCompletion.insertText = new vscode.SnippetString("OBJECT_ID = \"${1}\"");
                sapVerticalScrollbarPositionIncreaseOBJECT_IDCompletion.documentation = new vscode.MarkdownString('ID des Zielelements');
                items.push(sapVerticalScrollbarPositionIncreaseOBJECT_IDCompletion);

                const sapVerticalScrollbarPositionIncreaseINCREASECompletion = new vscode.CompletionItem('INCREASE');
                sapVerticalScrollbarPositionIncreaseINCREASECompletion.kind = vscode.CompletionItemKind.Field;
                sapVerticalScrollbarPositionIncreaseINCREASECompletion.insertText = new vscode.SnippetString("INCREASE = \"${1}\"");
                sapVerticalScrollbarPositionIncreaseINCREASECompletion.documentation = new vscode.MarkdownString('Ver\u00E4nderung der Position der Scrollbar)');
                items.push(sapVerticalScrollbarPositionIncreaseINCREASECompletion);
            }

            if (/.*\s*sapWinClose\s*\(.*/.test(linePrefix)) {

                const sapWinCloseWIN_TITLECompletion = new vscode.CompletionItem('WIN_TITLE');
                sapWinCloseWIN_TITLECompletion.kind = vscode.CompletionItemKind.Field;
                sapWinCloseWIN_TITLECompletion.insertText = new vscode.SnippetString("WIN_TITLE = \"${1}\"");
                sapWinCloseWIN_TITLECompletion.documentation = new vscode.MarkdownString('Fenstername auf den gepr\u00FCft werden soll.');
                items.push(sapWinCloseWIN_TITLECompletion);
            }

            if (/.*\s*sapWinExists\s*\(.*/.test(linePrefix)) {

                const sapWinExistsWIN_TITLECompletion = new vscode.CompletionItem('WIN_TITLE');
                sapWinExistsWIN_TITLECompletion.kind = vscode.CompletionItemKind.Field;
                sapWinExistsWIN_TITLECompletion.insertText = new vscode.SnippetString("WIN_TITLE = \"${1}\"");
                sapWinExistsWIN_TITLECompletion.documentation = new vscode.MarkdownString('Fenstername auf den gepr\u00FCft werden soll.');
                items.push(sapWinExistsWIN_TITLECompletion);

                const sapWinExistsDO_SWITCH_WINDOWCompletion = new vscode.CompletionItem('DO_SWITCH_WINDOW');
                sapWinExistsDO_SWITCH_WINDOWCompletion.kind = vscode.CompletionItemKind.Field;
                sapWinExistsDO_SWITCH_WINDOWCompletion.insertText = new vscode.SnippetString("DO_SWITCH_WINDOW = \"${1}\"");
                sapWinExistsDO_SWITCH_WINDOWCompletion.documentation = new vscode.MarkdownString('Wechselt in das zu suchende Fenster.');
                items.push(sapWinExistsDO_SWITCH_WINDOWCompletion);
            }

            if (/.*\s*sapWinNumberSet\s*\(.*/.test(linePrefix)) {

                const sapWinNumberSetWINDOW_NRCompletion = new vscode.CompletionItem('WINDOW_NR');
                sapWinNumberSetWINDOW_NRCompletion.kind = vscode.CompletionItemKind.Field;
                sapWinNumberSetWINDOW_NRCompletion.insertText = new vscode.SnippetString("WINDOW_NR = \"${1}\"");
                sapWinNumberSetWINDOW_NRCompletion.documentation = new vscode.MarkdownString('Fensternummer des Zielfensters.');
                items.push(sapWinNumberSetWINDOW_NRCompletion);
            }

            if (/.*\s*savePictureWeb\s*\(.*/.test(linePrefix)) {

                const savePictureWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                savePictureWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                savePictureWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                savePictureWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(savePictureWebBY_CRITERIACompletion);

                const savePictureWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                savePictureWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                savePictureWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                savePictureWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(savePictureWebELEMENT_NAMECompletion);

                const savePictureWebTARGET_PATHCompletion = new vscode.CompletionItem('TARGET_PATH');
                savePictureWebTARGET_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                savePictureWebTARGET_PATHCompletion.insertText = new vscode.SnippetString("TARGET_PATH = \"${1}\"");
                savePictureWebTARGET_PATHCompletion.documentation = new vscode.MarkdownString('Pfad und Name, unter dem das Bild gespceichert werden soll.');
                items.push(savePictureWebTARGET_PATHCompletion);
            }

            if (/.*\s*scrollDownMobile\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*scrollMobile\s*\(.*/.test(linePrefix)) {

                const scrollMobileFROM_XCompletion = new vscode.CompletionItem('FROM_X');
                scrollMobileFROM_XCompletion.kind = vscode.CompletionItemKind.Field;
                scrollMobileFROM_XCompletion.insertText = new vscode.SnippetString("FROM_X = \"${1}\"");
                scrollMobileFROM_XCompletion.documentation = new vscode.MarkdownString('X Koordinate des Startpunkts von dem die Scroll Bewegung ausgeht.');
                items.push(scrollMobileFROM_XCompletion);

                const scrollMobileFROM_YCompletion = new vscode.CompletionItem('FROM_Y');
                scrollMobileFROM_YCompletion.kind = vscode.CompletionItemKind.Field;
                scrollMobileFROM_YCompletion.insertText = new vscode.SnippetString("FROM_Y = \"${1}\"");
                scrollMobileFROM_YCompletion.documentation = new vscode.MarkdownString('Y Koordinate des Startpunkts von dem die Scroll Bewegung ausgeht.');
                items.push(scrollMobileFROM_YCompletion);

                const scrollMobileTO_XCompletion = new vscode.CompletionItem('TO_X');
                scrollMobileTO_XCompletion.kind = vscode.CompletionItemKind.Field;
                scrollMobileTO_XCompletion.insertText = new vscode.SnippetString("TO_X = \"${1}\"");
                scrollMobileTO_XCompletion.documentation = new vscode.MarkdownString('X Koordinate des Endpunkts, bei dem die Scroll Bewegung endet.');
                items.push(scrollMobileTO_XCompletion);

                const scrollMobileTO_YCompletion = new vscode.CompletionItem('TO_Y');
                scrollMobileTO_YCompletion.kind = vscode.CompletionItemKind.Field;
                scrollMobileTO_YCompletion.insertText = new vscode.SnippetString("TO_Y = \"${1}\"");
                scrollMobileTO_YCompletion.documentation = new vscode.MarkdownString('Y Koordinate des Endpunkts, bei dem die Scroll Bewegung endet.');
                items.push(scrollMobileTO_YCompletion);
            }

            if (/.*\s*scrollMouseWheel\s*\(.*/.test(linePrefix)) {

                const scrollMouseWheelWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                scrollMouseWheelWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                scrollMouseWheelWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                scrollMouseWheelWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des aktiven Fensters, in dem gescrollt werden soll.');
                items.push(scrollMouseWheelWINDOW_NAMECompletion);

                const scrollMouseWheelWHEEL_DIRECTIONCompletion = new vscode.CompletionItem('WHEEL_DIRECTION');
                scrollMouseWheelWHEEL_DIRECTIONCompletion.kind = vscode.CompletionItemKind.Field;
                scrollMouseWheelWHEEL_DIRECTIONCompletion.insertText = new vscode.SnippetString("WHEEL_DIRECTION = \"${1}\"");
                scrollMouseWheelWHEEL_DIRECTIONCompletion.documentation = new vscode.MarkdownString('Richtung, in die gescrollt werden soll. Erlaubt sind \'UP\' und \'DOWN\'.');
                items.push(scrollMouseWheelWHEEL_DIRECTIONCompletion);

                const scrollMouseWheelNUMBER_OF_WHEEL_TURNSCompletion = new vscode.CompletionItem('NUMBER_OF_WHEEL_TURNS');
                scrollMouseWheelNUMBER_OF_WHEEL_TURNSCompletion.kind = vscode.CompletionItemKind.Field;
                scrollMouseWheelNUMBER_OF_WHEEL_TURNSCompletion.insertText = new vscode.SnippetString("NUMBER_OF_WHEEL_TURNS = \"${1}\"");
                scrollMouseWheelNUMBER_OF_WHEEL_TURNSCompletion.documentation = new vscode.MarkdownString('Anzahl der Bewegungen des Mausrads in die gew\u00FCnschte Richtung (Ganzzahl)');
                items.push(scrollMouseWheelNUMBER_OF_WHEEL_TURNSCompletion);

                const scrollMouseWheelMATCH_MODECompletion = new vscode.CompletionItem('MATCH_MODE');
                scrollMouseWheelMATCH_MODECompletion.kind = vscode.CompletionItemKind.Field;
                scrollMouseWheelMATCH_MODECompletion.insertText = new vscode.SnippetString("MATCH_MODE = \"${1}\"");
                scrollMouseWheelMATCH_MODECompletion.documentation = new vscode.MarkdownString('M\u00F6gliche Werte sind eine der folgenden Ziffern oder das Wort \'RegEx\':\n       1 = Der Titel eines Fensters muss mit dem angegebenen WINDOW_NAME beginnen, um eine \u00DCbereinstimmung zu erzielen.\n       2 = Der Titel eines Fensters kann WINDOW_NAME an beliebiger Stelle enthalten, um eine \u00DCbereinstimmung zu erzielen.\n       3 = Der Titel eines Fensters muss genau mit WINDOW_NAME \u00FCbereinstimmen, um eine \u00DCbereinstimmung zu erzielen.\n       RegEx = WINDOW_NAME wird als regul\u00E4rer Ausdruck behandelt.');
                items.push(scrollMouseWheelMATCH_MODECompletion);
            }

            if (/.*\s*scrollToElementInGridWeb\s*\(.*/.test(linePrefix)) {

                const scrollToElementInGridWebBY_CRITERIA_GRIDCompletion = new vscode.CompletionItem('BY_CRITERIA_GRID');
                scrollToElementInGridWebBY_CRITERIA_GRIDCompletion.kind = vscode.CompletionItemKind.Field;
                scrollToElementInGridWebBY_CRITERIA_GRIDCompletion.insertText = new vscode.SnippetString("BY_CRITERIA_GRID = \"${1}\"");
                scrollToElementInGridWebBY_CRITERIA_GRIDCompletion.documentation = new vscode.MarkdownString('Kriterium, um das Grid zu finden. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden.');
                items.push(scrollToElementInGridWebBY_CRITERIA_GRIDCompletion);

                const scrollToElementInGridWebELEMENT_NAME_GRIDCompletion = new vscode.CompletionItem('ELEMENT_NAME_GRID');
                scrollToElementInGridWebELEMENT_NAME_GRIDCompletion.kind = vscode.CompletionItemKind.Field;
                scrollToElementInGridWebELEMENT_NAME_GRIDCompletion.insertText = new vscode.SnippetString("ELEMENT_NAME_GRID = \"${1}\"");
                scrollToElementInGridWebELEMENT_NAME_GRIDCompletion.documentation = new vscode.MarkdownString('Inhalt des Kriteriums f\u00FCr das Grid.');
                items.push(scrollToElementInGridWebELEMENT_NAME_GRIDCompletion);

                const scrollToElementInGridWebBY_CRITERIA_ELEMENTCompletion = new vscode.CompletionItem('BY_CRITERIA_ELEMENT');
                scrollToElementInGridWebBY_CRITERIA_ELEMENTCompletion.kind = vscode.CompletionItemKind.Field;
                scrollToElementInGridWebBY_CRITERIA_ELEMENTCompletion.insertText = new vscode.SnippetString("BY_CRITERIA_ELEMENT = \"${1}\"");
                scrollToElementInGridWebBY_CRITERIA_ELEMENTCompletion.documentation = new vscode.MarkdownString('Kriterium, um das Element innerhalb des Grid zu finden.');
                items.push(scrollToElementInGridWebBY_CRITERIA_ELEMENTCompletion);

                const scrollToElementInGridWebELEMENT_NAME_ELEMENTCompletion = new vscode.CompletionItem('ELEMENT_NAME_ELEMENT');
                scrollToElementInGridWebELEMENT_NAME_ELEMENTCompletion.kind = vscode.CompletionItemKind.Field;
                scrollToElementInGridWebELEMENT_NAME_ELEMENTCompletion.insertText = new vscode.SnippetString("ELEMENT_NAME_ELEMENT = \"${1}\"");
                scrollToElementInGridWebELEMENT_NAME_ELEMENTCompletion.documentation = new vscode.MarkdownString('Inhalt des Kriteriums f\u00FCr das Element.');
                items.push(scrollToElementInGridWebELEMENT_NAME_ELEMENTCompletion);
            }

            if (/.*\s*scrollToElementWeb\s*\(.*/.test(linePrefix)) {

                const scrollToElementWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                scrollToElementWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                scrollToElementWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                scrollToElementWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(scrollToElementWebBY_CRITERIACompletion);

                const scrollToElementWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                scrollToElementWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                scrollToElementWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                scrollToElementWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Inhalt des Kriteriums.');
                items.push(scrollToElementWebELEMENT_NAMECompletion);
            }

            if (/.*\s*scrollToWeb\s*\(.*/.test(linePrefix)) {

                const scrollToWebXCompletion = new vscode.CompletionItem('X');
                scrollToWebXCompletion.kind = vscode.CompletionItemKind.Field;
                scrollToWebXCompletion.insertText = new vscode.SnippetString("X = \"${1}\"");
                scrollToWebXCompletion.documentation = new vscode.MarkdownString('Absoluter Pixel-Wert auf horizontaler Achse.');
                items.push(scrollToWebXCompletion);

                const scrollToWebYCompletion = new vscode.CompletionItem('Y');
                scrollToWebYCompletion.kind = vscode.CompletionItemKind.Field;
                scrollToWebYCompletion.insertText = new vscode.SnippetString("Y = \"${1}\"");
                scrollToWebYCompletion.documentation = new vscode.MarkdownString('Absoluter Pixel-Wert auf vertikaler Achse.');
                items.push(scrollToWebYCompletion);
            }

            if (/.*\s*scrollUpMobile\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*scrollWeb\s*\(.*/.test(linePrefix)) {

                const scrollWebSCROLL_AMOUNT_XCompletion = new vscode.CompletionItem('SCROLL_AMOUNT_X');
                scrollWebSCROLL_AMOUNT_XCompletion.kind = vscode.CompletionItemKind.Field;
                scrollWebSCROLL_AMOUNT_XCompletion.insertText = new vscode.SnippetString("SCROLL_AMOUNT_X = \"${1}\"");
                scrollWebSCROLL_AMOUNT_XCompletion.documentation = new vscode.MarkdownString('Positiver Wert: Nach rechts. Negativer Wert: Nach links.');
                items.push(scrollWebSCROLL_AMOUNT_XCompletion);

                const scrollWebSCROLL_AMOUNT_YCompletion = new vscode.CompletionItem('SCROLL_AMOUNT_Y');
                scrollWebSCROLL_AMOUNT_YCompletion.kind = vscode.CompletionItemKind.Field;
                scrollWebSCROLL_AMOUNT_YCompletion.insertText = new vscode.SnippetString("SCROLL_AMOUNT_Y = \"${1}\"");
                scrollWebSCROLL_AMOUNT_YCompletion.documentation = new vscode.MarkdownString('Positiver Wert: Nach unten. Negativer Wert: Nach oben.');
                items.push(scrollWebSCROLL_AMOUNT_YCompletion);
            }

            if (/.*\s*selectElementDropDownWinEle\s*\(.*/.test(linePrefix)) {

                const selectElementDropDownWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                selectElementDropDownWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                selectElementDropDownWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                selectElementDropDownWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(selectElementDropDownWinEleWINDOW_NAMECompletion);

                const selectElementDropDownWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                selectElementDropDownWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                selectElementDropDownWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                selectElementDropDownWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(selectElementDropDownWinElePROCESS_NAMECompletion);

                const selectElementDropDownWinEleDROPDOWN_NAMECompletion = new vscode.CompletionItem('DROPDOWN_NAME');
                selectElementDropDownWinEleDROPDOWN_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                selectElementDropDownWinEleDROPDOWN_NAMECompletion.insertText = new vscode.SnippetString("DROPDOWN_NAME = \"${1}\"");
                selectElementDropDownWinEleDROPDOWN_NAMECompletion.documentation = new vscode.MarkdownString('Name des Dropdown Men\u00FCs, das gesteuert werden soll. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen zu ermitteln.');
                items.push(selectElementDropDownWinEleDROPDOWN_NAMECompletion);

                const selectElementDropDownWinEleELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                selectElementDropDownWinEleELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                selectElementDropDownWinEleELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                selectElementDropDownWinEleELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Name des Elementes aus dem Men\u00FC, das ausgew\u00E4hlt werden soll.');
                items.push(selectElementDropDownWinEleELEMENT_NAMECompletion);

                const selectElementDropDownWinEleDROPDOWN_INDEXCompletion = new vscode.CompletionItem('DROPDOWN_INDEX');
                selectElementDropDownWinEleDROPDOWN_INDEXCompletion.kind = vscode.CompletionItemKind.Field;
                selectElementDropDownWinEleDROPDOWN_INDEXCompletion.insertText = new vscode.SnippetString("DROPDOWN_INDEX = \"${1}\"");
                selectElementDropDownWinEleDROPDOWN_INDEXCompletion.documentation = new vscode.MarkdownString('Alternativ zum Namen kann ein Index angegeben werden, der sich auf alle Dropdown-menues des Fensers bezieht.');
                items.push(selectElementDropDownWinEleDROPDOWN_INDEXCompletion);
            }

            if (/.*\s*selectItemByTextJava\s*\(.*/.test(linePrefix)) {

                const selectItemByTextJavaTARGETCompletion = new vscode.CompletionItem('TARGET');
                selectItemByTextJavaTARGETCompletion.kind = vscode.CompletionItemKind.Field;
                selectItemByTextJavaTARGETCompletion.insertText = new vscode.SnippetString("TARGET = \"${1}\"");
                selectItemByTextJavaTARGETCompletion.documentation = new vscode.MarkdownString('Ziel');
                items.push(selectItemByTextJavaTARGETCompletion);

                const selectItemByTextJavaTEXTCompletion = new vscode.CompletionItem('TEXT');
                selectItemByTextJavaTEXTCompletion.kind = vscode.CompletionItemKind.Field;
                selectItemByTextJavaTEXTCompletion.insertText = new vscode.SnippetString("TEXT = \"${1}\"");
                selectItemByTextJavaTEXTCompletion.documentation = new vscode.MarkdownString('Text, welcher in dem Element geklickt werden soll');
                items.push(selectItemByTextJavaTEXTCompletion);

                const selectItemByTextJavaOFFSETCompletion = new vscode.CompletionItem('OFFSET');
                selectItemByTextJavaOFFSETCompletion.kind = vscode.CompletionItemKind.Field;
                selectItemByTextJavaOFFSETCompletion.insertText = new vscode.SnippetString("OFFSET = \"${1}\"");
                selectItemByTextJavaOFFSETCompletion.documentation = new vscode.MarkdownString('Offset falls mehrere Elemente existieren');
                items.push(selectItemByTextJavaOFFSETCompletion);

                const selectItemByTextJavaWAIT_MILLISCompletion = new vscode.CompletionItem('WAIT_MILLIS');
                selectItemByTextJavaWAIT_MILLISCompletion.kind = vscode.CompletionItemKind.Field;
                selectItemByTextJavaWAIT_MILLISCompletion.insertText = new vscode.SnippetString("WAIT_MILLIS = \"${1}\"");
                selectItemByTextJavaWAIT_MILLISCompletion.documentation = new vscode.MarkdownString('Optionale Anzahl zu wartender Millisekunden bis das Element verf\u00FCgbar ist. Default 10000.');
                items.push(selectItemByTextJavaWAIT_MILLISCompletion);

                const selectItemByTextJavaBY_NAMECompletion = new vscode.CompletionItem('BY_NAME');
                selectItemByTextJavaBY_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                selectItemByTextJavaBY_NAMECompletion.insertText = new vscode.SnippetString("BY_NAME = \"${1}\"");
                selectItemByTextJavaBY_NAMECompletion.documentation = new vscode.MarkdownString('Flag, \u00FCber den gekennzeichnet werden kann, dass das Element \u00FCber den Namen und nicht den Identifier (z.B. JButton1) angesprochen wird.');
                items.push(selectItemByTextJavaBY_NAMECompletion);

                const selectItemByTextJavaCONTAINSCompletion = new vscode.CompletionItem('CONTAINS');
                selectItemByTextJavaCONTAINSCompletion.kind = vscode.CompletionItemKind.Field;
                selectItemByTextJavaCONTAINSCompletion.insertText = new vscode.SnippetString("CONTAINS = \"${1}\"");
                selectItemByTextJavaCONTAINSCompletion.documentation = new vscode.MarkdownString('True, falls eine Zeichenreihenfolge eine Teilzeichenfolge enth\u00E4lt');
                items.push(selectItemByTextJavaCONTAINSCompletion);
            }

            if (/.*\s*selectJava\s*\(.*/.test(linePrefix)) {

                const selectJavaTARGETCompletion = new vscode.CompletionItem('TARGET');
                selectJavaTARGETCompletion.kind = vscode.CompletionItemKind.Field;
                selectJavaTARGETCompletion.insertText = new vscode.SnippetString("TARGET = \"${1}\"");
                selectJavaTARGETCompletion.documentation = new vscode.MarkdownString('Bezeichner oder Name der Component die angesprochen werden soll.');
                items.push(selectJavaTARGETCompletion);

                const selectJavaINDEXCompletion = new vscode.CompletionItem('INDEX');
                selectJavaINDEXCompletion.kind = vscode.CompletionItemKind.Field;
                selectJavaINDEXCompletion.insertText = new vscode.SnippetString("INDEX = \"${1}\"");
                selectJavaINDEXCompletion.documentation = new vscode.MarkdownString('Index des auszuw\u00E4hlenden Tree oder List Eintrages.');
                items.push(selectJavaINDEXCompletion);

                const selectJavaWAIT_MILLISCompletion = new vscode.CompletionItem('WAIT_MILLIS');
                selectJavaWAIT_MILLISCompletion.kind = vscode.CompletionItemKind.Field;
                selectJavaWAIT_MILLISCompletion.insertText = new vscode.SnippetString("WAIT_MILLIS = \"${1}\"");
                selectJavaWAIT_MILLISCompletion.documentation = new vscode.MarkdownString('Wartezeit, bis Component gefunden wurde.');
                items.push(selectJavaWAIT_MILLISCompletion);

                const selectJavaBY_NAMECompletion = new vscode.CompletionItem('BY_NAME');
                selectJavaBY_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                selectJavaBY_NAMECompletion.insertText = new vscode.SnippetString("BY_NAME = \"${1}\"");
                selectJavaBY_NAMECompletion.documentation = new vscode.MarkdownString('Soll auf das Element \u00FCber den Namen zugegriffen werden? Default: Nein.');
                items.push(selectJavaBY_NAMECompletion);
            }

            if (/.*\s*selectMobile\s*\(.*/.test(linePrefix)) {

                const selectMobileBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                selectMobileBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                selectMobileBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                selectMobileBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll (m\u00F6glich sind: id, name, xpath, class_name, tag_name, link_name, partial_link_name, css, accessability_id, ios_automation). Der Default-Wert ist \'name\'.');
                items.push(selectMobileBY_CRITERIACompletion);

                const selectMobileEXPRESSION_TEXTCompletion = new vscode.CompletionItem('EXPRESSION_TEXT');
                selectMobileEXPRESSION_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                selectMobileEXPRESSION_TEXTCompletion.insertText = new vscode.SnippetString("EXPRESSION_TEXT = \"${1}\"");
                selectMobileEXPRESSION_TEXTCompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(selectMobileEXPRESSION_TEXTCompletion);

                const selectMobileSELECT_LABELCompletion = new vscode.CompletionItem('SELECT_LABEL');
                selectMobileSELECT_LABELCompletion.kind = vscode.CompletionItemKind.Field;
                selectMobileSELECT_LABELCompletion.insertText = new vscode.SnippetString("SELECT_LABEL = \"${1}\"");
                selectMobileSELECT_LABELCompletion.documentation = new vscode.MarkdownString('Der Parameter muss mit dem Inhalt des Eintrages in der Liste belegt werden, die sich \u00F6ffnet.');
                items.push(selectMobileSELECT_LABELCompletion);

                const selectMobileWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                selectMobileWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                selectMobileWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                selectMobileWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Der Parameter gibt an, wie lange vor dem Select gewartet werden soll. Der Parameter muss als positive, ganze Zahl angegeben werden. Der Default-Wert ist \'1\'.');
                items.push(selectMobileWAIT_SECONDSCompletion);
            }

            if (/.*\s*selectWeb\s*\(.*/.test(linePrefix)) {

                const selectWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                selectWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                selectWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                selectWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(selectWebBY_CRITERIACompletion);

                const selectWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                selectWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                selectWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                selectWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(selectWebELEMENT_NAMECompletion);

                const selectWebSELECT_LABELCompletion = new vscode.CompletionItem('SELECT_LABEL');
                selectWebSELECT_LABELCompletion.kind = vscode.CompletionItemKind.Field;
                selectWebSELECT_LABELCompletion.insertText = new vscode.SnippetString("SELECT_LABEL = \"${1}\"");
                selectWebSELECT_LABELCompletion.documentation = new vscode.MarkdownString('Der Text der Select-Option, also des auszuw\u00E4hlenden Elements. Kann keine Option mit diesem Text gefunden oder ausgew\u00E4hlt werden, schlie\u00DFt das Kommando mit einem Fehler ab.');
                items.push(selectWebSELECT_LABELCompletion);

                const selectWebMAX_CHECK_ATTEMPTSCompletion = new vscode.CompletionItem('MAX_CHECK_ATTEMPTS');
                selectWebMAX_CHECK_ATTEMPTSCompletion.kind = vscode.CompletionItemKind.Field;
                selectWebMAX_CHECK_ATTEMPTSCompletion.insertText = new vscode.SnippetString("MAX_CHECK_ATTEMPTS = \"${1}\"");
                selectWebMAX_CHECK_ATTEMPTSCompletion.documentation = new vscode.MarkdownString('Kann der ausgew\u00E4hlte Text aufgrund eines Fehlers nicht ausgelesen werden, so wird dies so oft erneut versucht wie hier angegeben. (Default: 3 Versuche)');
                items.push(selectWebMAX_CHECK_ATTEMPTSCompletion);

                const selectWebWAIT_BETWEEN_CHECK_ATTEMPTS_SECONDSCompletion = new vscode.CompletionItem('WAIT_BETWEEN_CHECK_ATTEMPTS_SECONDS');
                selectWebWAIT_BETWEEN_CHECK_ATTEMPTS_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                selectWebWAIT_BETWEEN_CHECK_ATTEMPTS_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_BETWEEN_CHECK_ATTEMPTS_SECONDS = \"${1}\"");
                selectWebWAIT_BETWEEN_CHECK_ATTEMPTS_SECONDSCompletion.documentation = new vscode.MarkdownString('Wartezeit zwischen den in MAX_CHECK_ATTEMPTS spezifizierten Versuchen in Sekunden (Default: 3 Sekunden)');
                items.push(selectWebWAIT_BETWEEN_CHECK_ATTEMPTS_SECONDSCompletion);

                const selectWebNO_CHECKCompletion = new vscode.CompletionItem('NO_CHECK');
                selectWebNO_CHECKCompletion.kind = vscode.CompletionItemKind.Field;
                selectWebNO_CHECKCompletion.insertText = new vscode.SnippetString("NO_CHECK = \"${1}\"");
                selectWebNO_CHECKCompletion.documentation = new vscode.MarkdownString('Wenn true, wird nach der Auswahl nicht gepr\u00FCft, ob die nun bestehende Auswahl tats\u00E4chlich dem erwarteten Wert entspricht (Default: false)');
                items.push(selectWebNO_CHECKCompletion);

                const selectWebSELECT_CRITERIONCompletion = new vscode.CompletionItem('SELECT_CRITERION');
                selectWebSELECT_CRITERIONCompletion.kind = vscode.CompletionItemKind.Field;
                selectWebSELECT_CRITERIONCompletion.insertText = new vscode.SnippetString("SELECT_CRITERION = \"${1}\"");
                selectWebSELECT_CRITERIONCompletion.documentation = new vscode.MarkdownString('Kriterium, nach dem der Text der Select-Option gefunden werden soll. M\u00F6gliche Werte: visibleText, index, value. Default: visibleText');
                items.push(selectWebSELECT_CRITERIONCompletion);
            }

            if (/.*\s*sendKeysEventWeb\s*\(.*/.test(linePrefix)) {

                const sendKeysEventWebKEYS_TO_SENDCompletion = new vscode.CompletionItem('KEYS_TO_SEND');
                sendKeysEventWebKEYS_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendKeysEventWebKEYS_TO_SENDCompletion.insertText = new vscode.SnippetString("KEYS_TO_SEND = \"${1}\"");
                sendKeysEventWebKEYS_TO_SENDCompletion.documentation = new vscode.MarkdownString('Der Wert dieses Parameters sind die Tasten, die an den Browser gesendet werden sollen. Unabh\u00E4ngig davon, ob die Taste runtergedr\u00FCckt oder losgelassen wird, kann hier nur eine Taste (Buchstaben-Taste oder Non-Buchstaben-Taste) mit dem Wert gleichgesetzt werden, d.h. sendKeysWeb(KEYS_TO_SEND=\'abcdef\', KEY_DOWN=\'false\', KEY_UP=\'true\') sendet kein Loslassen der sechs Tasten \'abcdef\' an den Browser. Folgende Werte f\u00FCr KEYS_TO_SEND w\u00E4ren hingegen erlaubt: KEYS_TO_SEND=\'a\'; KEYS_TO_SEND=\'Keys.SHIFT\'. F\u00FCr Non-Buchstaben-Tasten muss auch hier der Pr\u00E4fix \'Keys.\' gesetzt werden und auch die Gro\u00DFschreibung hinter dem Pr\u00E4fix ist wichtig (F\u00FCr eine Liste der verschiedenen Non-Buchstaben-Tasten siehe: https:\/\/github.com\/SeleniumHQ\/selenium\/blob\/selenium-4.2.0\/java\/src\/org\/openqa\/selenium\/Keys.java#L28.).');
                items.push(sendKeysEventWebKEYS_TO_SENDCompletion);

                const sendKeysEventWebKEY_DOWNCompletion = new vscode.CompletionItem('KEY_DOWN');
                sendKeysEventWebKEY_DOWNCompletion.kind = vscode.CompletionItemKind.Field;
                sendKeysEventWebKEY_DOWNCompletion.insertText = new vscode.SnippetString("KEY_DOWN = \"${1}\"");
                sendKeysEventWebKEY_DOWNCompletion.documentation = new vscode.MarkdownString('Wenn KEY_DOWN auf true gesetzt ist, dann wird die Taste des Parameters KEYS_TO_SEND runtergedr\u00FCckt (Default: false).');
                items.push(sendKeysEventWebKEY_DOWNCompletion);

                const sendKeysEventWebKEY_UPCompletion = new vscode.CompletionItem('KEY_UP');
                sendKeysEventWebKEY_UPCompletion.kind = vscode.CompletionItemKind.Field;
                sendKeysEventWebKEY_UPCompletion.insertText = new vscode.SnippetString("KEY_UP = \"${1}\"");
                sendKeysEventWebKEY_UPCompletion.documentation = new vscode.MarkdownString('Wenn KEY_UP auf true gesetzt ist, dann wird die Taste des Parameters KEYS_TO_SEND losgelassen. Falls die jeweilige Taste noch nicht runtergedr\u00FCckt worden ist, passiert nichts (Default: false).');
                items.push(sendKeysEventWebKEY_UPCompletion);
            }

            if (/.*\s*sendKeysWeb\s*\(.*/.test(linePrefix)) {

                const sendKeysWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                sendKeysWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                sendKeysWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                sendKeysWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(sendKeysWebBY_CRITERIACompletion);

                const sendKeysWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                sendKeysWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendKeysWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                sendKeysWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(sendKeysWebELEMENT_NAMECompletion);

                const sendKeysWebKEYS_TO_SENDCompletion = new vscode.CompletionItem('KEYS_TO_SEND');
                sendKeysWebKEYS_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendKeysWebKEYS_TO_SENDCompletion.insertText = new vscode.SnippetString("KEYS_TO_SEND = \"${1}\"");
                sendKeysWebKEYS_TO_SENDCompletion.documentation = new vscode.MarkdownString('Der Wert dieses Parameters sind die Tasten, die an den Browser gesendet werden sollen. Wenn es sich um einen Text handelt, so k\u00F6nnen \u00FCber diesen Parameter alle ben\u00F6tigten Tasten f\u00FCr den Text mitgesendet werden (z.B. KEYS_TO_SEND=\'mateo ist toll!\'). Wenn es sich jedoch um Non-Buchstaben-Tasten handelt, so kann nur eine Taste gesendet werden. Wichtig ist hierbei die Verwendung des Pr\u00E4fix \'Keys.\' (z.B. KEYS_TO_SEND=\'Keys.BACK_SPACE\'). Die gew\u00FCnschte Taste nach dem Pr\u00E4fix muss gro\u00DFgeschrieben sein. F\u00FCr eine Liste der verschiedenen Non-Buchstaben-Tasten siehe: https:\/\/github.com\/SeleniumHQ\/selenium\/blob\/selenium-4.2.0\/java\/src\/org\/openqa\/selenium\/Keys.java#L28. Au\u00DFerdem k\u00F6nnen Buchstaben-Tasten und Non-Buchstaben-Tasten nicht zusammen gesendet werden, d.h. KEYS_TO_SEND=\'Keys.BACK_SPACE abc\' ist nicht m\u00F6glich.');
                items.push(sendKeysWebKEYS_TO_SENDCompletion);
            }

            if (/.*\s*sendMail\s*\(.*/.test(linePrefix)) {

                const sendMailSERVERCompletion = new vscode.CompletionItem('SERVER');
                sendMailSERVERCompletion.kind = vscode.CompletionItemKind.Field;
                sendMailSERVERCompletion.insertText = new vscode.SnippetString("SERVER = \"${1}\"");
                sendMailSERVERCompletion.documentation = new vscode.MarkdownString('Servername des Mailanbieters.');
                items.push(sendMailSERVERCompletion);

                const sendMailUSERCompletion = new vscode.CompletionItem('USER');
                sendMailUSERCompletion.kind = vscode.CompletionItemKind.Field;
                sendMailUSERCompletion.insertText = new vscode.SnippetString("USER = \"${1}\"");
                sendMailUSERCompletion.documentation = new vscode.MarkdownString('Benutzername f\u00FCr das Mailkonto');
                items.push(sendMailUSERCompletion);

                const sendMailPASSWORDCompletion = new vscode.CompletionItem('PASSWORD');
                sendMailPASSWORDCompletion.kind = vscode.CompletionItemKind.Field;
                sendMailPASSWORDCompletion.insertText = new vscode.SnippetString("PASSWORD = \"${1}\"");
                sendMailPASSWORDCompletion.documentation = new vscode.MarkdownString('Passwort f\u00FCr das Mailkonto');
                items.push(sendMailPASSWORDCompletion);

                const sendMailSUBJECTCompletion = new vscode.CompletionItem('SUBJECT');
                sendMailSUBJECTCompletion.kind = vscode.CompletionItemKind.Field;
                sendMailSUBJECTCompletion.insertText = new vscode.SnippetString("SUBJECT = \"${1}\"");
                sendMailSUBJECTCompletion.documentation = new vscode.MarkdownString('Betreff der Mail.');
                items.push(sendMailSUBJECTCompletion);

                const sendMailCONTENTCompletion = new vscode.CompletionItem('CONTENT');
                sendMailCONTENTCompletion.kind = vscode.CompletionItemKind.Field;
                sendMailCONTENTCompletion.insertText = new vscode.SnippetString("CONTENT = \"${1}\"");
                sendMailCONTENTCompletion.documentation = new vscode.MarkdownString('Inhalt der Mail.');
                items.push(sendMailCONTENTCompletion);

                const sendMailSENDERCompletion = new vscode.CompletionItem('SENDER');
                sendMailSENDERCompletion.kind = vscode.CompletionItemKind.Field;
                sendMailSENDERCompletion.insertText = new vscode.SnippetString("SENDER = \"${1}\"");
                sendMailSENDERCompletion.documentation = new vscode.MarkdownString('Mail-Adresse des Sendenden');
                items.push(sendMailSENDERCompletion);

                const sendMailRECEIVERCompletion = new vscode.CompletionItem('RECEIVER');
                sendMailRECEIVERCompletion.kind = vscode.CompletionItemKind.Field;
                sendMailRECEIVERCompletion.insertText = new vscode.SnippetString("RECEIVER = \"${1}\"");
                sendMailRECEIVERCompletion.documentation = new vscode.MarkdownString('Mail-Adresse des Empfangenden. K\u00F6nnen Kommasepariert mehrere sein');
                items.push(sendMailRECEIVERCompletion);

                const sendMailPORTCompletion = new vscode.CompletionItem('PORT');
                sendMailPORTCompletion.kind = vscode.CompletionItemKind.Field;
                sendMailPORTCompletion.insertText = new vscode.SnippetString("PORT = \"${1}\"");
                sendMailPORTCompletion.documentation = new vscode.MarkdownString('Port des Mail-Servers. Wird kein Port gesetzt, der gr\u00F6\u00DFer 0 ist, werden Default-Werte genutzt: 465 wenn USE_SSL=true, sonst 25.');
                items.push(sendMailPORTCompletion);

                const sendMailATTACHMENT_LOCATIONCompletion = new vscode.CompletionItem('ATTACHMENT_LOCATION');
                sendMailATTACHMENT_LOCATIONCompletion.kind = vscode.CompletionItemKind.Field;
                sendMailATTACHMENT_LOCATIONCompletion.insertText = new vscode.SnippetString("ATTACHMENT_LOCATION = \"${1}\"");
                sendMailATTACHMENT_LOCATIONCompletion.documentation = new vscode.MarkdownString('Pfade an denen Dateien liegen, die der E-Mail als Anh\u00E4nge beigef\u00FCgt werden sollen. Diese werden dabei separiert mit Kommata angegeben. Bsp.: \'C:\\Temp\\Datei_1.txt, C:\\Dokumente\\Datei Zwei.csv\'. Entsprechend muss sichergestellt werden, dass Dateipfade und Namen keine weiteren Kommata enthalten, da sonst an diesen Stellen \'geschnitten\' w\u00FCrde.');
                items.push(sendMailATTACHMENT_LOCATIONCompletion);

                const sendMailUSE_SSLCompletion = new vscode.CompletionItem('USE_SSL');
                sendMailUSE_SSLCompletion.kind = vscode.CompletionItemKind.Field;
                sendMailUSE_SSLCompletion.insertText = new vscode.SnippetString("USE_SSL = \"${1}\"");
                sendMailUSE_SSLCompletion.documentation = new vscode.MarkdownString('Nutzung von SSL-Verschl\u00FCsselung zur Versendung der Mail (Default: true).');
                items.push(sendMailUSE_SSLCompletion);
            }

            if (/.*\s*sendTextAutomIdWinEle\s*\(.*/.test(linePrefix)) {

                const sendTextAutomIdWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                sendTextAutomIdWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextAutomIdWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                sendTextAutomIdWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(sendTextAutomIdWinEleWINDOW_NAMECompletion);

                const sendTextAutomIdWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                sendTextAutomIdWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextAutomIdWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                sendTextAutomIdWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(sendTextAutomIdWinElePROCESS_NAMECompletion);

                const sendTextAutomIdWinEleTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                sendTextAutomIdWinEleTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextAutomIdWinEleTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                sendTextAutomIdWinEleTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('Zu sendender Text.');
                items.push(sendTextAutomIdWinEleTEXT_TO_SENDCompletion);

                const sendTextAutomIdWinEleTEXT_BOX_AUTOMATION_IDCompletion = new vscode.CompletionItem('TEXT_BOX_AUTOMATION_ID');
                sendTextAutomIdWinEleTEXT_BOX_AUTOMATION_IDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextAutomIdWinEleTEXT_BOX_AUTOMATION_IDCompletion.insertText = new vscode.SnippetString("TEXT_BOX_AUTOMATION_ID = \"${1}\"");
                sendTextAutomIdWinEleTEXT_BOX_AUTOMATION_IDCompletion.documentation = new vscode.MarkdownString('Automation-ID des Eingabeelements, dem ein Text gesendet werden soll. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diese zu ermitteln.');
                items.push(sendTextAutomIdWinEleTEXT_BOX_AUTOMATION_IDCompletion);
            }

            if (/.*\s*sendTextByPaste\s*\(.*/.test(linePrefix)) {

                const sendTextByPasteWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                sendTextByPasteWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextByPasteWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                sendTextByPasteWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des anzusprechenden Fensters');
                items.push(sendTextByPasteWINDOW_NAMECompletion);

                const sendTextByPasteTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                sendTextByPasteTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextByPasteTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                sendTextByPasteTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('zu sendender (schreibender) Text');
                items.push(sendTextByPasteTEXT_TO_SENDCompletion);

                const sendTextByPasteMATCH_MODECompletion = new vscode.CompletionItem('MATCH_MODE');
                sendTextByPasteMATCH_MODECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextByPasteMATCH_MODECompletion.insertText = new vscode.SnippetString("MATCH_MODE = \"${1}\"");
                sendTextByPasteMATCH_MODECompletion.documentation = new vscode.MarkdownString('M\u00F6gliche Werte sind eine der folgenden Ziffern oder das Wort \'RegEx\':\n       1 = Der Titel eines Fensters muss mit dem angegebenen WINDOW_NAME beginnen, um eine \u00DCbereinstimmung zu erzielen.\n       2 = Der Titel eines Fensters kann WINDOW_NAME an beliebiger Stelle enthalten, um eine \u00DCbereinstimmung zu erzielen.\n       3 = Der Titel eines Fensters muss genau mit WINDOW_NAME \u00FCbereinstimmen, um eine \u00DCbereinstimmung zu erzielen.\n       RegEx = WINDOW_NAME wird als regul\u00E4rer Ausdruck behandelt.');
                items.push(sendTextByPasteMATCH_MODECompletion);
            }

            if (/.*\s*sendTextCP\s*\(.*/.test(linePrefix)) {

                const sendTextCPTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                sendTextCPTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextCPTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                sendTextCPTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('Der zu sendende Text');
                items.push(sendTextCPTEXT_TO_SENDCompletion);
            }

            if (/.*\s*sendTextClassnameWinEle\s*\(.*/.test(linePrefix)) {

                const sendTextClassnameWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                sendTextClassnameWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextClassnameWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                sendTextClassnameWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(sendTextClassnameWinEleWINDOW_NAMECompletion);

                const sendTextClassnameWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                sendTextClassnameWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextClassnameWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                sendTextClassnameWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(sendTextClassnameWinElePROCESS_NAMECompletion);

                const sendTextClassnameWinEleTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                sendTextClassnameWinEleTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextClassnameWinEleTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                sendTextClassnameWinEleTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('Zu sendender Text. Wenn kein Text angegeben, wird das Textfeld fokussiert.');
                items.push(sendTextClassnameWinEleTEXT_TO_SENDCompletion);

                const sendTextClassnameWinEleCLASS_NAMECompletion = new vscode.CompletionItem('CLASS_NAME');
                sendTextClassnameWinEleCLASS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextClassnameWinEleCLASS_NAMECompletion.insertText = new vscode.SnippetString("CLASS_NAME = \"${1}\"");
                sendTextClassnameWinEleCLASS_NAMECompletion.documentation = new vscode.MarkdownString('Klasse des Elements. Der genaue name kann z.B. mit \'UISpy\' ermittelt werden.');
                items.push(sendTextClassnameWinEleCLASS_NAMECompletion);

                const sendTextClassnameWinEleINDEXCompletion = new vscode.CompletionItem('INDEX');
                sendTextClassnameWinEleINDEXCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextClassnameWinEleINDEXCompletion.insertText = new vscode.SnippetString("INDEX = \"${1}\"");
                sendTextClassnameWinEleINDEXCompletion.documentation = new vscode.MarkdownString('Index, wenn mehrere Elemente mit gleicher Kennung existieren.');
                items.push(sendTextClassnameWinEleINDEXCompletion);
            }

            if (/.*\s*sendTextJava\s*\(.*/.test(linePrefix)) {

                const sendTextJavaTARGETCompletion = new vscode.CompletionItem('TARGET');
                sendTextJavaTARGETCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextJavaTARGETCompletion.insertText = new vscode.SnippetString("TARGET = \"${1}\"");
                sendTextJavaTARGETCompletion.documentation = new vscode.MarkdownString('Ziel');
                items.push(sendTextJavaTARGETCompletion);

                const sendTextJavaTEXTCompletion = new vscode.CompletionItem('TEXT');
                sendTextJavaTEXTCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextJavaTEXTCompletion.insertText = new vscode.SnippetString("TEXT = \"${1}\"");
                sendTextJavaTEXTCompletion.documentation = new vscode.MarkdownString('Zu setzender Text');
                items.push(sendTextJavaTEXTCompletion);

                const sendTextJavaWAIT_MILLISCompletion = new vscode.CompletionItem('WAIT_MILLIS');
                sendTextJavaWAIT_MILLISCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextJavaWAIT_MILLISCompletion.insertText = new vscode.SnippetString("WAIT_MILLIS = \"${1}\"");
                sendTextJavaWAIT_MILLISCompletion.documentation = new vscode.MarkdownString('Optionale Anzahl zu wartender Millisekunden bis das Element verf\u00FCgbar ist. Default 10000.');
                items.push(sendTextJavaWAIT_MILLISCompletion);

                const sendTextJavaBY_NAMECompletion = new vscode.CompletionItem('BY_NAME');
                sendTextJavaBY_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextJavaBY_NAMECompletion.insertText = new vscode.SnippetString("BY_NAME = \"${1}\"");
                sendTextJavaBY_NAMECompletion.documentation = new vscode.MarkdownString('Flag, \u00FCber den gekennzeichnet werden kann, dass das Element \u00FCber den Namen und nicht den Identifier (z.B. JButton1) angesprochen wird.');
                items.push(sendTextJavaBY_NAMECompletion);

                const sendTextJavaTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                sendTextJavaTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextJavaTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                sendTextJavaTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Optionaler Key im Storage um den R\u00FCckgabewert zu speichern');
                items.push(sendTextJavaTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*sendTextMobile\s*\(.*/.test(linePrefix)) {

                const sendTextMobileBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                sendTextMobileBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                sendTextMobileBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                sendTextMobileBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll (m\u00F6glich sind: id, name, xpath, class_name, tag_name, link_name, partial_link_name, css, accessability_id, ios_automation). Der Default-Wert ist \'name\'.');
                items.push(sendTextMobileBY_CRITERIACompletion);

                const sendTextMobileEXPRESSION_TEXTCompletion = new vscode.CompletionItem('EXPRESSION_TEXT');
                sendTextMobileEXPRESSION_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextMobileEXPRESSION_TEXTCompletion.insertText = new vscode.SnippetString("EXPRESSION_TEXT = \"${1}\"");
                sendTextMobileEXPRESSION_TEXTCompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(sendTextMobileEXPRESSION_TEXTCompletion);

                const sendTextMobileTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                sendTextMobileTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextMobileTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                sendTextMobileTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('Der Parameter gibt den Text an, der an das Element gesendet werden soll.');
                items.push(sendTextMobileTEXT_TO_SENDCompletion);

                const sendTextMobileWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                sendTextMobileWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextMobileWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                sendTextMobileWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Optionaler Parameter, der angibt, wie lange werden soll bis der Text gesendet wird. Der Parameter muss als positive, ganze Zahl angegeben werden. Der Default-Wert ist \'1\'.');
                items.push(sendTextMobileWAIT_SECONDSCompletion);

                const sendTextMobileCLEAR_BEFORE_SENDCompletion = new vscode.CompletionItem('CLEAR_BEFORE_SEND');
                sendTextMobileCLEAR_BEFORE_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextMobileCLEAR_BEFORE_SENDCompletion.insertText = new vscode.SnippetString("CLEAR_BEFORE_SEND = \"${1}\"");
                sendTextMobileCLEAR_BEFORE_SENDCompletion.documentation = new vscode.MarkdownString('Der Parameter kann mit \'true\' oder \'false\' belegt werden kann und gibt an, ob der alte Text des Elements gel\u00F6scht werden soll.');
                items.push(sendTextMobileCLEAR_BEFORE_SENDCompletion);
            }

            if (/.*\s*sendTextRaw\s*\(.*/.test(linePrefix)) {

                const sendTextRawTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                sendTextRawTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextRawTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                sendTextRawTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('zu sendender (schreibender) Text');
                items.push(sendTextRawTEXT_TO_SENDCompletion);
            }

            if (/.*\s*sendTextWeb\s*\(.*/.test(linePrefix)) {

                const sendTextWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                sendTextWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                sendTextWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(sendTextWebBY_CRITERIACompletion);

                const sendTextWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                sendTextWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                sendTextWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(sendTextWebELEMENT_NAMECompletion);

                const sendTextWebTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                sendTextWebTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                sendTextWebTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('In das Element zu schreibender Text. Wenn der TEXT_TO_SEND den Druck einer bestimmten Taste (anstelle eines ganzen Texts) ausl\u00F6sen soll, muss der Name dieser Taste dem jew. Wert des ENUM org.openqa.selenium.Keys entsprechen und ist in geschweifte Klammern zu setzten.       Um z. B. KEYS.BACK_SPACE auszul\u00F6sen, ist hier {BACK_SPACE} einzugeben. Hinweis, die Taste wird gedr\u00FCckt gehalten, bis {NULL} \u00FCbergeben wird');
                items.push(sendTextWebTEXT_TO_SENDCompletion);

                const sendTextWebDELETE_BEFORE_SENDCompletion = new vscode.CompletionItem('DELETE_BEFORE_SEND');
                sendTextWebDELETE_BEFORE_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebDELETE_BEFORE_SENDCompletion.insertText = new vscode.SnippetString("DELETE_BEFORE_SEND = \"${1}\"");
                sendTextWebDELETE_BEFORE_SENDCompletion.documentation = new vscode.MarkdownString('{true, false} \u00DCber diesen Parameter wird der Inhalt des Elements gel\u00F6scht. Default: false.');
                items.push(sendTextWebDELETE_BEFORE_SENDCompletion);

                const sendTextWebBACKSPACE_COUNTCompletion = new vscode.CompletionItem('BACKSPACE_COUNT');
                sendTextWebBACKSPACE_COUNTCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebBACKSPACE_COUNTCompletion.insertText = new vscode.SnippetString("BACKSPACE_COUNT = \"${1}\"");
                sendTextWebBACKSPACE_COUNTCompletion.documentation = new vscode.MarkdownString('Manche Elemente k\u00F6nnen nicht \u00FCber den Parameter \'DELETE_BEFORE_SEND\' gel\u00F6scht werden. \u00DCber die hiermit \u00FCbergebene Anzahl \'Backspace\' wird der Inhalt \u00FCber Tastendr\u00FCcke gel\u00F6scht.');
                items.push(sendTextWebBACKSPACE_COUNTCompletion);

                const sendTextWebNEXT_ELEMENT_BY_CRITERIACompletion = new vscode.CompletionItem('NEXT_ELEMENT_BY_CRITERIA');
                sendTextWebNEXT_ELEMENT_BY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebNEXT_ELEMENT_BY_CRITERIACompletion.insertText = new vscode.SnippetString("NEXT_ELEMENT_BY_CRITERIA = \"${1}\"");
                sendTextWebNEXT_ELEMENT_BY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriteriium, \u00FCber das das n\u00E4chste Element ermittelt werden soll.');
                items.push(sendTextWebNEXT_ELEMENT_BY_CRITERIACompletion);

                const sendTextWebNEXT_ELEMENT_NAMECompletion = new vscode.CompletionItem('NEXT_ELEMENT_NAME');
                sendTextWebNEXT_ELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebNEXT_ELEMENT_NAMECompletion.insertText = new vscode.SnippetString("NEXT_ELEMENT_NAME = \"${1}\"");
                sendTextWebNEXT_ELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Name des n\u00E4chsten Elements, das nach dem Klicken auf das eigentliche Element verf\u00FCgbar sein soll.');
                items.push(sendTextWebNEXT_ELEMENT_NAMECompletion);

                const sendTextWebWAIT_AFTER_NEXT_ELEMENTCompletion = new vscode.CompletionItem('WAIT_AFTER_NEXT_ELEMENT');
                sendTextWebWAIT_AFTER_NEXT_ELEMENTCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebWAIT_AFTER_NEXT_ELEMENTCompletion.insertText = new vscode.SnippetString("WAIT_AFTER_NEXT_ELEMENT = \"${1}\"");
                sendTextWebWAIT_AFTER_NEXT_ELEMENTCompletion.documentation = new vscode.MarkdownString('Wartet auf ein Element.');
                items.push(sendTextWebWAIT_AFTER_NEXT_ELEMENTCompletion);

                const sendTextWebTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                sendTextWebTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                sendTextWebTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Der Schl\u00FCssel \u00FCber den der zu sendende Text ermittelt wird.');
                items.push(sendTextWebTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*sendTextWebByPaste\s*\(.*/.test(linePrefix)) {

                const sendTextWebByPasteBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                sendTextWebByPasteBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebByPasteBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                sendTextWebByPasteBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(sendTextWebByPasteBY_CRITERIACompletion);

                const sendTextWebByPasteELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                sendTextWebByPasteELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebByPasteELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                sendTextWebByPasteELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(sendTextWebByPasteELEMENT_NAMECompletion);

                const sendTextWebByPasteTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                sendTextWebByPasteTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebByPasteTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                sendTextWebByPasteTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('In das Element zu schreibender Text.');
                items.push(sendTextWebByPasteTEXT_TO_SENDCompletion);

                const sendTextWebByPasteDELETE_BEFORE_SENDCompletion = new vscode.CompletionItem('DELETE_BEFORE_SEND');
                sendTextWebByPasteDELETE_BEFORE_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebByPasteDELETE_BEFORE_SENDCompletion.insertText = new vscode.SnippetString("DELETE_BEFORE_SEND = \"${1}\"");
                sendTextWebByPasteDELETE_BEFORE_SENDCompletion.documentation = new vscode.MarkdownString('{true, false} Wenn true, wird der Inhalt des Web-Elements gel\u00F6scht, bevor der Text an das Element gesendet wird. Default: false.');
                items.push(sendTextWebByPasteDELETE_BEFORE_SENDCompletion);

                const sendTextWebByPasteBACKSPACE_COUNTCompletion = new vscode.CompletionItem('BACKSPACE_COUNT');
                sendTextWebByPasteBACKSPACE_COUNTCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebByPasteBACKSPACE_COUNTCompletion.insertText = new vscode.SnippetString("BACKSPACE_COUNT = \"${1}\"");
                sendTextWebByPasteBACKSPACE_COUNTCompletion.documentation = new vscode.MarkdownString('In manchen F\u00E4llen, k\u00F6nnen Elemente k\u00F6nnen nicht \u00FCber den Parameter \'DELETE_BEFORE_SEND\' geleert werden.       Wird hier eine Zahl \u00FCbergeben, wird die \'Backspace\'-Taste vor dem Senden des Texts entsprechend h\u00E4ufig gedr\u00FCckt.      Somit gibt BACKSPACE_COUNT die Anzahl der zu l\u00F6schenden Zeichen des alten Textes vor Einf\u00FCgen des neuen Textes an.');
                items.push(sendTextWebByPasteBACKSPACE_COUNTCompletion);
            }

            if (/.*\s*sendTextWebFast\s*\(.*/.test(linePrefix)) {

                const sendTextWebFastBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                sendTextWebFastBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebFastBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                sendTextWebFastBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(sendTextWebFastBY_CRITERIACompletion);

                const sendTextWebFastELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                sendTextWebFastELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebFastELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                sendTextWebFastELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(sendTextWebFastELEMENT_NAMECompletion);

                const sendTextWebFastTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                sendTextWebFastTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebFastTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                sendTextWebFastTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('In das Element zu schreibender Text. Wenn der TEXT_TO_SEND den Druck einer bestimmten Taste (anstelle eines ganzen Texts) ausl\u00F6sen soll, muss der Name dieser Taste dem jew. Wert des ENUM org.openqa.selenium.Keys entsprechen und ist in geschweifte Klammern zu setzten.       Um z. B. KEYS.BACK_SPACE auszul\u00F6sen, ist hier {BACK_SPACE} einzugeben. Hinweis, die Taste wird gedr\u00FCckt gehalten, bis {NULL} \u00FCbergeben wird');
                items.push(sendTextWebFastTEXT_TO_SENDCompletion);

                const sendTextWebFastDELETE_BEFORE_SENDCompletion = new vscode.CompletionItem('DELETE_BEFORE_SEND');
                sendTextWebFastDELETE_BEFORE_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebFastDELETE_BEFORE_SENDCompletion.insertText = new vscode.SnippetString("DELETE_BEFORE_SEND = \"${1}\"");
                sendTextWebFastDELETE_BEFORE_SENDCompletion.documentation = new vscode.MarkdownString('{true, false} Wenn true, wird der Inhalt des Web-Elements gel\u00F6scht, bevor der Text an das Element gesendet wird. Default: false.');
                items.push(sendTextWebFastDELETE_BEFORE_SENDCompletion);

                const sendTextWebFastBACKSPACE_COUNTCompletion = new vscode.CompletionItem('BACKSPACE_COUNT');
                sendTextWebFastBACKSPACE_COUNTCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWebFastBACKSPACE_COUNTCompletion.insertText = new vscode.SnippetString("BACKSPACE_COUNT = \"${1}\"");
                sendTextWebFastBACKSPACE_COUNTCompletion.documentation = new vscode.MarkdownString('In manchen F\u00E4llen, k\u00F6nnen Elemente k\u00F6nnen nicht \u00FCber den Parameter \'DELETE_BEFORE_SEND\' geleert werden.       Wird hier eine Zahl \u00FCbergeben, wird die \'Backspace\'-Taste vor dem Senden des Texts entsprechend h\u00E4ufig gedr\u00FCckt.      Somit gibt BACKSPACE_COUNT die Anzahl der zu l\u00F6schenden Zeichen des alten Textes vor Einf\u00FCgen des neuen Textes an.');
                items.push(sendTextWebFastBACKSPACE_COUNTCompletion);
            }

            if (/.*\s*sendTextWin\s*\(.*/.test(linePrefix)) {

                const sendTextWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                sendTextWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                sendTextWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, an das der Text zu senden ist.');
                items.push(sendTextWinWINDOW_NAMECompletion);

                const sendTextWinTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                sendTextWinTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWinTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                sendTextWinTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('Zu sendender Text');
                items.push(sendTextWinTEXT_TO_SENDCompletion);

                const sendTextWinDELAYCompletion = new vscode.CompletionItem('DELAY');
                sendTextWinDELAYCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWinDELAYCompletion.insertText = new vscode.SnippetString("DELAY = \"${1}\"");
                sendTextWinDELAYCompletion.documentation = new vscode.MarkdownString('Verz\u00F6gerung vor dem Senden (in Millisekunden)');
                items.push(sendTextWinDELAYCompletion);

                const sendTextWinMATCH_MODECompletion = new vscode.CompletionItem('MATCH_MODE');
                sendTextWinMATCH_MODECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWinMATCH_MODECompletion.insertText = new vscode.SnippetString("MATCH_MODE = \"${1}\"");
                sendTextWinMATCH_MODECompletion.documentation = new vscode.MarkdownString('M\u00F6gliche Werte sind eine der folgenden Ziffern oder das Wort \'RegEx\':\n       1 = Der Titel eines Fensters muss mit dem angegebenen WINDOW_NAME beginnen, um eine \u00DCbereinstimmung zu erzielen.\n       2 = Der Titel eines Fensters kann WINDOW_NAME an beliebiger Stelle enthalten, um eine \u00DCbereinstimmung zu erzielen.\n       3 = Der Titel eines Fensters muss genau mit WINDOW_NAME \u00FCbereinstimmen, um eine \u00DCbereinstimmung zu erzielen.\n       RegEx = WINDOW_NAME wird als regul\u00E4rer Ausdruck behandelt.');
                items.push(sendTextWinMATCH_MODECompletion);
            }

            if (/.*\s*sendTextWinEle\s*\(.*/.test(linePrefix)) {

                const sendTextWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                sendTextWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                sendTextWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(sendTextWinEleWINDOW_NAMECompletion);

                const sendTextWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                sendTextWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                sendTextWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(sendTextWinElePROCESS_NAMECompletion);

                const sendTextWinEleTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                sendTextWinEleTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWinEleTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                sendTextWinEleTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('Zu sendender Text.');
                items.push(sendTextWinEleTEXT_TO_SENDCompletion);

                const sendTextWinEleTEXT_BOX_NAMECompletion = new vscode.CompletionItem('TEXT_BOX_NAME');
                sendTextWinEleTEXT_BOX_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWinEleTEXT_BOX_NAMECompletion.insertText = new vscode.SnippetString("TEXT_BOX_NAME = \"${1}\"");
                sendTextWinEleTEXT_BOX_NAMECompletion.documentation = new vscode.MarkdownString('Name der Textbox, die gesteuert werden soll. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diesen zu ermitteln.');
                items.push(sendTextWinEleTEXT_BOX_NAMECompletion);
            }

            if (/.*\s*sendTextWindowWin\s*\(.*/.test(linePrefix)) {

                const sendTextWindowWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                sendTextWindowWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWindowWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                sendTextWindowWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(sendTextWindowWinWINDOW_NAMECompletion);

                const sendTextWindowWinTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                sendTextWindowWinTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                sendTextWindowWinTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                sendTextWindowWinTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('Zu sendender (schreibender) Text');
                items.push(sendTextWindowWinTEXT_TO_SENDCompletion);
            }

            if (/.*\s*setActiveWindowJava\s*\(.*/.test(linePrefix)) {

                const setActiveWindowJavaTITLECompletion = new vscode.CompletionItem('TITLE');
                setActiveWindowJavaTITLECompletion.kind = vscode.CompletionItemKind.Field;
                setActiveWindowJavaTITLECompletion.insertText = new vscode.SnippetString("TITLE = \"${1}\"");
                setActiveWindowJavaTITLECompletion.documentation = new vscode.MarkdownString('Titel des Fensters auf das gewechselt werden soll.');
                items.push(setActiveWindowJavaTITLECompletion);

                const setActiveWindowJavaCHECK_TITLE_CONTAINSCompletion = new vscode.CompletionItem('CHECK_TITLE_CONTAINS');
                setActiveWindowJavaCHECK_TITLE_CONTAINSCompletion.kind = vscode.CompletionItemKind.Field;
                setActiveWindowJavaCHECK_TITLE_CONTAINSCompletion.insertText = new vscode.SnippetString("CHECK_TITLE_CONTAINS = \"${1}\"");
                setActiveWindowJavaCHECK_TITLE_CONTAINSCompletion.documentation = new vscode.MarkdownString('Verwendet einen \'contains\' Vergleich bei der \u00DCberpr\u00FCfung des Titels anstatt \'ist gleich\'');
                items.push(setActiveWindowJavaCHECK_TITLE_CONTAINSCompletion);

                const setActiveWindowJavaWAIT_MILLISCompletion = new vscode.CompletionItem('WAIT_MILLIS');
                setActiveWindowJavaWAIT_MILLISCompletion.kind = vscode.CompletionItemKind.Field;
                setActiveWindowJavaWAIT_MILLISCompletion.insertText = new vscode.SnippetString("WAIT_MILLIS = \"${1}\"");
                setActiveWindowJavaWAIT_MILLISCompletion.documentation = new vscode.MarkdownString('Wartezeit, die maximal gewartet werden soll.');
                items.push(setActiveWindowJavaWAIT_MILLISCompletion);
            }

            if (/.*\s*setAllStorageFromInput\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*setClipboardValue\s*\(.*/.test(linePrefix)) {

                const setClipboardValueVALUECompletion = new vscode.CompletionItem('VALUE');
                setClipboardValueVALUECompletion.kind = vscode.CompletionItemKind.Field;
                setClipboardValueVALUECompletion.insertText = new vscode.SnippetString("VALUE = \"${1}\"");
                setClipboardValueVALUECompletion.documentation = new vscode.MarkdownString('Zu setzender Wert');
                items.push(setClipboardValueVALUECompletion);
            }

            if (/.*\s*setCookieWeb\s*\(.*/.test(linePrefix)) {

                const setCookieWebCOOKIE_NAMECompletion = new vscode.CompletionItem('COOKIE_NAME');
                setCookieWebCOOKIE_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                setCookieWebCOOKIE_NAMECompletion.insertText = new vscode.SnippetString("COOKIE_NAME = \"${1}\"");
                setCookieWebCOOKIE_NAMECompletion.documentation = new vscode.MarkdownString('Name des zu setzenden Cookies');
                items.push(setCookieWebCOOKIE_NAMECompletion);

                const setCookieWebCOOKIE_VALUECompletion = new vscode.CompletionItem('COOKIE_VALUE');
                setCookieWebCOOKIE_VALUECompletion.kind = vscode.CompletionItemKind.Field;
                setCookieWebCOOKIE_VALUECompletion.insertText = new vscode.SnippetString("COOKIE_VALUE = \"${1}\"");
                setCookieWebCOOKIE_VALUECompletion.documentation = new vscode.MarkdownString('Wert des zu setzenden Cookies');
                items.push(setCookieWebCOOKIE_VALUECompletion);

                const setCookieWebSAME_SITE_STRICTCompletion = new vscode.CompletionItem('SAME_SITE_STRICT');
                setCookieWebSAME_SITE_STRICTCompletion.kind = vscode.CompletionItemKind.Field;
                setCookieWebSAME_SITE_STRICTCompletion.insertText = new vscode.SnippetString("SAME_SITE_STRICT = \"${1}\"");
                setCookieWebSAME_SITE_STRICTCompletion.documentation = new vscode.MarkdownString('Wenn true, wird das das Same-Site-Attribut auf den Modus \'Strict\' gesetzt. Dies bedeutet, dass das gesetzte Cookies nicht an Third-Party-Sites gesendet wird, sondern nur an die Website, f\u00FCr die das Cookie gesetzt wurde. (Default: false)');
                items.push(setCookieWebSAME_SITE_STRICTCompletion);
            }

            if (/.*\s*setProperty\s*\(.*/.test(linePrefix)) {

                const setPropertyKEYCompletion = new vscode.CompletionItem('KEY');
                setPropertyKEYCompletion.kind = vscode.CompletionItemKind.Field;
                setPropertyKEYCompletion.insertText = new vscode.SnippetString("KEY = \"${1}\"");
                setPropertyKEYCompletion.documentation = new vscode.MarkdownString('Der Schl\u00FCssel der Property');
                items.push(setPropertyKEYCompletion);

                const setPropertyVALUECompletion = new vscode.CompletionItem('VALUE');
                setPropertyVALUECompletion.kind = vscode.CompletionItemKind.Field;
                setPropertyVALUECompletion.insertText = new vscode.SnippetString("VALUE = \"${1}\"");
                setPropertyVALUECompletion.documentation = new vscode.MarkdownString('Der Wert der Property');
                items.push(setPropertyVALUECompletion);
            }

            if (/.*\s*setStorageFromInput\s*\(.*/.test(linePrefix)) {

                const setStorageFromInputKEYCompletion = new vscode.CompletionItem('KEY');
                setStorageFromInputKEYCompletion.kind = vscode.CompletionItemKind.Field;
                setStorageFromInputKEYCompletion.insertText = new vscode.SnippetString("KEY = \"${1}\"");
                setStorageFromInputKEYCompletion.documentation = new vscode.MarkdownString('Key des Input-Wertes, der in den Storage geschrieben werden soll');
                items.push(setStorageFromInputKEYCompletion);

                const setStorageFromInputDEFAULTCompletion = new vscode.CompletionItem('DEFAULT');
                setStorageFromInputDEFAULTCompletion.kind = vscode.CompletionItemKind.Field;
                setStorageFromInputDEFAULTCompletion.insertText = new vscode.SnippetString("DEFAULT = \"${1}\"");
                setStorageFromInputDEFAULTCompletion.documentation = new vscode.MarkdownString('Default Wert, falls der angegebene Key nicht \u00FCbergeben wurde');
                items.push(setStorageFromInputDEFAULTCompletion);

                const setStorageFromInputTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                setStorageFromInputTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                setStorageFromInputTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                setStorageFromInputTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Key gesetzt werden, unter dem der Wert in den Storage geschrieben werden soll, wenn dies nicht der gleiche Schl\u00FCssel sein soll, wie der in KEY angegebene Schl\u00FCssel des Input-Parameters.');
                items.push(setStorageFromInputTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*setStorageValue\s*\(.*/.test(linePrefix)) {

                const setStorageValueVALUECompletion = new vscode.CompletionItem('VALUE');
                setStorageValueVALUECompletion.kind = vscode.CompletionItemKind.Field;
                setStorageValueVALUECompletion.insertText = new vscode.SnippetString("VALUE = \"${1}\"");
                setStorageValueVALUECompletion.documentation = new vscode.MarkdownString('Wert der gesetzt werden soll. Bleibt der Parameter leer, wird ein Leerstring gesetzt.');
                items.push(setStorageValueVALUECompletion);

                const setStorageValueTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                setStorageValueTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                setStorageValueTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                setStorageValueTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier muss ein neuer Schl\u00FCssel gesetzt werden, unter dem das Ergebnis dieser Operation gespeichert wird.');
                items.push(setStorageValueTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*showCommandOverlay\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*soapRequest\s*\(.*/.test(linePrefix)) {

                const soapRequestURLCompletion = new vscode.CompletionItem('URL');
                soapRequestURLCompletion.kind = vscode.CompletionItemKind.Field;
                soapRequestURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                soapRequestURLCompletion.documentation = new vscode.MarkdownString('URL des Webservices');
                items.push(soapRequestURLCompletion);

                const soapRequestUSERNAMECompletion = new vscode.CompletionItem('USERNAME');
                soapRequestUSERNAMECompletion.kind = vscode.CompletionItemKind.Field;
                soapRequestUSERNAMECompletion.insertText = new vscode.SnippetString("USERNAME = \"${1}\"");
                soapRequestUSERNAMECompletion.documentation = new vscode.MarkdownString('Username f\u00FCr Webservice Call (BasicAuth)');
                items.push(soapRequestUSERNAMECompletion);

                const soapRequestPASSWORDCompletion = new vscode.CompletionItem('PASSWORD');
                soapRequestPASSWORDCompletion.kind = vscode.CompletionItemKind.Field;
                soapRequestPASSWORDCompletion.insertText = new vscode.SnippetString("PASSWORD = \"${1}\"");
                soapRequestPASSWORDCompletion.documentation = new vscode.MarkdownString('Passwort f\u00FCr Webservice Call (BasicAuth)');
                items.push(soapRequestPASSWORDCompletion);

                const soapRequestSOAP_ACTIONCompletion = new vscode.CompletionItem('SOAP_ACTION');
                soapRequestSOAP_ACTIONCompletion.kind = vscode.CompletionItemKind.Field;
                soapRequestSOAP_ACTIONCompletion.insertText = new vscode.SnippetString("SOAP_ACTION = \"${1}\"");
                soapRequestSOAP_ACTIONCompletion.documentation = new vscode.MarkdownString('SOAP Action');
                items.push(soapRequestSOAP_ACTIONCompletion);

                const soapRequestSOAP_BODYCompletion = new vscode.CompletionItem('SOAP_BODY');
                soapRequestSOAP_BODYCompletion.kind = vscode.CompletionItemKind.Field;
                soapRequestSOAP_BODYCompletion.insertText = new vscode.SnippetString("SOAP_BODY = \"${1}\"");
                soapRequestSOAP_BODYCompletion.documentation = new vscode.MarkdownString('SOAP Body');
                items.push(soapRequestSOAP_BODYCompletion);

                const soapRequestSHORT_OUTPUTCompletion = new vscode.CompletionItem('SHORT_OUTPUT');
                soapRequestSHORT_OUTPUTCompletion.kind = vscode.CompletionItemKind.Field;
                soapRequestSHORT_OUTPUTCompletion.insertText = new vscode.SnippetString("SHORT_OUTPUT = \"${1}\"");
                soapRequestSHORT_OUTPUTCompletion.documentation = new vscode.MarkdownString('kurze Ausgabe');
                items.push(soapRequestSHORT_OUTPUTCompletion);

                const soapRequestTIMEOUTCompletion = new vscode.CompletionItem('TIMEOUT');
                soapRequestTIMEOUTCompletion.kind = vscode.CompletionItemKind.Field;
                soapRequestTIMEOUTCompletion.insertText = new vscode.SnippetString("TIMEOUT = \"${1}\"");
                soapRequestTIMEOUTCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Timeout gesetzt werden');
                items.push(soapRequestTIMEOUTCompletion);

                const soapRequestTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                soapRequestTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                soapRequestTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                soapRequestTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Schl\u00FCssel gesetzt werden, unter dem das Ergebnis des Aufrufs gespeichert wird.');
                items.push(soapRequestTARGET_STORAGE_KEYCompletion);

                const soapRequestWRITE_TO_FILECompletion = new vscode.CompletionItem('WRITE_TO_FILE');
                soapRequestWRITE_TO_FILECompletion.kind = vscode.CompletionItemKind.Field;
                soapRequestWRITE_TO_FILECompletion.insertText = new vscode.SnippetString("WRITE_TO_FILE = \"${1}\"");
                soapRequestWRITE_TO_FILECompletion.documentation = new vscode.MarkdownString('Ins Verzeichnis schreiben');
                items.push(soapRequestWRITE_TO_FILECompletion);

                const soapRequestHTTPSTATUS_STORAGE_KEYCompletion = new vscode.CompletionItem('HTTPSTATUS_STORAGE_KEY');
                soapRequestHTTPSTATUS_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                soapRequestHTTPSTATUS_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("HTTPSTATUS_STORAGE_KEY = \"${1}\"");
                soapRequestHTTPSTATUS_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann optional ein Schl\u00FCssel gesetzt werden, unter dem der Status des Aufrufsergebnisses gespeichert wird.');
                items.push(soapRequestHTTPSTATUS_STORAGE_KEYCompletion);
            }

            if (/.*\s*startActivityAndroid\s*\(.*/.test(linePrefix)) {

                const startActivityAndroidPACKAGE_CONTAINING_APPCompletion = new vscode.CompletionItem('PACKAGE_CONTAINING_APP');
                startActivityAndroidPACKAGE_CONTAINING_APPCompletion.kind = vscode.CompletionItemKind.Field;
                startActivityAndroidPACKAGE_CONTAINING_APPCompletion.insertText = new vscode.SnippetString("PACKAGE_CONTAINING_APP = \"${1}\"");
                startActivityAndroidPACKAGE_CONTAINING_APPCompletion.documentation = new vscode.MarkdownString('Name der Package Containing App. Klickt man auf den Android-Icon in Appium, \u00F6ffnen sich die Konfigurationseinstellungen und man kann diesen Parameter unter dem Reiter \'Application Path\' nachlesen.');
                items.push(startActivityAndroidPACKAGE_CONTAINING_APPCompletion);

                const startActivityAndroidACTIVITY_TO_STARTCompletion = new vscode.CompletionItem('ACTIVITY_TO_START');
                startActivityAndroidACTIVITY_TO_STARTCompletion.kind = vscode.CompletionItemKind.Field;
                startActivityAndroidACTIVITY_TO_STARTCompletion.insertText = new vscode.SnippetString("ACTIVITY_TO_START = \"${1}\"");
                startActivityAndroidACTIVITY_TO_STARTCompletion.documentation = new vscode.MarkdownString('Der Parameter muss mit dem Namen der Activity, die gestartet werden soll, belegt werden. Klickt man auf den Android-Icon in Appium, \u00F6ffnen sich die Konfigurationseinstellungen und man kann diesen Parameter unter dem Reiter \'Application Path\' nachlesen.');
                items.push(startActivityAndroidACTIVITY_TO_STARTCompletion);

                const startActivityAndroidWAIT_UNTIL_PACKAGE_STARTCompletion = new vscode.CompletionItem('WAIT_UNTIL_PACKAGE_START');
                startActivityAndroidWAIT_UNTIL_PACKAGE_STARTCompletion.kind = vscode.CompletionItemKind.Field;
                startActivityAndroidWAIT_UNTIL_PACKAGE_STARTCompletion.insertText = new vscode.SnippetString("WAIT_UNTIL_PACKAGE_START = \"${1}\"");
                startActivityAndroidWAIT_UNTIL_PACKAGE_STARTCompletion.documentation = new vscode.MarkdownString('Der Parameter kann mit dem Namen des Packages belegt werden. Klickt man auf den Android-Icon in Appium, \u00F6ffnen sich die Konfigurationseinstellungen und man kann diesen Parameter unter dem Reiter \'Application Path\' nachlesen.');
                items.push(startActivityAndroidWAIT_UNTIL_PACKAGE_STARTCompletion);

                const startActivityAndroidWAIT_UNTIL_ACTIVITY_STARTCompletion = new vscode.CompletionItem('WAIT_UNTIL_ACTIVITY_START');
                startActivityAndroidWAIT_UNTIL_ACTIVITY_STARTCompletion.kind = vscode.CompletionItemKind.Field;
                startActivityAndroidWAIT_UNTIL_ACTIVITY_STARTCompletion.insertText = new vscode.SnippetString("WAIT_UNTIL_ACTIVITY_START = \"${1}\"");
                startActivityAndroidWAIT_UNTIL_ACTIVITY_STARTCompletion.documentation = new vscode.MarkdownString('Der Parameter kann mit dem Namen einer Activity belegt werden, auf dessen Start nach dem Start der \'ACTIVITY_TO_START\' gewartet werden soll. Klickt man auf den Android-Icon in Appium, \u00F6ffnen sich die Konfigurationseinstellungen und man kann diesen Parameter unter dem Reiter \'Application Path\' nachlesen.');
                items.push(startActivityAndroidWAIT_UNTIL_ACTIVITY_STARTCompletion);
            }

            if (/.*\s*startAndroid\s*\(.*/.test(linePrefix)) {

                const startAndroidURLCompletion = new vscode.CompletionItem('URL');
                startAndroidURLCompletion.kind = vscode.CompletionItemKind.Field;
                startAndroidURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                startAndroidURLCompletion.documentation = new vscode.MarkdownString('Der Parameter muss mit der URL zum App Binary oder einer HTTP Webadresse belegt werden.');
                items.push(startAndroidURLCompletion);

                const startAndroidCAPABILITIES_FILECompletion = new vscode.CompletionItem('CAPABILITIES_FILE');
                startAndroidCAPABILITIES_FILECompletion.kind = vscode.CompletionItemKind.Field;
                startAndroidCAPABILITIES_FILECompletion.insertText = new vscode.SnippetString("CAPABILITIES_FILE = \"${1}\"");
                startAndroidCAPABILITIES_FILECompletion.documentation = new vscode.MarkdownString('Datei mit den Einstellungen f\u00FCr den Start.');
                items.push(startAndroidCAPABILITIES_FILECompletion);

                const startAndroidDEVICE_UDIDCompletion = new vscode.CompletionItem('DEVICE_UDID');
                startAndroidDEVICE_UDIDCompletion.kind = vscode.CompletionItemKind.Field;
                startAndroidDEVICE_UDIDCompletion.insertText = new vscode.SnippetString("DEVICE_UDID = \"${1}\"");
                startAndroidDEVICE_UDIDCompletion.documentation = new vscode.MarkdownString('ID des Ger\u00E4ts');
                items.push(startAndroidDEVICE_UDIDCompletion);

                const startAndroidAVD_NAMECompletion = new vscode.CompletionItem('AVD_NAME');
                startAndroidAVD_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                startAndroidAVD_NAMECompletion.insertText = new vscode.SnippetString("AVD_NAME = \"${1}\"");
                startAndroidAVD_NAMECompletion.documentation = new vscode.MarkdownString('Name des AVD Managers.');
                items.push(startAndroidAVD_NAMECompletion);

                const startAndroidPLATFORM_VERSIONCompletion = new vscode.CompletionItem('PLATFORM_VERSION');
                startAndroidPLATFORM_VERSIONCompletion.kind = vscode.CompletionItemKind.Field;
                startAndroidPLATFORM_VERSIONCompletion.insertText = new vscode.SnippetString("PLATFORM_VERSION = \"${1}\"");
                startAndroidPLATFORM_VERSIONCompletion.documentation = new vscode.MarkdownString('Version des Andoid.');
                items.push(startAndroidPLATFORM_VERSIONCompletion);

                const startAndroidPACKAGE_CONTAINING_APPCompletion = new vscode.CompletionItem('PACKAGE_CONTAINING_APP');
                startAndroidPACKAGE_CONTAINING_APPCompletion.kind = vscode.CompletionItemKind.Field;
                startAndroidPACKAGE_CONTAINING_APPCompletion.insertText = new vscode.SnippetString("PACKAGE_CONTAINING_APP = \"${1}\"");
                startAndroidPACKAGE_CONTAINING_APPCompletion.documentation = new vscode.MarkdownString('Der Parameter kann mit dem App Identifier des App Package belegt werden.');
                items.push(startAndroidPACKAGE_CONTAINING_APPCompletion);

                const startAndroidWAIT_UNTIL_PACKAGE_STARTCompletion = new vscode.CompletionItem('WAIT_UNTIL_PACKAGE_START');
                startAndroidWAIT_UNTIL_PACKAGE_STARTCompletion.kind = vscode.CompletionItemKind.Field;
                startAndroidWAIT_UNTIL_PACKAGE_STARTCompletion.insertText = new vscode.SnippetString("WAIT_UNTIL_PACKAGE_START = \"${1}\"");
                startAndroidWAIT_UNTIL_PACKAGE_STARTCompletion.documentation = new vscode.MarkdownString('Der Parameter kann mit dem Namen des Package der zu ladenen Activity belegt werden, auf das gewartet werden soll.');
                items.push(startAndroidWAIT_UNTIL_PACKAGE_STARTCompletion);

                const startAndroidWAIT_UNTIL_ACTIVITY_STARTCompletion = new vscode.CompletionItem('WAIT_UNTIL_ACTIVITY_START');
                startAndroidWAIT_UNTIL_ACTIVITY_STARTCompletion.kind = vscode.CompletionItemKind.Field;
                startAndroidWAIT_UNTIL_ACTIVITY_STARTCompletion.insertText = new vscode.SnippetString("WAIT_UNTIL_ACTIVITY_START = \"${1}\"");
                startAndroidWAIT_UNTIL_ACTIVITY_STARTCompletion.documentation = new vscode.MarkdownString('Der Parameter kann mit dem Namen der zu ladenen Activity belegt werden, auf die gewartet werden soll.');
                items.push(startAndroidWAIT_UNTIL_ACTIVITY_STARTCompletion);
            }

            if (/.*\s*startAndroidWeb\s*\(.*/.test(linePrefix)) {

                const startAndroidWebURLCompletion = new vscode.CompletionItem('URL');
                startAndroidWebURLCompletion.kind = vscode.CompletionItemKind.Field;
                startAndroidWebURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                startAndroidWebURLCompletion.documentation = new vscode.MarkdownString('Der Parameter muss mit der URL der Website belegt werden, die aufgerufen werden soll.');
                items.push(startAndroidWebURLCompletion);

                const startAndroidWebCAPABILITIES_FILECompletion = new vscode.CompletionItem('CAPABILITIES_FILE');
                startAndroidWebCAPABILITIES_FILECompletion.kind = vscode.CompletionItemKind.Field;
                startAndroidWebCAPABILITIES_FILECompletion.insertText = new vscode.SnippetString("CAPABILITIES_FILE = \"${1}\"");
                startAndroidWebCAPABILITIES_FILECompletion.documentation = new vscode.MarkdownString('Datei mit den Einstellungen f\u00FCr den Start.');
                items.push(startAndroidWebCAPABILITIES_FILECompletion);

                const startAndroidWebDEVICE_UDIDCompletion = new vscode.CompletionItem('DEVICE_UDID');
                startAndroidWebDEVICE_UDIDCompletion.kind = vscode.CompletionItemKind.Field;
                startAndroidWebDEVICE_UDIDCompletion.insertText = new vscode.SnippetString("DEVICE_UDID = \"${1}\"");
                startAndroidWebDEVICE_UDIDCompletion.documentation = new vscode.MarkdownString('ID des Ger\u00E4ts');
                items.push(startAndroidWebDEVICE_UDIDCompletion);

                const startAndroidWebAVD_NAMECompletion = new vscode.CompletionItem('AVD_NAME');
                startAndroidWebAVD_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                startAndroidWebAVD_NAMECompletion.insertText = new vscode.SnippetString("AVD_NAME = \"${1}\"");
                startAndroidWebAVD_NAMECompletion.documentation = new vscode.MarkdownString('Name des AVD Managers');
                items.push(startAndroidWebAVD_NAMECompletion);

                const startAndroidWebPLATFORM_VERSIONCompletion = new vscode.CompletionItem('PLATFORM_VERSION');
                startAndroidWebPLATFORM_VERSIONCompletion.kind = vscode.CompletionItemKind.Field;
                startAndroidWebPLATFORM_VERSIONCompletion.insertText = new vscode.SnippetString("PLATFORM_VERSION = \"${1}\"");
                startAndroidWebPLATFORM_VERSIONCompletion.documentation = new vscode.MarkdownString('Version des Andoid');
                items.push(startAndroidWebPLATFORM_VERSIONCompletion);

                const startAndroidWebALERT_ASSERT_TEXTCompletion = new vscode.CompletionItem('ALERT_ASSERT_TEXT');
                startAndroidWebALERT_ASSERT_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                startAndroidWebALERT_ASSERT_TEXTCompletion.insertText = new vscode.SnippetString("ALERT_ASSERT_TEXT = \"${1}\"");
                startAndroidWebALERT_ASSERT_TEXTCompletion.documentation = new vscode.MarkdownString('Der Parameter kann mit einem Text z.B. eine Fehlermeldung belegt werden. Nachdem der Browser ge\u00F6ffnet wurde, wird \u00FCberpr\u00FCft, ob der Text in einem Betriebssystemfenster angezeigt wird.');
                items.push(startAndroidWebALERT_ASSERT_TEXTCompletion);
            }

            if (/.*\s*startApplication\s*\(.*/.test(linePrefix)) {

                const startApplicationEXECUTABLECompletion = new vscode.CompletionItem('EXECUTABLE');
                startApplicationEXECUTABLECompletion.kind = vscode.CompletionItemKind.Field;
                startApplicationEXECUTABLECompletion.insertText = new vscode.SnippetString("EXECUTABLE = \"${1}\"");
                startApplicationEXECUTABLECompletion.documentation = new vscode.MarkdownString('Ausf\u00FChrbare Datei');
                items.push(startApplicationEXECUTABLECompletion);

                const startApplicationWAIT_TIME_IN_SECONDSCompletion = new vscode.CompletionItem('WAIT_TIME_IN_SECONDS');
                startApplicationWAIT_TIME_IN_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                startApplicationWAIT_TIME_IN_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_TIME_IN_SECONDS = \"${1}\"");
                startApplicationWAIT_TIME_IN_SECONDSCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(startApplicationWAIT_TIME_IN_SECONDSCompletion);

                const startApplicationWAIT_FOR_CLASSCompletion = new vscode.CompletionItem('WAIT_FOR_CLASS');
                startApplicationWAIT_FOR_CLASSCompletion.kind = vscode.CompletionItemKind.Field;
                startApplicationWAIT_FOR_CLASSCompletion.insertText = new vscode.SnippetString("WAIT_FOR_CLASS = \"${1}\"");
                startApplicationWAIT_FOR_CLASSCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(startApplicationWAIT_FOR_CLASSCompletion);

                const startApplicationFORCE_RESULTCompletion = new vscode.CompletionItem('FORCE_RESULT');
                startApplicationFORCE_RESULTCompletion.kind = vscode.CompletionItemKind.Field;
                startApplicationFORCE_RESULTCompletion.insertText = new vscode.SnippetString("FORCE_RESULT = \"${1}\"");
                startApplicationFORCE_RESULTCompletion.documentation = new vscode.MarkdownString('Versucht die Anwendung unabh\u00E4ngig vom aktuellen Systemzustand zu starten.');
                items.push(startApplicationFORCE_RESULTCompletion);
            }

            if (/.*\s*startApplicationCP\s*\(.*/.test(linePrefix)) {

                const startApplicationCPWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                startApplicationCPWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                startApplicationCPWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                startApplicationCPWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des nach der Ausfuehrung geoeffneten Fensters.');
                items.push(startApplicationCPWINDOW_NAMECompletion);

                const startApplicationCPSHELL_SCRIPT_PATHCompletion = new vscode.CompletionItem('SHELL_SCRIPT_PATH');
                startApplicationCPSHELL_SCRIPT_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                startApplicationCPSHELL_SCRIPT_PATHCompletion.insertText = new vscode.SnippetString("SHELL_SCRIPT_PATH = \"${1}\"");
                startApplicationCPSHELL_SCRIPT_PATHCompletion.documentation = new vscode.MarkdownString('Angabe der ausfuerbaren Datei inclusive des vollstaendigen Pfades.');
                items.push(startApplicationCPSHELL_SCRIPT_PATHCompletion);
            }

            if (/.*\s*startApplicationWin\s*\(.*/.test(linePrefix)) {

                const startApplicationWinEXPECTED_WINDOW_NAMECompletion = new vscode.CompletionItem('EXPECTED_WINDOW_NAME');
                startApplicationWinEXPECTED_WINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                startApplicationWinEXPECTED_WINDOW_NAMECompletion.insertText = new vscode.SnippetString("EXPECTED_WINDOW_NAME = \"${1}\"");
                startApplicationWinEXPECTED_WINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das erwartet wird');
                items.push(startApplicationWinEXPECTED_WINDOW_NAMECompletion);

                const startApplicationWinEXECUTABLE_PATHCompletion = new vscode.CompletionItem('EXECUTABLE_PATH');
                startApplicationWinEXECUTABLE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                startApplicationWinEXECUTABLE_PATHCompletion.insertText = new vscode.SnippetString("EXECUTABLE_PATH = \"${1}\"");
                startApplicationWinEXECUTABLE_PATHCompletion.documentation = new vscode.MarkdownString('Pfad zur ausf\u00FChrbaren Datei zum Start der Applikation');
                items.push(startApplicationWinEXECUTABLE_PATHCompletion);

                const startApplicationWinPATH_IS_RELATIVECompletion = new vscode.CompletionItem('PATH_IS_RELATIVE');
                startApplicationWinPATH_IS_RELATIVECompletion.kind = vscode.CompletionItemKind.Field;
                startApplicationWinPATH_IS_RELATIVECompletion.insertText = new vscode.SnippetString("PATH_IS_RELATIVE = \"${1}\"");
                startApplicationWinPATH_IS_RELATIVECompletion.documentation = new vscode.MarkdownString('Wenn true, muss unter EXECUTABLE_PATH nur der relative Pfad vom die Testset-XLSM beinhaltenden Ordner ausgehend angegeben werden');
                items.push(startApplicationWinPATH_IS_RELATIVECompletion);

                const startApplicationWinWAIT_MILLISECONDSCompletion = new vscode.CompletionItem('WAIT_MILLISECONDS');
                startApplicationWinWAIT_MILLISECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                startApplicationWinWAIT_MILLISECONDSCompletion.insertText = new vscode.SnippetString("WAIT_MILLISECONDS = \"${1}\"");
                startApplicationWinWAIT_MILLISECONDSCompletion.documentation = new vscode.MarkdownString('Zeit (in Millisekunden) die gewartet werden, soll, bis das Fenster offen ist. Falls das Fenster nicht in der Zeit ge\u00C3\u00B6ffnet wird, wird das Kommando einen Fehler melden.');
                items.push(startApplicationWinWAIT_MILLISECONDSCompletion);

                const startApplicationWinMATCH_MODECompletion = new vscode.CompletionItem('MATCH_MODE');
                startApplicationWinMATCH_MODECompletion.kind = vscode.CompletionItemKind.Field;
                startApplicationWinMATCH_MODECompletion.insertText = new vscode.SnippetString("MATCH_MODE = \"${1}\"");
                startApplicationWinMATCH_MODECompletion.documentation = new vscode.MarkdownString('M\u00F6gliche Werte sind eine der folgenden Ziffern oder das Wort \'RegEx\':\n       1 = Der Titel eines Fensters muss mit dem angegebenen WINDOW_NAME beginnen, um eine \u00DCbereinstimmung zu erzielen.\n       2 = Der Titel eines Fensters kann WINDOW_NAME an beliebiger Stelle enthalten, um eine \u00DCbereinstimmung zu erzielen.\n       3 = Der Titel eines Fensters muss genau mit WINDOW_NAME \u00FCbereinstimmen, um eine \u00DCbereinstimmung zu erzielen.\n       RegEx = WINDOW_NAME wird als regul\u00E4rer Ausdruck behandelt.');
                items.push(startApplicationWinMATCH_MODECompletion);
            }

            if (/.*\s*startApplicationWinEle\s*\(.*/.test(linePrefix)) {

                const startApplicationWinEleEXPECTED_WINDOW_NAMECompletion = new vscode.CompletionItem('EXPECTED_WINDOW_NAME');
                startApplicationWinEleEXPECTED_WINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                startApplicationWinEleEXPECTED_WINDOW_NAMECompletion.insertText = new vscode.SnippetString("EXPECTED_WINDOW_NAME = \"${1}\"");
                startApplicationWinEleEXPECTED_WINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Erwarteter Name des durch die Anwendung ge\u00F6ffneten Fensters.');
                items.push(startApplicationWinEleEXPECTED_WINDOW_NAMECompletion);

                const startApplicationWinEleAPPLICATION_PATHCompletion = new vscode.CompletionItem('APPLICATION_PATH');
                startApplicationWinEleAPPLICATION_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                startApplicationWinEleAPPLICATION_PATHCompletion.insertText = new vscode.SnippetString("APPLICATION_PATH = \"${1}\"");
                startApplicationWinEleAPPLICATION_PATHCompletion.documentation = new vscode.MarkdownString('Vollst\u00E4ndiger Dateipfad der zu startenden Anwendung.');
                items.push(startApplicationWinEleAPPLICATION_PATHCompletion);
            }

            if (/.*\s*startIOS\s*\(.*/.test(linePrefix)) {

                const startIOSCAPABILITIES_FILECompletion = new vscode.CompletionItem('CAPABILITIES_FILE');
                startIOSCAPABILITIES_FILECompletion.kind = vscode.CompletionItemKind.Field;
                startIOSCAPABILITIES_FILECompletion.insertText = new vscode.SnippetString("CAPABILITIES_FILE = \"${1}\"");
                startIOSCAPABILITIES_FILECompletion.documentation = new vscode.MarkdownString('Pfad zu einer JSON Datei mit Capabilities zur Konfiguration der zu startenden Appium Session. Um eine App zu starten m\u00FCssen die Capabilities \'app\' bzw. \'bundleId\' gesetzt werden. Weitere Informationen hierzu siehe Dokumentation im Abschnitt Mobile Anwendungen.');
                items.push(startIOSCAPABILITIES_FILECompletion);
            }

            if (/.*\s*startIOSWeb\s*\(.*/.test(linePrefix)) {

                const startIOSWebURLCompletion = new vscode.CompletionItem('URL');
                startIOSWebURLCompletion.kind = vscode.CompletionItemKind.Field;
                startIOSWebURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                startIOSWebURLCompletion.documentation = new vscode.MarkdownString('Der Parameter muss mit der URL der Website belegt werden, die aufgerufen werden soll.');
                items.push(startIOSWebURLCompletion);

                const startIOSWebCAPABILITIES_FILECompletion = new vscode.CompletionItem('CAPABILITIES_FILE');
                startIOSWebCAPABILITIES_FILECompletion.kind = vscode.CompletionItemKind.Field;
                startIOSWebCAPABILITIES_FILECompletion.insertText = new vscode.SnippetString("CAPABILITIES_FILE = \"${1}\"");
                startIOSWebCAPABILITIES_FILECompletion.documentation = new vscode.MarkdownString('Pfad zu einer JSON Datei mit Capabilities zur manuellen Konfiguration der zu startenden Appium Session.');
                items.push(startIOSWebCAPABILITIES_FILECompletion);

                const startIOSWebPLATFORM_VERSIONCompletion = new vscode.CompletionItem('PLATFORM_VERSION');
                startIOSWebPLATFORM_VERSIONCompletion.kind = vscode.CompletionItemKind.Field;
                startIOSWebPLATFORM_VERSIONCompletion.insertText = new vscode.SnippetString("PLATFORM_VERSION = \"${1}\"");
                startIOSWebPLATFORM_VERSIONCompletion.documentation = new vscode.MarkdownString('Version von iOS');
                items.push(startIOSWebPLATFORM_VERSIONCompletion);

                const startIOSWebDEVICE_UDIDCompletion = new vscode.CompletionItem('DEVICE_UDID');
                startIOSWebDEVICE_UDIDCompletion.kind = vscode.CompletionItemKind.Field;
                startIOSWebDEVICE_UDIDCompletion.insertText = new vscode.SnippetString("DEVICE_UDID = \"${1}\"");
                startIOSWebDEVICE_UDIDCompletion.documentation = new vscode.MarkdownString('ID des Ger\u00E4ts - Erforderlich bei Automatisierung eines real-devices. Wenn nur ein einziges Ger\u00E4t an den Mac angeschlossen ist, kann hier auch \'auto\' zur automatischen Erkennung eingetragen werden.');
                items.push(startIOSWebDEVICE_UDIDCompletion);

                const startIOSWebDEVICE_NAMECompletion = new vscode.CompletionItem('DEVICE_NAME');
                startIOSWebDEVICE_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                startIOSWebDEVICE_NAMECompletion.insertText = new vscode.SnippetString("DEVICE_NAME = \"${1}\"");
                startIOSWebDEVICE_NAMECompletion.documentation = new vscode.MarkdownString('Name des iOS-Ger\u00E4te-Simulators');
                items.push(startIOSWebDEVICE_NAMECompletion);

                const startIOSWebALERT_ASSERT_TEXTCompletion = new vscode.CompletionItem('ALERT_ASSERT_TEXT');
                startIOSWebALERT_ASSERT_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                startIOSWebALERT_ASSERT_TEXTCompletion.insertText = new vscode.SnippetString("ALERT_ASSERT_TEXT = \"${1}\"");
                startIOSWebALERT_ASSERT_TEXTCompletion.documentation = new vscode.MarkdownString('Der Parameter kann mit einem Text, z.B. einer Fehlermeldung belegt werden. Nachdem der Browser ge\u00F6ffnet wurde, wird \u00FCberpr\u00FCft, ob der Text in einem Betriebssystemfenster angezeigt wird.');
                items.push(startIOSWebALERT_ASSERT_TEXTCompletion);
            }

            if (/.*\s*startSapDriver\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*startScreenRecording\s*\(.*/.test(linePrefix)) {

                const startScreenRecordingTARGET_FILECompletion = new vscode.CompletionItem('TARGET_FILE');
                startScreenRecordingTARGET_FILECompletion.kind = vscode.CompletionItemKind.Field;
                startScreenRecordingTARGET_FILECompletion.insertText = new vscode.SnippetString("TARGET_FILE = \"${1}\"");
                startScreenRecordingTARGET_FILECompletion.documentation = new vscode.MarkdownString('Einfacher Name oder absoluter Pfad der Datei, in der das Video gespeichert wird. Falls bereits eine gleichnamige Datei im Zielpfad existiert, bricht das Kommando mit einem Fehler ab (siehe dazu auch Parameter \'OVERWRITE_EXISTING_TARGET_FILE\'). Der Name kann mit der Dateiendung \'.avi\' enden. Tut er dies nicht, wird \'.avi\' automatisch erg\u00E4nzt. Wird nur ein einfacher Name und kein absoluter Pfad angegeben, so wird das Video in dem Ordner gespeichert, der in den \'environment.properties\' als \'screenRecorderDirectory\' gesetzt wurde. Per Default ist dies \'${installationDirectory}\/ScreenRecordings\'. Falls kein Name angegeben wurde, wird ein Name auf Basis des Script-Namens und des Zeitstempelts generiert und die Datei ebenfalls im Default-Ordner gespeichert.');
                items.push(startScreenRecordingTARGET_FILECompletion);

                const startScreenRecordingFORCE_STARTCompletion = new vscode.CompletionItem('FORCE_START');
                startScreenRecordingFORCE_STARTCompletion.kind = vscode.CompletionItemKind.Field;
                startScreenRecordingFORCE_STARTCompletion.insertText = new vscode.SnippetString("FORCE_START = \"${1}\"");
                startScreenRecordingFORCE_STARTCompletion.documentation = new vscode.MarkdownString('Falls bereits eine Aufnahme aktiv ist, und FORCE_START=false (Default-Wert), wird keine neue Aufnahme gestartet und das Kommando gibt den Status \'Warnung\' zur\u00FCck. Wird jedoch explizit FORCE_START=true gesetzt, so wird eine m\u00F6glicherweise bereits aktive Aufnahme beendet, das bislang aufgenommene Video gespeichert, und eine neue Aufnahme gestartet.');
                items.push(startScreenRecordingFORCE_STARTCompletion);

                const startScreenRecordingOVERWRITE_EXISTING_TARGET_FILECompletion = new vscode.CompletionItem('OVERWRITE_EXISTING_TARGET_FILE');
                startScreenRecordingOVERWRITE_EXISTING_TARGET_FILECompletion.kind = vscode.CompletionItemKind.Field;
                startScreenRecordingOVERWRITE_EXISTING_TARGET_FILECompletion.insertText = new vscode.SnippetString("OVERWRITE_EXISTING_TARGET_FILE = \"${1}\"");
                startScreenRecordingOVERWRITE_EXISTING_TARGET_FILECompletion.documentation = new vscode.MarkdownString('Falls bereits eine Datei mit dem in TARGET_FILE \u00FCbergebenen Namen im Zielpfad existiert, bricht das Kommando mit einem Fehler ab. Soll dies verhindert werden, muss dieser Parameter auf \'true\' gesetzt werden. Default: false');
                items.push(startScreenRecordingOVERWRITE_EXISTING_TARGET_FILECompletion);

                const startScreenRecordingTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                startScreenRecordingTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                startScreenRecordingTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                startScreenRecordingTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Storage-Key, unter dem der absolute Pfad des zu erstellenden Videos abgelegt werden kann. ');
                items.push(startScreenRecordingTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*startWeb\s*\(.*/.test(linePrefix)) {

                const startWebEXPECTED_WEBSITE_TITLECompletion = new vscode.CompletionItem('EXPECTED_WEBSITE_TITLE');
                startWebEXPECTED_WEBSITE_TITLECompletion.kind = vscode.CompletionItemKind.Field;
                startWebEXPECTED_WEBSITE_TITLECompletion.insertText = new vscode.SnippetString("EXPECTED_WEBSITE_TITLE = \"${1}\"");
                startWebEXPECTED_WEBSITE_TITLECompletion.documentation = new vscode.MarkdownString('Erwarteter Seiten-Titel.');
                items.push(startWebEXPECTED_WEBSITE_TITLECompletion);

                const startWebURLCompletion = new vscode.CompletionItem('URL');
                startWebURLCompletion.kind = vscode.CompletionItemKind.Field;
                startWebURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                startWebURLCompletion.documentation = new vscode.MarkdownString('Zu \u00F6ffnende URL (http:\/\/www...).');
                items.push(startWebURLCompletion);

                const startWebPROXYCompletion = new vscode.CompletionItem('PROXY');
                startWebPROXYCompletion.kind = vscode.CompletionItemKind.Field;
                startWebPROXYCompletion.insertText = new vscode.SnippetString("PROXY = \"${1}\"");
                startWebPROXYCompletion.documentation = new vscode.MarkdownString('Zu verwendender Proxy-Server. Im Default wird kein Proxy verwendet.');
                items.push(startWebPROXYCompletion);

                const startWebBROWSER_NAMECompletion = new vscode.CompletionItem('BROWSER_NAME');
                startWebBROWSER_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                startWebBROWSER_NAMECompletion.insertText = new vscode.SnippetString("BROWSER_NAME = \"${1}\"");
                startWebBROWSER_NAMECompletion.documentation = new vscode.MarkdownString('Browsername. M\u00F6glich sind Firefox bzw. FF, Internet Explorer bzw. IE, Chrome  bzw. CH, Safari  bzw. SA (nur auf MacOS), Edge bzw. ED.');
                items.push(startWebBROWSER_NAMECompletion);

                const startWebWINDOW_WIDTHCompletion = new vscode.CompletionItem('WINDOW_WIDTH');
                startWebWINDOW_WIDTHCompletion.kind = vscode.CompletionItemKind.Field;
                startWebWINDOW_WIDTHCompletion.insertText = new vscode.SnippetString("WINDOW_WIDTH = \"${1}\"");
                startWebWINDOW_WIDTHCompletion.documentation = new vscode.MarkdownString('Gew\u00FCnschte Fensterbreite. Per Default wird das Fenster maximiert.');
                items.push(startWebWINDOW_WIDTHCompletion);

                const startWebWINDOW_HEIGHTCompletion = new vscode.CompletionItem('WINDOW_HEIGHT');
                startWebWINDOW_HEIGHTCompletion.kind = vscode.CompletionItemKind.Field;
                startWebWINDOW_HEIGHTCompletion.insertText = new vscode.SnippetString("WINDOW_HEIGHT = \"${1}\"");
                startWebWINDOW_HEIGHTCompletion.documentation = new vscode.MarkdownString('Gew\u00FCnschte Fensterh\u00F6he. Per Default wird das Fenster maximiert.');
                items.push(startWebWINDOW_HEIGHTCompletion);

                const startWebKILL_DRIVERSCompletion = new vscode.CompletionItem('KILL_DRIVERS');
                startWebKILL_DRIVERSCompletion.kind = vscode.CompletionItemKind.Field;
                startWebKILL_DRIVERSCompletion.insertText = new vscode.SnippetString("KILL_DRIVERS = \"${1}\"");
                startWebKILL_DRIVERSCompletion.documentation = new vscode.MarkdownString('{true,false} Laufende Selenium-Webtreiber-Prozesse vor dem \u00D6ffnen des neuen Browser-Fensters beenden. Default: false');
                items.push(startWebKILL_DRIVERSCompletion);

                const startWebCHROME_PLUGINS_NAMESCompletion = new vscode.CompletionItem('CHROME_PLUGINS_NAMES');
                startWebCHROME_PLUGINS_NAMESCompletion.kind = vscode.CompletionItemKind.Field;
                startWebCHROME_PLUGINS_NAMESCompletion.insertText = new vscode.SnippetString("CHROME_PLUGINS_NAMES = \"${1}\"");
                startWebCHROME_PLUGINS_NAMESCompletion.documentation = new vscode.MarkdownString('Liste der Namen der .crx-Dateien einzubindender Chrome-Extensions (Trennzeichen \';\'). Die .crx-Dateien sind abzulegen im Ordner, der als \'pluginsPathChrome\' in den environment.properties gesetzt ist. Im Standard ist dies das Verzeichnis \'mateo\/Server\/resources\/browsers\/chrome\/plugins\'');
                items.push(startWebCHROME_PLUGINS_NAMESCompletion);

                const startWebALERT_ASSERT_TEXTCompletion = new vscode.CompletionItem('ALERT_ASSERT_TEXT');
                startWebALERT_ASSERT_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                startWebALERT_ASSERT_TEXTCompletion.insertText = new vscode.SnippetString("ALERT_ASSERT_TEXT = \"${1}\"");
                startWebALERT_ASSERT_TEXTCompletion.documentation = new vscode.MarkdownString('\u00D6ffnet sich beim Start des Browsers auf der Webseite ein Alert-Fensters, soll der hier angegebene Text \u00FCberpr\u00FCft werden.');
                items.push(startWebALERT_ASSERT_TEXTCompletion);

                const startWebSAFARI_USE_TECHNOLOGY_PREVIEWCompletion = new vscode.CompletionItem('SAFARI_USE_TECHNOLOGY_PREVIEW');
                startWebSAFARI_USE_TECHNOLOGY_PREVIEWCompletion.kind = vscode.CompletionItemKind.Field;
                startWebSAFARI_USE_TECHNOLOGY_PREVIEWCompletion.insertText = new vscode.SnippetString("SAFARI_USE_TECHNOLOGY_PREVIEW = \"${1}\"");
                startWebSAFARI_USE_TECHNOLOGY_PREVIEWCompletion.documentation = new vscode.MarkdownString('{true,false} Gibt an, ob die Technology-Preview-Version von Safari verwendet werden soll. Default: false');
                items.push(startWebSAFARI_USE_TECHNOLOGY_PREVIEWCompletion);

                const startWebBROWSER_ALIASCompletion = new vscode.CompletionItem('BROWSER_ALIAS');
                startWebBROWSER_ALIASCompletion.kind = vscode.CompletionItemKind.Field;
                startWebBROWSER_ALIASCompletion.insertText = new vscode.SnippetString("BROWSER_ALIAS = \"${1}\"");
                startWebBROWSER_ALIASCompletion.documentation = new vscode.MarkdownString('Falls mehrere Browser mit dem gleichen Browsernamen zu \u00F6ffnen sind (zum Beispiel ein neuer Chrome Browser, obwohl bereits ein Chrome gestartet wurde): Alias f\u00FCr jeden Browser der ge\u00F6ffnet wird, um diesen in Kommanndos eindeutig ansprechen zu k\u00F6nnen.');
                items.push(startWebBROWSER_ALIASCompletion);

                const startWebCHROME_AUTOMATION_EXTENSIONCompletion = new vscode.CompletionItem('CHROME_AUTOMATION_EXTENSION');
                startWebCHROME_AUTOMATION_EXTENSIONCompletion.kind = vscode.CompletionItemKind.Field;
                startWebCHROME_AUTOMATION_EXTENSIONCompletion.insertText = new vscode.SnippetString("CHROME_AUTOMATION_EXTENSION = \"${1}\"");
                startWebCHROME_AUTOMATION_EXTENSIONCompletion.documentation = new vscode.MarkdownString('(Parameter ist deprecated und wird in einer zuk\u00FCnftigen Version entfernt)');
                items.push(startWebCHROME_AUTOMATION_EXTENSIONCompletion);
            }

            if (/.*\s*startWebRemote\s*\(.*/.test(linePrefix)) {

                const startWebRemoteEXPECTED_WEBSITE_TITLECompletion = new vscode.CompletionItem('EXPECTED_WEBSITE_TITLE');
                startWebRemoteEXPECTED_WEBSITE_TITLECompletion.kind = vscode.CompletionItemKind.Field;
                startWebRemoteEXPECTED_WEBSITE_TITLECompletion.insertText = new vscode.SnippetString("EXPECTED_WEBSITE_TITLE = \"${1}\"");
                startWebRemoteEXPECTED_WEBSITE_TITLECompletion.documentation = new vscode.MarkdownString('Erwarteter Seiten-Titel.');
                items.push(startWebRemoteEXPECTED_WEBSITE_TITLECompletion);

                const startWebRemoteURLCompletion = new vscode.CompletionItem('URL');
                startWebRemoteURLCompletion.kind = vscode.CompletionItemKind.Field;
                startWebRemoteURLCompletion.insertText = new vscode.SnippetString("URL = \"${1}\"");
                startWebRemoteURLCompletion.documentation = new vscode.MarkdownString('Zu \u00F6ffnende URL (http:\/\/www...).');
                items.push(startWebRemoteURLCompletion);

                const startWebRemotePROXYCompletion = new vscode.CompletionItem('PROXY');
                startWebRemotePROXYCompletion.kind = vscode.CompletionItemKind.Field;
                startWebRemotePROXYCompletion.insertText = new vscode.SnippetString("PROXY = \"${1}\"");
                startWebRemotePROXYCompletion.documentation = new vscode.MarkdownString('Zu verwendender Proxy-Server. Im Default wird kein Proxy verwendet.');
                items.push(startWebRemotePROXYCompletion);

                const startWebRemoteBROWSER_NAMECompletion = new vscode.CompletionItem('BROWSER_NAME');
                startWebRemoteBROWSER_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                startWebRemoteBROWSER_NAMECompletion.insertText = new vscode.SnippetString("BROWSER_NAME = \"${1}\"");
                startWebRemoteBROWSER_NAMECompletion.documentation = new vscode.MarkdownString('Browsername. M\u00F6glich sind Firefox bzw. FF, Internet Explorer bzw. IE, Chrome  bzw. CH, Safari  bzw. SA (nur auf MacOS), Edge bzw. ED.');
                items.push(startWebRemoteBROWSER_NAMECompletion);

                const startWebRemoteWINDOW_WIDTHCompletion = new vscode.CompletionItem('WINDOW_WIDTH');
                startWebRemoteWINDOW_WIDTHCompletion.kind = vscode.CompletionItemKind.Field;
                startWebRemoteWINDOW_WIDTHCompletion.insertText = new vscode.SnippetString("WINDOW_WIDTH = \"${1}\"");
                startWebRemoteWINDOW_WIDTHCompletion.documentation = new vscode.MarkdownString('Gew\u00FCnschte Fensterbreite. Per Default wird das Fenster maximiert.');
                items.push(startWebRemoteWINDOW_WIDTHCompletion);

                const startWebRemoteWINDOW_HEIGHTCompletion = new vscode.CompletionItem('WINDOW_HEIGHT');
                startWebRemoteWINDOW_HEIGHTCompletion.kind = vscode.CompletionItemKind.Field;
                startWebRemoteWINDOW_HEIGHTCompletion.insertText = new vscode.SnippetString("WINDOW_HEIGHT = \"${1}\"");
                startWebRemoteWINDOW_HEIGHTCompletion.documentation = new vscode.MarkdownString('Gew\u00FCnschte Fensterh\u00F6he. Per Default wird das Fenster maximiert.');
                items.push(startWebRemoteWINDOW_HEIGHTCompletion);

                const startWebRemoteKILL_DRIVERSCompletion = new vscode.CompletionItem('KILL_DRIVERS');
                startWebRemoteKILL_DRIVERSCompletion.kind = vscode.CompletionItemKind.Field;
                startWebRemoteKILL_DRIVERSCompletion.insertText = new vscode.SnippetString("KILL_DRIVERS = \"${1}\"");
                startWebRemoteKILL_DRIVERSCompletion.documentation = new vscode.MarkdownString('{true,false} Laufende Selenium-Webtreiber-Prozesse vor dem \u00D6ffnen des neuen Browser-Fensters beenden. Default: false');
                items.push(startWebRemoteKILL_DRIVERSCompletion);

                const startWebRemoteCHROME_PLUGINS_NAMESCompletion = new vscode.CompletionItem('CHROME_PLUGINS_NAMES');
                startWebRemoteCHROME_PLUGINS_NAMESCompletion.kind = vscode.CompletionItemKind.Field;
                startWebRemoteCHROME_PLUGINS_NAMESCompletion.insertText = new vscode.SnippetString("CHROME_PLUGINS_NAMES = \"${1}\"");
                startWebRemoteCHROME_PLUGINS_NAMESCompletion.documentation = new vscode.MarkdownString('Liste der Namen der .crx-Dateien einzubindender Chrome-Extensions (Trennzeichen \';\'). Die .crx-Dateien sind abzulegen im Ordner, der als \'pluginsPathChrome\' in den environment.properties gesetzt ist. Im Standard ist dies das Verzeichnis \'mateo\/Server\/resources\/browsers\/chrome\/plugins\'');
                items.push(startWebRemoteCHROME_PLUGINS_NAMESCompletion);

                const startWebRemoteALERT_ASSERT_TEXTCompletion = new vscode.CompletionItem('ALERT_ASSERT_TEXT');
                startWebRemoteALERT_ASSERT_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                startWebRemoteALERT_ASSERT_TEXTCompletion.insertText = new vscode.SnippetString("ALERT_ASSERT_TEXT = \"${1}\"");
                startWebRemoteALERT_ASSERT_TEXTCompletion.documentation = new vscode.MarkdownString('\u00D6ffnet sich beim Start des Browsers auf der Webseite ein Alert-Fensters, soll der hier angegebene Text \u00FCberpr\u00FCft werden.');
                items.push(startWebRemoteALERT_ASSERT_TEXTCompletion);

                const startWebRemoteSAFARI_USE_TECHNOLOGY_PREVIEWCompletion = new vscode.CompletionItem('SAFARI_USE_TECHNOLOGY_PREVIEW');
                startWebRemoteSAFARI_USE_TECHNOLOGY_PREVIEWCompletion.kind = vscode.CompletionItemKind.Field;
                startWebRemoteSAFARI_USE_TECHNOLOGY_PREVIEWCompletion.insertText = new vscode.SnippetString("SAFARI_USE_TECHNOLOGY_PREVIEW = \"${1}\"");
                startWebRemoteSAFARI_USE_TECHNOLOGY_PREVIEWCompletion.documentation = new vscode.MarkdownString('{true,false} Gibt an, ob die Technology-Preview-Version von Safari verwendet werden soll. Default: false');
                items.push(startWebRemoteSAFARI_USE_TECHNOLOGY_PREVIEWCompletion);

                const startWebRemoteBROWSER_ALIASCompletion = new vscode.CompletionItem('BROWSER_ALIAS');
                startWebRemoteBROWSER_ALIASCompletion.kind = vscode.CompletionItemKind.Field;
                startWebRemoteBROWSER_ALIASCompletion.insertText = new vscode.SnippetString("BROWSER_ALIAS = \"${1}\"");
                startWebRemoteBROWSER_ALIASCompletion.documentation = new vscode.MarkdownString('Falls mehrere Browser mit dem gleichen Browsernamen zu \u00F6ffnen sind (zum Beispiel ein neuer Chrome Browser, obwohl bereits ein Chrome gestartet wurde): Alias f\u00FCr jeden Browser der ge\u00F6ffnet wird, um diesen in Kommanndos eindeutig ansprechen zu k\u00F6nnen.');
                items.push(startWebRemoteBROWSER_ALIASCompletion);

                const startWebRemoteCHROME_AUTOMATION_EXTENSIONCompletion = new vscode.CompletionItem('CHROME_AUTOMATION_EXTENSION');
                startWebRemoteCHROME_AUTOMATION_EXTENSIONCompletion.kind = vscode.CompletionItemKind.Field;
                startWebRemoteCHROME_AUTOMATION_EXTENSIONCompletion.insertText = new vscode.SnippetString("CHROME_AUTOMATION_EXTENSION = \"${1}\"");
                startWebRemoteCHROME_AUTOMATION_EXTENSIONCompletion.documentation = new vscode.MarkdownString('{true,false} Bestimmt, ob in Chrome die Selenium-Automation-Extension geladen werden soll (setzt useAutomationExtension=true). Default: true');
                items.push(startWebRemoteCHROME_AUTOMATION_EXTENSIONCompletion);

                const startWebRemoteREMOTE_WEB_DRIVER_SERVER_URLCompletion = new vscode.CompletionItem('REMOTE_WEB_DRIVER_SERVER_URL');
                startWebRemoteREMOTE_WEB_DRIVER_SERVER_URLCompletion.kind = vscode.CompletionItemKind.Field;
                startWebRemoteREMOTE_WEB_DRIVER_SERVER_URLCompletion.insertText = new vscode.SnippetString("REMOTE_WEB_DRIVER_SERVER_URL = \"${1}\"");
                startWebRemoteREMOTE_WEB_DRIVER_SERVER_URLCompletion.documentation = new vscode.MarkdownString('(Parameter ist deprecated und wird in einer zuk\u00FCnftigen Version entfernt)');
                items.push(startWebRemoteREMOTE_WEB_DRIVER_SERVER_URLCompletion);
            }

            if (/.*\s*startsWithAlpha\s*\(.*/.test(linePrefix)) {

                const startsWithAlphaTEXTCompletion = new vscode.CompletionItem('TEXT');
                startsWithAlphaTEXTCompletion.kind = vscode.CompletionItemKind.Field;
                startsWithAlphaTEXTCompletion.insertText = new vscode.SnippetString("TEXT = \"${1}\"");
                startsWithAlphaTEXTCompletion.documentation = new vscode.MarkdownString('Zu \u00FCberpr\u00FCfender Text.');
                items.push(startsWithAlphaTEXTCompletion);

                const startsWithAlphaPREFIXCompletion = new vscode.CompletionItem('PREFIX');
                startsWithAlphaPREFIXCompletion.kind = vscode.CompletionItemKind.Field;
                startsWithAlphaPREFIXCompletion.insertText = new vscode.SnippetString("PREFIX = \"${1}\"");
                startsWithAlphaPREFIXCompletion.documentation = new vscode.MarkdownString('M\u00F6glicher Teil-Text, mit dem TEXT beginnt.');
                items.push(startsWithAlphaPREFIXCompletion);

                const startsWithAlphaTRIM_TEXTCompletion = new vscode.CompletionItem('TRIM_TEXT');
                startsWithAlphaTRIM_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                startsWithAlphaTRIM_TEXTCompletion.insertText = new vscode.SnippetString("TRIM_TEXT = \"${1}\"");
                startsWithAlphaTRIM_TEXTCompletion.documentation = new vscode.MarkdownString('Sollen vor- und nachgestellte Leerzeichen in TEXT ignoriert werden? {true, false} Default: true');
                items.push(startsWithAlphaTRIM_TEXTCompletion);

                const startsWithAlphaTRIM_PREFIXCompletion = new vscode.CompletionItem('TRIM_PREFIX');
                startsWithAlphaTRIM_PREFIXCompletion.kind = vscode.CompletionItemKind.Field;
                startsWithAlphaTRIM_PREFIXCompletion.insertText = new vscode.SnippetString("TRIM_PREFIX = \"${1}\"");
                startsWithAlphaTRIM_PREFIXCompletion.documentation = new vscode.MarkdownString('Sollen vor- und nachgestellte Leerzeichen in PREFIX ignoriert werden? {true, false} Default: true');
                items.push(startsWithAlphaTRIM_PREFIXCompletion);
            }

            if (/.*\s*stopMobile\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*stopSapDriver\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*stopScreenRecording\s*\(.*/.test(linePrefix)) {

                const stopScreenRecordingSILENT_FAILCompletion = new vscode.CompletionItem('SILENT_FAIL');
                stopScreenRecordingSILENT_FAILCompletion.kind = vscode.CompletionItemKind.Field;
                stopScreenRecordingSILENT_FAILCompletion.insertText = new vscode.SnippetString("SILENT_FAIL = \"${1}\"");
                stopScreenRecordingSILENT_FAILCompletion.documentation = new vscode.MarkdownString('Falls keine Aufnahme aktiv ist, und SILENT_FAIL=false (Default-Wert), erfolgt keine Aktion und das Kommando gibt den Status \'Warnung\' zur\u00FCck. Wird jedoch explizit SILENT_FAIL=true gesetzt, so erfolgt ebenso keine Aktion, aber es wird der Status \'Erfolg\' zur\u00FCckgegeben. ');
                items.push(stopScreenRecordingSILENT_FAILCompletion);

                const stopScreenRecordingTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                stopScreenRecordingTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                stopScreenRecordingTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                stopScreenRecordingTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Storage-Key, unter dem der absolute Pfad des gespeicherten Videos abgelegt werden kann. ');
                items.push(stopScreenRecordingTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*stopWeb\s*\(.*/.test(linePrefix)) {

                const stopWebSTOP_CURRENT_DRIVER_ONLYCompletion = new vscode.CompletionItem('STOP_CURRENT_DRIVER_ONLY');
                stopWebSTOP_CURRENT_DRIVER_ONLYCompletion.kind = vscode.CompletionItemKind.Field;
                stopWebSTOP_CURRENT_DRIVER_ONLYCompletion.insertText = new vscode.SnippetString("STOP_CURRENT_DRIVER_ONLY = \"${1}\"");
                stopWebSTOP_CURRENT_DRIVER_ONLYCompletion.documentation = new vscode.MarkdownString('Beendet nur den Treiber, \u00FCber den das Fenster gesteuert wird, nicht aber das Web-Fenster, wenn auf \'True\' gesetzt.');
                items.push(stopWebSTOP_CURRENT_DRIVER_ONLYCompletion);
            }

            if (/.*\s*storageToJson\s*\(.*/.test(linePrefix)) {

                const storageToJsonKEY_BLACKLISTCompletion = new vscode.CompletionItem('KEY_BLACKLIST');
                storageToJsonKEY_BLACKLISTCompletion.kind = vscode.CompletionItemKind.Field;
                storageToJsonKEY_BLACKLISTCompletion.insertText = new vscode.SnippetString("KEY_BLACKLIST = \"${1}\"");
                storageToJsonKEY_BLACKLISTCompletion.documentation = new vscode.MarkdownString('Keys von Storage-Variablen, die nicht in der JSON enthalten sein sollen. Falls leer oder nicht gesetzt, werden alle Storage-Variablen enthalten sein. Diese Liste wird immer erg\u00E4nzt um die Werte, die im Konfigurationsparameter \'storageToJsonDefaultBlacklist\' in der Konfigurationsdatei \'execution.properties\' enthalten sind. Im Standard ist hier \'LAST_COMMAND_RESULT\' enthalten.');
                items.push(storageToJsonKEY_BLACKLISTCompletion);

                const storageToJsonKEY_WHITELISTCompletion = new vscode.CompletionItem('KEY_WHITELIST');
                storageToJsonKEY_WHITELISTCompletion.kind = vscode.CompletionItemKind.Field;
                storageToJsonKEY_WHITELISTCompletion.insertText = new vscode.SnippetString("KEY_WHITELIST = \"${1}\"");
                storageToJsonKEY_WHITELISTCompletion.documentation = new vscode.MarkdownString('Keys von Storage-Variablen, die ausschlie\u00DFlich in der JSON enthalten sein sollen. Es sollen also keine anderen Keys in der JSON enthalten sein, als diejenigen die auch in diese Whitelist enthalten sind. Falls leer oder nicht gesetzt, werden alle Storage-Variablen enthalten sein.');
                items.push(storageToJsonKEY_WHITELISTCompletion);

                const storageToJsonTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                storageToJsonTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                storageToJsonTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                storageToJsonTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel, in die das JSON geschrieben werden soll.');
                items.push(storageToJsonTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*success\s*\(.*/.test(linePrefix)) {

                const successMESSAGECompletion = new vscode.CompletionItem('MESSAGE');
                successMESSAGECompletion.kind = vscode.CompletionItemKind.Field;
                successMESSAGECompletion.insertText = new vscode.SnippetString("MESSAGE = \"${1}\"");
                successMESSAGECompletion.documentation = new vscode.MarkdownString('Nachricht, die im Bericht angezeigt werden soll.');
                items.push(successMESSAGECompletion);
            }

            if (/.*\s*swipeElementMobile\s*\(.*/.test(linePrefix)) {

                const swipeElementMobileBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                swipeElementMobileBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                swipeElementMobileBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                swipeElementMobileBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll (m\u00F6glich sind: id, name, xpath, class_name, tag_name, link_name, partial_link_name, css, accessability_id, ios_automation). Der Default-Wert ist \'name\'.');
                items.push(swipeElementMobileBY_CRITERIACompletion);

                const swipeElementMobileEXPRESSION_TEXTCompletion = new vscode.CompletionItem('EXPRESSION_TEXT');
                swipeElementMobileEXPRESSION_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                swipeElementMobileEXPRESSION_TEXTCompletion.insertText = new vscode.SnippetString("EXPRESSION_TEXT = \"${1}\"");
                swipeElementMobileEXPRESSION_TEXTCompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(swipeElementMobileEXPRESSION_TEXTCompletion);

                const swipeElementMobileGESTURE_DIRECTIONCompletion = new vscode.CompletionItem('GESTURE_DIRECTION');
                swipeElementMobileGESTURE_DIRECTIONCompletion.kind = vscode.CompletionItemKind.Field;
                swipeElementMobileGESTURE_DIRECTIONCompletion.insertText = new vscode.SnippetString("GESTURE_DIRECTION = \"${1}\"");
                swipeElementMobileGESTURE_DIRECTIONCompletion.documentation = new vscode.MarkdownString('Dieser Parameter gibt die Richtung der Swipe-Geste an. M\u00F6glich sind: LEFT_TO_RIGHT, RIGHT_TO_LEFT, BOTTOM_TO_TOP und TOP_TO_BOTTOM.');
                items.push(swipeElementMobileGESTURE_DIRECTIONCompletion);

                const swipeElementMobileWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                swipeElementMobileWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                swipeElementMobileWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                swipeElementMobileWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Optionaler Parameter, der angibt, wie lange vor dem Durchf\u00FChren der Swip-Geste gewartet werden soll bis das Kommando durchgef\u00FChrt wird. Der Parameter muss als positive, ganze Zahl angegeben werden. Der Default-Wert ist \'1\'.');
                items.push(swipeElementMobileWAIT_SECONDSCompletion);

                const swipeElementMobileSWIPE_DURATIONCompletion = new vscode.CompletionItem('SWIPE_DURATION');
                swipeElementMobileSWIPE_DURATIONCompletion.kind = vscode.CompletionItemKind.Field;
                swipeElementMobileSWIPE_DURATIONCompletion.insertText = new vscode.SnippetString("SWIPE_DURATION = \"${1}\"");
                swipeElementMobileSWIPE_DURATIONCompletion.documentation = new vscode.MarkdownString('Dauer der Swipe-Geste in Millisekunden. Der Default-Wert betr\u00E4gt \'1000\'.');
                items.push(swipeElementMobileSWIPE_DURATIONCompletion);
            }

            if (/.*\s*swipeMobile\s*\(.*/.test(linePrefix)) {

                const swipeMobileX_START_SWIPECompletion = new vscode.CompletionItem('X_START_SWIPE');
                swipeMobileX_START_SWIPECompletion.kind = vscode.CompletionItemKind.Field;
                swipeMobileX_START_SWIPECompletion.insertText = new vscode.SnippetString("X_START_SWIPE = \"${1}\"");
                swipeMobileX_START_SWIPECompletion.documentation = new vscode.MarkdownString('Der Pflichtparameter gibt die X-Koordinate des Punktes in Pixeln an, an dem die Swipe-Geste startet. Der Parameter muss als positive, ganze Zahl angegeben werden.');
                items.push(swipeMobileX_START_SWIPECompletion);

                const swipeMobileY_START_SWIPECompletion = new vscode.CompletionItem('Y_START_SWIPE');
                swipeMobileY_START_SWIPECompletion.kind = vscode.CompletionItemKind.Field;
                swipeMobileY_START_SWIPECompletion.insertText = new vscode.SnippetString("Y_START_SWIPE = \"${1}\"");
                swipeMobileY_START_SWIPECompletion.documentation = new vscode.MarkdownString('Der Pflichtparameter gibt die Y-Koordinate des Punktes in Pixeln an, an dem die Swipe-Geste startet. Der Parameter muss als positive, ganze Zahl angegeben werden.');
                items.push(swipeMobileY_START_SWIPECompletion);

                const swipeMobileX_END_SWIPECompletion = new vscode.CompletionItem('X_END_SWIPE');
                swipeMobileX_END_SWIPECompletion.kind = vscode.CompletionItemKind.Field;
                swipeMobileX_END_SWIPECompletion.insertText = new vscode.SnippetString("X_END_SWIPE = \"${1}\"");
                swipeMobileX_END_SWIPECompletion.documentation = new vscode.MarkdownString('Der Pflichtparameter gibt die X-Koordinate des Punktes in Pixeln an, an dem die Swipe-Geste endet. Der Parameter muss als positive, ganze Zahl angegeben werden.');
                items.push(swipeMobileX_END_SWIPECompletion);

                const swipeMobileY_END_SWIPECompletion = new vscode.CompletionItem('Y_END_SWIPE');
                swipeMobileY_END_SWIPECompletion.kind = vscode.CompletionItemKind.Field;
                swipeMobileY_END_SWIPECompletion.insertText = new vscode.SnippetString("Y_END_SWIPE = \"${1}\"");
                swipeMobileY_END_SWIPECompletion.documentation = new vscode.MarkdownString('Der Pflichtparameter gibt die Y-Koordinate des Punktes in Pixeln an, an dem die Swipe-Geste endet. Der Parameter muss als positive, ganze Zahl angegeben werden.');
                items.push(swipeMobileY_END_SWIPECompletion);

                const swipeMobileSWIPE_DURATIONCompletion = new vscode.CompletionItem('SWIPE_DURATION');
                swipeMobileSWIPE_DURATIONCompletion.kind = vscode.CompletionItemKind.Field;
                swipeMobileSWIPE_DURATIONCompletion.insertText = new vscode.SnippetString("SWIPE_DURATION = \"${1}\"");
                swipeMobileSWIPE_DURATIONCompletion.documentation = new vscode.MarkdownString('Der Parameter gibt die Dauer der Swipe-Geste in Millisekunden an.');
                items.push(swipeMobileSWIPE_DURATIONCompletion);
            }

            if (/.*\s*swipeScreenMobile\s*\(.*/.test(linePrefix)) {

                const swipeScreenMobileGESTURE_DIRECTIONCompletion = new vscode.CompletionItem('GESTURE_DIRECTION');
                swipeScreenMobileGESTURE_DIRECTIONCompletion.kind = vscode.CompletionItemKind.Field;
                swipeScreenMobileGESTURE_DIRECTIONCompletion.insertText = new vscode.SnippetString("GESTURE_DIRECTION = \"${1}\"");
                swipeScreenMobileGESTURE_DIRECTIONCompletion.documentation = new vscode.MarkdownString('Dieser Parameter gibt die Richtung der Swipe-Geste an. M\u00F6glich sind: LEFT_TO_RIGHT, RIGHT_TO_LEFT, BOTTOM_TO_TOP und TOP_TO_BOTTOM.');
                items.push(swipeScreenMobileGESTURE_DIRECTIONCompletion);

                const swipeScreenMobileSWIPE_DURATIONCompletion = new vscode.CompletionItem('SWIPE_DURATION');
                swipeScreenMobileSWIPE_DURATIONCompletion.kind = vscode.CompletionItemKind.Field;
                swipeScreenMobileSWIPE_DURATIONCompletion.insertText = new vscode.SnippetString("SWIPE_DURATION = \"${1}\"");
                swipeScreenMobileSWIPE_DURATIONCompletion.documentation = new vscode.MarkdownString('Der Parameter gibt die Dauer der Swipe-Geste in Millisekunden an. Der Default-Wert betr\u00E4gt \'1000\'.');
                items.push(swipeScreenMobileSWIPE_DURATIONCompletion);
            }

            if (/.*\s*switchContextMobile\s*\(.*/.test(linePrefix)) {

                const switchContextMobileCONTEXT_PREFIXCompletion = new vscode.CompletionItem('CONTEXT_PREFIX');
                switchContextMobileCONTEXT_PREFIXCompletion.kind = vscode.CompletionItemKind.Field;
                switchContextMobileCONTEXT_PREFIXCompletion.insertText = new vscode.SnippetString("CONTEXT_PREFIX = \"${1}\"");
                switchContextMobileCONTEXT_PREFIXCompletion.documentation = new vscode.MarkdownString('Name oder Prefix des Zielcontexts. M\u00F6glich sind: NATIVEAPP, WEBVIEW_1, WEBVIEW usw.');
                items.push(switchContextMobileCONTEXT_PREFIXCompletion);
            }

            if (/.*\s*switchDriver\s*\(.*/.test(linePrefix)) {

                const switchDriverBROWSER_ABBREVIATIONCompletion = new vscode.CompletionItem('BROWSER_ABBREVIATION');
                switchDriverBROWSER_ABBREVIATIONCompletion.kind = vscode.CompletionItemKind.Field;
                switchDriverBROWSER_ABBREVIATIONCompletion.insertText = new vscode.SnippetString("BROWSER_ABBREVIATION = \"${1}\"");
                switchDriverBROWSER_ABBREVIATIONCompletion.documentation = new vscode.MarkdownString('Abk\u00FCrzung f\u00FCr den Browser, in den gewechselt werden soll (FF=Firefox, IE=Internet Explorer, CH=Chrome, SA=Safari)');
                items.push(switchDriverBROWSER_ABBREVIATIONCompletion);

                const switchDriverBROWSER_ALIASCompletion = new vscode.CompletionItem('BROWSER_ALIAS');
                switchDriverBROWSER_ALIASCompletion.kind = vscode.CompletionItemKind.Field;
                switchDriverBROWSER_ALIASCompletion.insertText = new vscode.SnippetString("BROWSER_ALIAS = \"${1}\"");
                switchDriverBROWSER_ALIASCompletion.documentation = new vscode.MarkdownString('(Wird in startWeb festgelegt). Falls mehrere gleichartige Browser ge\u00F6ffnet sind, eindeutiger Alias des anzusprechenden Browsers.');
                items.push(switchDriverBROWSER_ALIASCompletion);
            }

            if (/.*\s*switchFrameMobile\s*\(.*/.test(linePrefix)) {

                const switchFrameMobileBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                switchFrameMobileBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                switchFrameMobileBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                switchFrameMobileBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll (m\u00F6glich sind: id, name, xpath, class_name, tag_name, link_name, partial_link_name, css, accessability_id, ios_automation). Der Default-Wert ist \'name\'.');
                items.push(switchFrameMobileBY_CRITERIACompletion);

                const switchFrameMobileEXPRESSION_TEXTCompletion = new vscode.CompletionItem('EXPRESSION_TEXT');
                switchFrameMobileEXPRESSION_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                switchFrameMobileEXPRESSION_TEXTCompletion.insertText = new vscode.SnippetString("EXPRESSION_TEXT = \"${1}\"");
                switchFrameMobileEXPRESSION_TEXTCompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(switchFrameMobileEXPRESSION_TEXTCompletion);

                const switchFrameMobileWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                switchFrameMobileWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                switchFrameMobileWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                switchFrameMobileWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Optionaler Parameter, der angibt, wie lange gewartet werden soll. Der Parameter muss als positive, ganze Zahl angegeben werden. Der Default-Wert ist \'1\'.');
                items.push(switchFrameMobileWAIT_SECONDSCompletion);
            }

            if (/.*\s*switchFrameWeb\s*\(.*/.test(linePrefix)) {

                const switchFrameWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                switchFrameWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                switchFrameWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                switchFrameWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Strategie, wie das Element mit Selenium gefunden werden soll (default ist name). Hier kann auch INDEX verwendet werden, um den Frame in ELEMENT_NAME \u00FCber den Index innerhalb der Seite anzusprechen.');
                items.push(switchFrameWebBY_CRITERIACompletion);

                const switchFrameWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                switchFrameWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                switchFrameWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                switchFrameWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Elementname, auf dem die Operation ausgef\u00FChrt werden soll');
                items.push(switchFrameWebELEMENT_NAMECompletion);

                const switchFrameWebWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                switchFrameWebWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                switchFrameWebWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                switchFrameWebWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Wie viele Sekunden soll vor dem Suchen des Frames gewartet werden. Bei zu kurzer Zeit kann es vorkommen, dass der Frame nicht gefunden wird');
                items.push(switchFrameWebWAIT_SECONDSCompletion);
            }

            if (/.*\s*switchWindowWeb\s*\(.*/.test(linePrefix)) {

                const switchWindowWebCLOSE_CURRENT_WINDOWCompletion = new vscode.CompletionItem('CLOSE_CURRENT_WINDOW');
                switchWindowWebCLOSE_CURRENT_WINDOWCompletion.kind = vscode.CompletionItemKind.Field;
                switchWindowWebCLOSE_CURRENT_WINDOWCompletion.insertText = new vscode.SnippetString("CLOSE_CURRENT_WINDOW = \"${1}\"");
                switchWindowWebCLOSE_CURRENT_WINDOWCompletion.documentation = new vscode.MarkdownString('{true,false} Legt fest, ob das aktuell ge\u00F6ffnete Fenster\/Tab zu schlie\u00DFen ist. Default: false');
                items.push(switchWindowWebCLOSE_CURRENT_WINDOWCompletion);

                const switchWindowWebWINDOW_TITLECompletion = new vscode.CompletionItem('WINDOW_TITLE');
                switchWindowWebWINDOW_TITLECompletion.kind = vscode.CompletionItemKind.Field;
                switchWindowWebWINDOW_TITLECompletion.insertText = new vscode.SnippetString("WINDOW_TITLE = \"${1}\"");
                switchWindowWebWINDOW_TITLECompletion.documentation = new vscode.MarkdownString('Name des spezifischen Ziel-Fensters\/Tabs, in das gewechselt werden soll.       Stimmt mit dem Namen des Fensters\/Tabs \u00FCberein, z.B. \'Google\' oder \'M\u00FCnster - Wikipedia\'.       Bei Nicht-Angabe wird in das n\u00E4chste gefundene Fenster\/Tab gewechselt.');
                items.push(switchWindowWebWINDOW_TITLECompletion);
            }

            if (/.*\s*takeScreenshot\s*\(.*/.test(linePrefix)) {

                const takeScreenshotOPTIONAL_PATHCompletion = new vscode.CompletionItem('OPTIONAL_PATH');
                takeScreenshotOPTIONAL_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                takeScreenshotOPTIONAL_PATHCompletion.insertText = new vscode.SnippetString("OPTIONAL_PATH = \"${1}\"");
                takeScreenshotOPTIONAL_PATHCompletion.documentation = new vscode.MarkdownString('Optionaler Pfad, an dem ein Screenshot gespeichert werden soll. Mehrere Pfade k\u00F6nnen getrennt durch Semikolon angegeben werden.');
                items.push(takeScreenshotOPTIONAL_PATHCompletion);

                const takeScreenshotWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                takeScreenshotWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                takeScreenshotWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                takeScreenshotWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name eines bestimmten Fensters, von dem ein Screenshot erzeugt werden soll. Das Fenster muss auf dem Bildschirm ge\u00F6ffnet sein.             Falls kein solches Fenster mit diesem exakten Namen gefunden wird, wird nach dem ersten Fenster gesucht, das WINDOW_NAME im Titel enth\u00C3\u00A4lt.              Falls auch so ein Fenster nicht gefunden wird, wird der gesamte Bildeschirm fotografiert.');
                items.push(takeScreenshotWINDOW_NAMECompletion);
            }

            if (/.*\s*takeScreenshotElementWeb\s*\(.*/.test(linePrefix)) {

                const takeScreenshotElementWebOPTIONAL_PATHCompletion = new vscode.CompletionItem('OPTIONAL_PATH');
                takeScreenshotElementWebOPTIONAL_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                takeScreenshotElementWebOPTIONAL_PATHCompletion.insertText = new vscode.SnippetString("OPTIONAL_PATH = \"${1}\"");
                takeScreenshotElementWebOPTIONAL_PATHCompletion.documentation = new vscode.MarkdownString('Optionaler Pfad zu dem Verzeichnis, in dem ein Screenshot gespeichert werden soll. Mehrere Pfade k\u00F6nnen getrennt durch Semikolon angegeben werden.');
                items.push(takeScreenshotElementWebOPTIONAL_PATHCompletion);

                const takeScreenshotElementWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                takeScreenshotElementWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                takeScreenshotElementWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                takeScreenshotElementWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll (css, js, xpath, linktext, partiallinktext, tagname, id, name, firstLinkName, class).');
                items.push(takeScreenshotElementWebBY_CRITERIACompletion);

                const takeScreenshotElementWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                takeScreenshotElementWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                takeScreenshotElementWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                takeScreenshotElementWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bei SHOT_MODE \'element\': Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(takeScreenshotElementWebELEMENT_NAMECompletion);
            }

            if (/.*\s*takeScreenshotFullWeb\s*\(.*/.test(linePrefix)) {

                const takeScreenshotFullWebOPTIONAL_PATHCompletion = new vscode.CompletionItem('OPTIONAL_PATH');
                takeScreenshotFullWebOPTIONAL_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                takeScreenshotFullWebOPTIONAL_PATHCompletion.insertText = new vscode.SnippetString("OPTIONAL_PATH = \"${1}\"");
                takeScreenshotFullWebOPTIONAL_PATHCompletion.documentation = new vscode.MarkdownString('Optionaler Pfad zu dem Verzeichnis, in dem ein Screenshot gespeichert werden soll. Mehrere Pfade k\u00F6nnen getrennt durch Semikolon angegeben werden.');
                items.push(takeScreenshotFullWebOPTIONAL_PATHCompletion);

                const takeScreenshotFullWebAFTER_FIRST_SCROLL_HIDE_ELEMENTSCompletion = new vscode.CompletionItem('AFTER_FIRST_SCROLL_HIDE_ELEMENTS');
                takeScreenshotFullWebAFTER_FIRST_SCROLL_HIDE_ELEMENTSCompletion.kind = vscode.CompletionItemKind.Field;
                takeScreenshotFullWebAFTER_FIRST_SCROLL_HIDE_ELEMENTSCompletion.insertText = new vscode.SnippetString("AFTER_FIRST_SCROLL_HIDE_ELEMENTS = \"${1}\"");
                takeScreenshotFullWebAFTER_FIRST_SCROLL_HIDE_ELEMENTSCompletion.documentation = new vscode.MarkdownString('Elemente, die nach dem ersten Scrollen nicht mehr mitfotografiert werden sollen (z.B. Header-Elemente wie eine Nav-Bar).       Angabe als Komma-separierte Liste von Schl\u00FCssel-Wert-Paaren im Format BY_CRITERIA=ELEMENT_NAME. M\u00F6gliche Werte f\u00FCr BY_CRITERIA: css, js, xpath, linktext, partiallinktext, tagname, id, name, firstLinkName, class.      Beispiel (1 Element): xpath=\/\/*[@id=\'main-header-sticky\']\/div       Beispiel (2 Elemente): css=body > nav, xpath=\/\/*[@id=\'panel\']\/div[3]\/div');
                items.push(takeScreenshotFullWebAFTER_FIRST_SCROLL_HIDE_ELEMENTSCompletion);

                const takeScreenshotFullWebUNTIL_LAST_SCROLL_HIDE_ELEMENTSCompletion = new vscode.CompletionItem('UNTIL_LAST_SCROLL_HIDE_ELEMENTS');
                takeScreenshotFullWebUNTIL_LAST_SCROLL_HIDE_ELEMENTSCompletion.kind = vscode.CompletionItemKind.Field;
                takeScreenshotFullWebUNTIL_LAST_SCROLL_HIDE_ELEMENTSCompletion.insertText = new vscode.SnippetString("UNTIL_LAST_SCROLL_HIDE_ELEMENTS = \"${1}\"");
                takeScreenshotFullWebUNTIL_LAST_SCROLL_HIDE_ELEMENTSCompletion.documentation = new vscode.MarkdownString('Elemente, die erst nach dem letzten Scrollen mitfotografiert werden sollen (z.B. Footer-Elemente wie eine Cookie-Abfrage).       Angabe als Komma-separierte Liste von Schl\u00FCssel-Wert-Paaren im Format BY_CRITERIA=ELEMENT_NAME. M\u00F6gliche Werte f\u00FCr BY_CRITERIA: css, js, xpath, linktext, partiallinktext, tagname, id, name, firstLinkName, class.      Beispiel (1 Element): xpath=\/\/*[@id=\'main-header-sticky\']\/div       Beispiel (2 Elemente): css=body > nav, xpath=\/\/*[@id=\'panel\']\/div[3]\/div');
                items.push(takeScreenshotFullWebUNTIL_LAST_SCROLL_HIDE_ELEMENTSCompletion);

                const takeScreenshotFullWebSCROLL_TIMEOUT_BEFORE_SCROLLCompletion = new vscode.CompletionItem('SCROLL_TIMEOUT_BEFORE_SCROLL');
                takeScreenshotFullWebSCROLL_TIMEOUT_BEFORE_SCROLLCompletion.kind = vscode.CompletionItemKind.Field;
                takeScreenshotFullWebSCROLL_TIMEOUT_BEFORE_SCROLLCompletion.insertText = new vscode.SnippetString("SCROLL_TIMEOUT_BEFORE_SCROLL = \"${1}\"");
                takeScreenshotFullWebSCROLL_TIMEOUT_BEFORE_SCROLLCompletion.documentation = new vscode.MarkdownString('Wartezeit in Millisekunden, die vor jedem Scroll gewartet werden soll. (Default: 0)');
                items.push(takeScreenshotFullWebSCROLL_TIMEOUT_BEFORE_SCROLLCompletion);

                const takeScreenshotFullWebSCROLL_TIMEOUT_AFTER_SCROLLCompletion = new vscode.CompletionItem('SCROLL_TIMEOUT_AFTER_SCROLL');
                takeScreenshotFullWebSCROLL_TIMEOUT_AFTER_SCROLLCompletion.kind = vscode.CompletionItemKind.Field;
                takeScreenshotFullWebSCROLL_TIMEOUT_AFTER_SCROLLCompletion.insertText = new vscode.SnippetString("SCROLL_TIMEOUT_AFTER_SCROLL = \"${1}\"");
                takeScreenshotFullWebSCROLL_TIMEOUT_AFTER_SCROLLCompletion.documentation = new vscode.MarkdownString('Wartezeit in Millisekunden, die nach jedem Scroll gewartet werden soll. (Default: 100)');
                items.push(takeScreenshotFullWebSCROLL_TIMEOUT_AFTER_SCROLLCompletion);

                const takeScreenshotFullWebDEVICE_PIXEL_RATIOCompletion = new vscode.CompletionItem('DEVICE_PIXEL_RATIO');
                takeScreenshotFullWebDEVICE_PIXEL_RATIOCompletion.kind = vscode.CompletionItemKind.Field;
                takeScreenshotFullWebDEVICE_PIXEL_RATIOCompletion.insertText = new vscode.SnippetString("DEVICE_PIXEL_RATIO = \"${1}\"");
                takeScreenshotFullWebDEVICE_PIXEL_RATIOCompletion.documentation = new vscode.MarkdownString('Manuelle Angabe der Device-Pixel-Ratio. L\u00E4sst sich mit JavaScript-Befehl \'Window.devicePixelRatio\' ermitteln (Default: automatische Ermittlung im Browser. Falls nicht m\u00F6glich: 1).');
                items.push(takeScreenshotFullWebDEVICE_PIXEL_RATIOCompletion);

                const takeScreenshotFullWebSCROLL_BACKCompletion = new vscode.CompletionItem('SCROLL_BACK');
                takeScreenshotFullWebSCROLL_BACKCompletion.kind = vscode.CompletionItemKind.Field;
                takeScreenshotFullWebSCROLL_BACKCompletion.insertText = new vscode.SnippetString("SCROLL_BACK = \"${1}\"");
                takeScreenshotFullWebSCROLL_BACKCompletion.documentation = new vscode.MarkdownString('Soll nach dem Scrollen von oben nach unten wieder zur\u00FCck an den Ausgangspunkt gescrollt werden? (Default: true)');
                items.push(takeScreenshotFullWebSCROLL_BACKCompletion);
            }

            if (/.*\s*takeScreenshotWeb\s*\(.*/.test(linePrefix)) {

                const takeScreenshotWebOPTIONAL_PATHCompletion = new vscode.CompletionItem('OPTIONAL_PATH');
                takeScreenshotWebOPTIONAL_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                takeScreenshotWebOPTIONAL_PATHCompletion.insertText = new vscode.SnippetString("OPTIONAL_PATH = \"${1}\"");
                takeScreenshotWebOPTIONAL_PATHCompletion.documentation = new vscode.MarkdownString('Optionaler Pfad zu dem Verzeichnis, in dem ein Screenshot gespeichert werden soll. Mehrere Pfade k\u00F6nnen getrennt durch Semikolon angegeben werden.');
                items.push(takeScreenshotWebOPTIONAL_PATHCompletion);

                const takeScreenshotWebSHOT_MODECompletion = new vscode.CompletionItem('SHOT_MODE');
                takeScreenshotWebSHOT_MODECompletion.kind = vscode.CompletionItemKind.Field;
                takeScreenshotWebSHOT_MODECompletion.insertText = new vscode.SnippetString("SHOT_MODE = \"${1}\"");
                takeScreenshotWebSHOT_MODECompletion.documentation = new vscode.MarkdownString('Optionaler Parameter, der angibt, in welchem Modus der Screenshot aufgenommen werden soll.       M\u00F6glich sind:      os (default. Kompletter Bildschirm, inklusive Browserfenster. Nutzt das Betriebssystem. Funktioniert nicht, wenn der Brwoser im Headless-Modus ist!),      browser (aktueller Webseitenausschnitt. Nutzt den WebDriver.)');
                items.push(takeScreenshotWebSHOT_MODECompletion);
            }

            if (/.*\s*tapMobile\s*\(.*/.test(linePrefix)) {

                const tapMobileBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                tapMobileBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                tapMobileBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                tapMobileBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll (m\u00F6glich sind: id, name, xpath, class_name, tag_name, link_name, partial_link_name, css, accessability_id, ios_automation). Der Default-Wert ist \'name\'.');
                items.push(tapMobileBY_CRITERIACompletion);

                const tapMobileEXPRESSION_TEXTCompletion = new vscode.CompletionItem('EXPRESSION_TEXT');
                tapMobileEXPRESSION_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                tapMobileEXPRESSION_TEXTCompletion.insertText = new vscode.SnippetString("EXPRESSION_TEXT = \"${1}\"");
                tapMobileEXPRESSION_TEXTCompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(tapMobileEXPRESSION_TEXTCompletion);

                const tapMobileWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                tapMobileWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                tapMobileWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                tapMobileWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Der Parameter gibt an, wie lange vor dem Klick auf das Element gewartet werden soll. Der Parameter muss als positive, ganze Zahl angegeben werden. Der Default-Wert ist \'1\'.');
                items.push(tapMobileWAIT_SECONDSCompletion);
            }

            if (/.*\s*tapPositionMobile\s*\(.*/.test(linePrefix)) {

                const tapPositionMobileXCompletion = new vscode.CompletionItem('X');
                tapPositionMobileXCompletion.kind = vscode.CompletionItemKind.Field;
                tapPositionMobileXCompletion.insertText = new vscode.SnippetString("X = \"${1}\"");
                tapPositionMobileXCompletion.documentation = new vscode.MarkdownString('Der Parameter ist ein Pflichtparameter, der die X-Koordinate des Punktes in Pixeln angibt, auf den geklickt werden soll. Der Parameter muss als positive, ganze Zahl angegeben werden.');
                items.push(tapPositionMobileXCompletion);

                const tapPositionMobileYCompletion = new vscode.CompletionItem('Y');
                tapPositionMobileYCompletion.kind = vscode.CompletionItemKind.Field;
                tapPositionMobileYCompletion.insertText = new vscode.SnippetString("Y = \"${1}\"");
                tapPositionMobileYCompletion.documentation = new vscode.MarkdownString('Der Parameter ist ein Pflichtparameter, der die Y-Koordinate des Punktes in Pixeln angibt, auf den geklickt werden soll. Der Parameter muss als positive, ganze Zahl angegeben werden.');
                items.push(tapPositionMobileYCompletion);
            }

            if (/.*\s*then\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*timeout\s*\(.*/.test(linePrefix)) {

                const timeoutMESSAGECompletion = new vscode.CompletionItem('MESSAGE');
                timeoutMESSAGECompletion.kind = vscode.CompletionItemKind.Field;
                timeoutMESSAGECompletion.insertText = new vscode.SnippetString("MESSAGE = \"${1}\"");
                timeoutMESSAGECompletion.documentation = new vscode.MarkdownString('Nachricht, die im Bericht angezeigt werden soll.');
                items.push(timeoutMESSAGECompletion);
            }

            if (/.*\s*touchMobile\s*\(.*/.test(linePrefix)) {

                const touchMobileNUMBER_OF_FINGERSCompletion = new vscode.CompletionItem('NUMBER_OF_FINGERS');
                touchMobileNUMBER_OF_FINGERSCompletion.kind = vscode.CompletionItemKind.Field;
                touchMobileNUMBER_OF_FINGERSCompletion.insertText = new vscode.SnippetString("NUMBER_OF_FINGERS = \"${1}\"");
                touchMobileNUMBER_OF_FINGERSCompletion.documentation = new vscode.MarkdownString('Anzahl der Finger die den Bildschirm ber\u00FChren d\u00FCrfen. Default 1');
                items.push(touchMobileNUMBER_OF_FINGERSCompletion);

                const touchMobileX_POSITIONCompletion = new vscode.CompletionItem('X_POSITION');
                touchMobileX_POSITIONCompletion.kind = vscode.CompletionItemKind.Field;
                touchMobileX_POSITIONCompletion.insertText = new vscode.SnippetString("X_POSITION = \"${1}\"");
                touchMobileX_POSITIONCompletion.documentation = new vscode.MarkdownString('Der Parameter ist ein Pflichtparameter, der die X-Koordinate des Punktes in Pixeln angibt, der ber\u00FChrt wird. Der Parameter muss als positive, ganze Zahl angegeben werden.');
                items.push(touchMobileX_POSITIONCompletion);

                const touchMobileY_POSITIONCompletion = new vscode.CompletionItem('Y_POSITION');
                touchMobileY_POSITIONCompletion.kind = vscode.CompletionItemKind.Field;
                touchMobileY_POSITIONCompletion.insertText = new vscode.SnippetString("Y_POSITION = \"${1}\"");
                touchMobileY_POSITIONCompletion.documentation = new vscode.MarkdownString('Der Parameter ist ein Pflichtparameter, der die X-Koordinate des Punktes in Pixeln angibt, der ber\u00FChrt wird. Der Parameter muss als positive, ganze Zahl angegeben werden.');
                items.push(touchMobileY_POSITIONCompletion);

                const touchMobileTOUCH_DURATIONCompletion = new vscode.CompletionItem('TOUCH_DURATION');
                touchMobileTOUCH_DURATIONCompletion.kind = vscode.CompletionItemKind.Field;
                touchMobileTOUCH_DURATIONCompletion.insertText = new vscode.SnippetString("TOUCH_DURATION = \"${1}\"");
                touchMobileTOUCH_DURATIONCompletion.documentation = new vscode.MarkdownString('Gibt an, wie lange der Punkt auf dem Bildschirm gedr\u00FCckt werden soll');
                items.push(touchMobileTOUCH_DURATIONCompletion);
            }

            if (/.*\s*uiAction\s*\(.*/.test(linePrefix)) {

                const uiActionWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                uiActionWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                uiActionWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                uiActionWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des zu pr\u00FCfenden Fensters (Kann auch als Selektor beschrieben werden)');
                items.push(uiActionWINDOW_NAMECompletion);

                const uiActionUIA_SELECTORCompletion = new vscode.CompletionItem('UIA_SELECTOR');
                uiActionUIA_SELECTORCompletion.kind = vscode.CompletionItemKind.Field;
                uiActionUIA_SELECTORCompletion.insertText = new vscode.SnippetString("UIA_SELECTOR = \"${1}\"");
                uiActionUIA_SELECTORCompletion.documentation = new vscode.MarkdownString('Zielelement, welches bedient werden soll');
                items.push(uiActionUIA_SELECTORCompletion);

                const uiActionACTIONCompletion = new vscode.CompletionItem('ACTION');
                uiActionACTIONCompletion.kind = vscode.CompletionItemKind.Field;
                uiActionACTIONCompletion.insertText = new vscode.SnippetString("ACTION = \"${1}\"");
                uiActionACTIONCompletion.documentation = new vscode.MarkdownString('Auszuf\u00FChrende Aktion, vgl. Beschreibung des Treibers');
                items.push(uiActionACTIONCompletion);

                const uiActionPARAM1Completion = new vscode.CompletionItem('PARAM1');
                uiActionPARAM1Completion.kind = vscode.CompletionItemKind.Field;
                uiActionPARAM1Completion.insertText = new vscode.SnippetString("PARAM1 = \"${1}\"");
                uiActionPARAM1Completion.documentation = new vscode.MarkdownString('Parameter f\u00FCr die auszuf\u00FChrende Aktion');
                items.push(uiActionPARAM1Completion);

                const uiActionPARAM2Completion = new vscode.CompletionItem('PARAM2');
                uiActionPARAM2Completion.kind = vscode.CompletionItemKind.Field;
                uiActionPARAM2Completion.insertText = new vscode.SnippetString("PARAM2 = \"${1}\"");
                uiActionPARAM2Completion.documentation = new vscode.MarkdownString('Parameter f\u00FCr die auszuf\u00FChrende Aktion');
                items.push(uiActionPARAM2Completion);

                const uiActionPARAM3Completion = new vscode.CompletionItem('PARAM3');
                uiActionPARAM3Completion.kind = vscode.CompletionItemKind.Field;
                uiActionPARAM3Completion.insertText = new vscode.SnippetString("PARAM3 = \"${1}\"");
                uiActionPARAM3Completion.documentation = new vscode.MarkdownString('Parameter f\u00FCr die auszuf\u00FChrende Aktion');
                items.push(uiActionPARAM3Completion);

                const uiActionPARAM4Completion = new vscode.CompletionItem('PARAM4');
                uiActionPARAM4Completion.kind = vscode.CompletionItemKind.Field;
                uiActionPARAM4Completion.insertText = new vscode.SnippetString("PARAM4 = \"${1}\"");
                uiActionPARAM4Completion.documentation = new vscode.MarkdownString('Parameter f\u00FCr die auszuf\u00FChrende Aktion');
                items.push(uiActionPARAM4Completion);

                const uiActionTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                uiActionTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                uiActionTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                uiActionTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Fenster-Text geschrieben werden soll.');
                items.push(uiActionTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*uiClick\s*\(.*/.test(linePrefix)) {

                const uiClickWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                uiClickWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                uiClickWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                uiClickWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des zu pr\u00FCfenden Fensters (Kann auch als Selektor beschrieben werden)');
                items.push(uiClickWINDOW_NAMECompletion);

                const uiClickUIA_SELECTORCompletion = new vscode.CompletionItem('UIA_SELECTOR');
                uiClickUIA_SELECTORCompletion.kind = vscode.CompletionItemKind.Field;
                uiClickUIA_SELECTORCompletion.insertText = new vscode.SnippetString("UIA_SELECTOR = \"${1}\"");
                uiClickUIA_SELECTORCompletion.documentation = new vscode.MarkdownString('Zielelement, welches bedient werden soll');
                items.push(uiClickUIA_SELECTORCompletion);

                const uiClickXCompletion = new vscode.CompletionItem('X');
                uiClickXCompletion.kind = vscode.CompletionItemKind.Field;
                uiClickXCompletion.insertText = new vscode.SnippetString("X = \"${1}\"");
                uiClickXCompletion.documentation = new vscode.MarkdownString('X-Koordinate');
                items.push(uiClickXCompletion);

                const uiClickYCompletion = new vscode.CompletionItem('Y');
                uiClickYCompletion.kind = vscode.CompletionItemKind.Field;
                uiClickYCompletion.insertText = new vscode.SnippetString("Y = \"${1}\"");
                uiClickYCompletion.documentation = new vscode.MarkdownString('Y-Koordinate');
                items.push(uiClickYCompletion);
            }

            if (/.*\s*uiDoubleclick\s*\(.*/.test(linePrefix)) {

                const uiDoubleclickWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                uiDoubleclickWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                uiDoubleclickWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                uiDoubleclickWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des zu pr\u00FCfenden Fensters (Kann auch als Selektor beschrieben werden)');
                items.push(uiDoubleclickWINDOW_NAMECompletion);

                const uiDoubleclickUIA_SELECTORCompletion = new vscode.CompletionItem('UIA_SELECTOR');
                uiDoubleclickUIA_SELECTORCompletion.kind = vscode.CompletionItemKind.Field;
                uiDoubleclickUIA_SELECTORCompletion.insertText = new vscode.SnippetString("UIA_SELECTOR = \"${1}\"");
                uiDoubleclickUIA_SELECTORCompletion.documentation = new vscode.MarkdownString('Zielelement, welches bedient werden soll');
                items.push(uiDoubleclickUIA_SELECTORCompletion);

                const uiDoubleclickXCompletion = new vscode.CompletionItem('X');
                uiDoubleclickXCompletion.kind = vscode.CompletionItemKind.Field;
                uiDoubleclickXCompletion.insertText = new vscode.SnippetString("X = \"${1}\"");
                uiDoubleclickXCompletion.documentation = new vscode.MarkdownString('X-Koordinate');
                items.push(uiDoubleclickXCompletion);

                const uiDoubleclickYCompletion = new vscode.CompletionItem('Y');
                uiDoubleclickYCompletion.kind = vscode.CompletionItemKind.Field;
                uiDoubleclickYCompletion.insertText = new vscode.SnippetString("Y = \"${1}\"");
                uiDoubleclickYCompletion.documentation = new vscode.MarkdownString('Y-Koordinate');
                items.push(uiDoubleclickYCompletion);
            }

            if (/.*\s*uiGetProperty\s*\(.*/.test(linePrefix)) {

                const uiGetPropertyWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                uiGetPropertyWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                uiGetPropertyWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                uiGetPropertyWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des zu pr\u00FCfenden Fensters (Kann auch als Selektor beschrieben werden)');
                items.push(uiGetPropertyWINDOW_NAMECompletion);

                const uiGetPropertyUIA_SELECTORCompletion = new vscode.CompletionItem('UIA_SELECTOR');
                uiGetPropertyUIA_SELECTORCompletion.kind = vscode.CompletionItemKind.Field;
                uiGetPropertyUIA_SELECTORCompletion.insertText = new vscode.SnippetString("UIA_SELECTOR = \"${1}\"");
                uiGetPropertyUIA_SELECTORCompletion.documentation = new vscode.MarkdownString('Zielelement, welches bedient werden soll');
                items.push(uiGetPropertyUIA_SELECTORCompletion);

                const uiGetPropertyPROPERTYNAMECompletion = new vscode.CompletionItem('PROPERTYNAME');
                uiGetPropertyPROPERTYNAMECompletion.kind = vscode.CompletionItemKind.Field;
                uiGetPropertyPROPERTYNAMECompletion.insertText = new vscode.SnippetString("PROPERTYNAME = \"${1}\"");
                uiGetPropertyPROPERTYNAMECompletion.documentation = new vscode.MarkdownString('Name der Property.');
                items.push(uiGetPropertyPROPERTYNAMECompletion);

                const uiGetPropertyTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                uiGetPropertyTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                uiGetPropertyTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                uiGetPropertyTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Fenster-Text geschrieben werden soll.');
                items.push(uiGetPropertyTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*uiGetValue\s*\(.*/.test(linePrefix)) {

                const uiGetValueWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                uiGetValueWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                uiGetValueWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                uiGetValueWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des zu pr\u00FCfenden Fensters (Kann auch als Selektor beschrieben werden)');
                items.push(uiGetValueWINDOW_NAMECompletion);

                const uiGetValueUIA_SELECTORCompletion = new vscode.CompletionItem('UIA_SELECTOR');
                uiGetValueUIA_SELECTORCompletion.kind = vscode.CompletionItemKind.Field;
                uiGetValueUIA_SELECTORCompletion.insertText = new vscode.SnippetString("UIA_SELECTOR = \"${1}\"");
                uiGetValueUIA_SELECTORCompletion.documentation = new vscode.MarkdownString('Zielelement, welches bedient werden soll');
                items.push(uiGetValueUIA_SELECTORCompletion);

                const uiGetValueTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                uiGetValueTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                uiGetValueTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                uiGetValueTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Fenster-Text geschrieben werden soll.');
                items.push(uiGetValueTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*uiMove\s*\(.*/.test(linePrefix)) {

                const uiMoveWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                uiMoveWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                uiMoveWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                uiMoveWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des zu pr\u00FCfenden Fensters (Kann auch als Selektor beschrieben werden)');
                items.push(uiMoveWINDOW_NAMECompletion);

                const uiMoveUIA_SELECTORCompletion = new vscode.CompletionItem('UIA_SELECTOR');
                uiMoveUIA_SELECTORCompletion.kind = vscode.CompletionItemKind.Field;
                uiMoveUIA_SELECTORCompletion.insertText = new vscode.SnippetString("UIA_SELECTOR = \"${1}\"");
                uiMoveUIA_SELECTORCompletion.documentation = new vscode.MarkdownString('Zielelement, welches bedient werden soll');
                items.push(uiMoveUIA_SELECTORCompletion);

                const uiMoveXCompletion = new vscode.CompletionItem('X');
                uiMoveXCompletion.kind = vscode.CompletionItemKind.Field;
                uiMoveXCompletion.insertText = new vscode.SnippetString("X = \"${1}\"");
                uiMoveXCompletion.documentation = new vscode.MarkdownString('X-Koordinate');
                items.push(uiMoveXCompletion);

                const uiMoveYCompletion = new vscode.CompletionItem('Y');
                uiMoveYCompletion.kind = vscode.CompletionItemKind.Field;
                uiMoveYCompletion.insertText = new vscode.SnippetString("Y = \"${1}\"");
                uiMoveYCompletion.documentation = new vscode.MarkdownString('Y-Koordinate');
                items.push(uiMoveYCompletion);
            }

            if (/.*\s*uiMoveMouse\s*\(.*/.test(linePrefix)) {

                const uiMoveMouseWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                uiMoveMouseWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                uiMoveMouseWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                uiMoveMouseWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des zu pr\u00FCfenden Fensters (Kann auch als Selektor beschrieben werden)');
                items.push(uiMoveMouseWINDOW_NAMECompletion);

                const uiMoveMouseUIA_SELECTORCompletion = new vscode.CompletionItem('UIA_SELECTOR');
                uiMoveMouseUIA_SELECTORCompletion.kind = vscode.CompletionItemKind.Field;
                uiMoveMouseUIA_SELECTORCompletion.insertText = new vscode.SnippetString("UIA_SELECTOR = \"${1}\"");
                uiMoveMouseUIA_SELECTORCompletion.documentation = new vscode.MarkdownString('Zielelement, welches bedient werden soll');
                items.push(uiMoveMouseUIA_SELECTORCompletion);

                const uiMoveMouseXCompletion = new vscode.CompletionItem('X');
                uiMoveMouseXCompletion.kind = vscode.CompletionItemKind.Field;
                uiMoveMouseXCompletion.insertText = new vscode.SnippetString("X = \"${1}\"");
                uiMoveMouseXCompletion.documentation = new vscode.MarkdownString('X-Koordinate');
                items.push(uiMoveMouseXCompletion);

                const uiMoveMouseYCompletion = new vscode.CompletionItem('Y');
                uiMoveMouseYCompletion.kind = vscode.CompletionItemKind.Field;
                uiMoveMouseYCompletion.insertText = new vscode.SnippetString("Y = \"${1}\"");
                uiMoveMouseYCompletion.documentation = new vscode.MarkdownString('Y-Koordinate');
                items.push(uiMoveMouseYCompletion);
            }

            if (/.*\s*uiRightclick\s*\(.*/.test(linePrefix)) {

                const uiRightclickWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                uiRightclickWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                uiRightclickWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                uiRightclickWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des zu pr\u00FCfenden Fensters (Kann auch als Selektor beschrieben werden)');
                items.push(uiRightclickWINDOW_NAMECompletion);

                const uiRightclickUIA_SELECTORCompletion = new vscode.CompletionItem('UIA_SELECTOR');
                uiRightclickUIA_SELECTORCompletion.kind = vscode.CompletionItemKind.Field;
                uiRightclickUIA_SELECTORCompletion.insertText = new vscode.SnippetString("UIA_SELECTOR = \"${1}\"");
                uiRightclickUIA_SELECTORCompletion.documentation = new vscode.MarkdownString('Zielelement, welches bedient werden soll');
                items.push(uiRightclickUIA_SELECTORCompletion);

                const uiRightclickXCompletion = new vscode.CompletionItem('X');
                uiRightclickXCompletion.kind = vscode.CompletionItemKind.Field;
                uiRightclickXCompletion.insertText = new vscode.SnippetString("X = \"${1}\"");
                uiRightclickXCompletion.documentation = new vscode.MarkdownString('X-Koordinate');
                items.push(uiRightclickXCompletion);

                const uiRightclickYCompletion = new vscode.CompletionItem('Y');
                uiRightclickYCompletion.kind = vscode.CompletionItemKind.Field;
                uiRightclickYCompletion.insertText = new vscode.SnippetString("Y = \"${1}\"");
                uiRightclickYCompletion.documentation = new vscode.MarkdownString('Y-Koordinate');
                items.push(uiRightclickYCompletion);
            }

            if (/.*\s*uiSend\s*\(.*/.test(linePrefix)) {

                const uiSendWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                uiSendWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                uiSendWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                uiSendWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des zu pr\u00FCfenden Fensters (Kann auch als Selektor beschrieben werden)');
                items.push(uiSendWINDOW_NAMECompletion);

                const uiSendUIA_SELECTORCompletion = new vscode.CompletionItem('UIA_SELECTOR');
                uiSendUIA_SELECTORCompletion.kind = vscode.CompletionItemKind.Field;
                uiSendUIA_SELECTORCompletion.insertText = new vscode.SnippetString("UIA_SELECTOR = \"${1}\"");
                uiSendUIA_SELECTORCompletion.documentation = new vscode.MarkdownString('Zielelement, welches bedient werden soll');
                items.push(uiSendUIA_SELECTORCompletion);

                const uiSendTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                uiSendTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                uiSendTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                uiSendTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('Zu sendender Text');
                items.push(uiSendTEXT_TO_SENDCompletion);
            }

            if (/.*\s*uiSetValue\s*\(.*/.test(linePrefix)) {

                const uiSetValueWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                uiSetValueWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                uiSetValueWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                uiSetValueWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des zu pr\u00FCfenden Fensters (Kann auch als Selektor beschrieben werden)');
                items.push(uiSetValueWINDOW_NAMECompletion);

                const uiSetValueUIA_SELECTORCompletion = new vscode.CompletionItem('UIA_SELECTOR');
                uiSetValueUIA_SELECTORCompletion.kind = vscode.CompletionItemKind.Field;
                uiSetValueUIA_SELECTORCompletion.insertText = new vscode.SnippetString("UIA_SELECTOR = \"${1}\"");
                uiSetValueUIA_SELECTORCompletion.documentation = new vscode.MarkdownString('Zielelement, welches bedient werden soll');
                items.push(uiSetValueUIA_SELECTORCompletion);

                const uiSetValueVALUECompletion = new vscode.CompletionItem('VALUE');
                uiSetValueVALUECompletion.kind = vscode.CompletionItemKind.Field;
                uiSetValueVALUECompletion.insertText = new vscode.SnippetString("VALUE = \"${1}\"");
                uiSetValueVALUECompletion.documentation = new vscode.MarkdownString('Zu setzender Wert');
                items.push(uiSetValueVALUECompletion);
            }

            if (/.*\s*uiWaitFor\s*\(.*/.test(linePrefix)) {

                const uiWaitForWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                uiWaitForWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                uiWaitForWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                uiWaitForWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des zu pr\u00FCfenden Fensters (Kann auch als Selektor beschrieben werden)');
                items.push(uiWaitForWINDOW_NAMECompletion);

                const uiWaitForUIA_SELECTORCompletion = new vscode.CompletionItem('UIA_SELECTOR');
                uiWaitForUIA_SELECTORCompletion.kind = vscode.CompletionItemKind.Field;
                uiWaitForUIA_SELECTORCompletion.insertText = new vscode.SnippetString("UIA_SELECTOR = \"${1}\"");
                uiWaitForUIA_SELECTORCompletion.documentation = new vscode.MarkdownString('Zielelement, auf welches gewartet werden soll');
                items.push(uiWaitForUIA_SELECTORCompletion);

                const uiWaitForTIMEOUT_IN_SECONDSCompletion = new vscode.CompletionItem('TIMEOUT_IN_SECONDS');
                uiWaitForTIMEOUT_IN_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                uiWaitForTIMEOUT_IN_SECONDSCompletion.insertText = new vscode.SnippetString("TIMEOUT_IN_SECONDS = \"${1}\"");
                uiWaitForTIMEOUT_IN_SECONDSCompletion.documentation = new vscode.MarkdownString('Timeout Wartezeit');
                items.push(uiWaitForTIMEOUT_IN_SECONDSCompletion);
            }

            if (/.*\s*verifyNameByAutomationIdWinEle\s*\(.*/.test(linePrefix)) {

                const verifyNameByAutomationIdWinEleWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                verifyNameByAutomationIdWinEleWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                verifyNameByAutomationIdWinEleWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                verifyNameByAutomationIdWinEleWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Name des Fensters, das das zu steuernde Element enth\u00E4lt.');
                items.push(verifyNameByAutomationIdWinEleWINDOW_NAMECompletion);

                const verifyNameByAutomationIdWinElePROCESS_NAMECompletion = new vscode.CompletionItem('PROCESS_NAME');
                verifyNameByAutomationIdWinElePROCESS_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                verifyNameByAutomationIdWinElePROCESS_NAMECompletion.insertText = new vscode.SnippetString("PROCESS_NAME = \"${1}\"");
                verifyNameByAutomationIdWinElePROCESS_NAMECompletion.documentation = new vscode.MarkdownString('Name des Prozesses, zu dem das zu steuernde Fenster geh\u00F6rt. Dieser kann z.B. \u00FCber den Windows-Task-Manager ermittelt werden.');
                items.push(verifyNameByAutomationIdWinElePROCESS_NAMECompletion);

                const verifyNameByAutomationIdWinEleAUTOMATION_IDCompletion = new vscode.CompletionItem('AUTOMATION_ID');
                verifyNameByAutomationIdWinEleAUTOMATION_IDCompletion.kind = vscode.CompletionItemKind.Field;
                verifyNameByAutomationIdWinEleAUTOMATION_IDCompletion.insertText = new vscode.SnippetString("AUTOMATION_ID = \"${1}\"");
                verifyNameByAutomationIdWinEleAUTOMATION_IDCompletion.documentation = new vscode.MarkdownString('Automation-ID des Elementes, dessen Name ermittelt werden soll. Es ist m\u00F6glich mit Werkzeugen wie z.B. \'UISpy\' diese zu ermitteln.');
                items.push(verifyNameByAutomationIdWinEleAUTOMATION_IDCompletion);

                const verifyNameByAutomationIdWinEleELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                verifyNameByAutomationIdWinEleELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                verifyNameByAutomationIdWinEleELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                verifyNameByAutomationIdWinEleELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Name des Elements, das \u00FCber die Automation-ID gefunden wurde.');
                items.push(verifyNameByAutomationIdWinEleELEMENT_NAMECompletion);
            }

            if (/.*\s*wait\s*\(.*/.test(linePrefix)) {

                const waitWAIT_MILLISECONDSCompletion = new vscode.CompletionItem('WAIT_MILLISECONDS');
                waitWAIT_MILLISECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                waitWAIT_MILLISECONDSCompletion.insertText = new vscode.SnippetString("WAIT_MILLISECONDS = \"${1}\"");
                waitWAIT_MILLISECONDSCompletion.documentation = new vscode.MarkdownString('Wartezeit in Millisekunden');
                items.push(waitWAIT_MILLISECONDSCompletion);
            }

            if (/.*\s*waitForAjax\s*\(.*/.test(linePrefix)) {

                const waitForAjaxWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                waitForAjaxWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                waitForAjaxWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                waitForAjaxWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Anzahl Sekunden, die das Kommando maximal wartet bis keine Ajax-Kommunikation mehr stattfindet.      Default einstellbar \u00FCber Konfigurations-Parameter \'defaultAjaxWaitTimeoutInSeconds\'.');
                items.push(waitForAjaxWAIT_SECONDSCompletion);
            }

            if (/.*\s*waitForElementNotVisibleWeb\s*\(.*/.test(linePrefix)) {

                const waitForElementNotVisibleWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                waitForElementNotVisibleWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                waitForElementNotVisibleWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                waitForElementNotVisibleWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(waitForElementNotVisibleWebBY_CRITERIACompletion);

                const waitForElementNotVisibleWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                waitForElementNotVisibleWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                waitForElementNotVisibleWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                waitForElementNotVisibleWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(waitForElementNotVisibleWebELEMENT_NAMECompletion);

                const waitForElementNotVisibleWebWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                waitForElementNotVisibleWebWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                waitForElementNotVisibleWebWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                waitForElementNotVisibleWebWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Wartezeit in Sekunden.');
                items.push(waitForElementNotVisibleWebWAIT_SECONDSCompletion);
            }

            if (/.*\s*waitForElementVisibleWeb\s*\(.*/.test(linePrefix)) {

                const waitForElementVisibleWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                waitForElementVisibleWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                waitForElementVisibleWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                waitForElementVisibleWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(waitForElementVisibleWebBY_CRITERIACompletion);

                const waitForElementVisibleWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                waitForElementVisibleWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                waitForElementVisibleWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                waitForElementVisibleWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(waitForElementVisibleWebELEMENT_NAMECompletion);

                const waitForElementVisibleWebWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                waitForElementVisibleWebWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                waitForElementVisibleWebWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                waitForElementVisibleWebWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Wartezeit in Sekunden.');
                items.push(waitForElementVisibleWebWAIT_SECONDSCompletion);
            }

            if (/.*\s*waitForElementWeb\s*\(.*/.test(linePrefix)) {

                const waitForElementWebBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                waitForElementWebBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                waitForElementWebBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                waitForElementWebBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(waitForElementWebBY_CRITERIACompletion);

                const waitForElementWebELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                waitForElementWebELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                waitForElementWebELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                waitForElementWebELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(waitForElementWebELEMENT_NAMECompletion);

                const waitForElementWebWAIT_MILLISECONDSCompletion = new vscode.CompletionItem('WAIT_MILLISECONDS');
                waitForElementWebWAIT_MILLISECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                waitForElementWebWAIT_MILLISECONDSCompletion.insertText = new vscode.SnippetString("WAIT_MILLISECONDS = \"${1}\"");
                waitForElementWebWAIT_MILLISECONDSCompletion.documentation = new vscode.MarkdownString('Wartezeit in Millisekunden.');
                items.push(waitForElementWebWAIT_MILLISECONDSCompletion);
            }

            if (/.*\s*waitForElementWebVisible\s*\(.*/.test(linePrefix)) {

                const waitForElementWebVisibleBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                waitForElementWebVisibleBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                waitForElementWebVisibleBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                waitForElementWebVisibleBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll. Typisch sind xpath oder css. linktext oder id k\u00F6nnen ebenfalls verwendet werden. Default ist name.');
                items.push(waitForElementWebVisibleBY_CRITERIACompletion);

                const waitForElementWebVisibleELEMENT_NAMECompletion = new vscode.CompletionItem('ELEMENT_NAME');
                waitForElementWebVisibleELEMENT_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                waitForElementWebVisibleELEMENT_NAMECompletion.insertText = new vscode.SnippetString("ELEMENT_NAME = \"${1}\"");
                waitForElementWebVisibleELEMENT_NAMECompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(waitForElementWebVisibleELEMENT_NAMECompletion);

                const waitForElementWebVisibleWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                waitForElementWebVisibleWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                waitForElementWebVisibleWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                waitForElementWebVisibleWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Wartezeit in Sekunden.');
                items.push(waitForElementWebVisibleWAIT_SECONDSCompletion);
            }

            if (/.*\s*waitForFileNotExists\s*\(.*/.test(linePrefix)) {

                const waitForFileNotExistsFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                waitForFileNotExistsFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                waitForFileNotExistsFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                waitForFileNotExistsFILENAMECompletion.documentation = new vscode.MarkdownString('Name der zu suchenden Datei');
                items.push(waitForFileNotExistsFILENAMECompletion);

                const waitForFileNotExistsTRIESCompletion = new vscode.CompletionItem('TRIES');
                waitForFileNotExistsTRIESCompletion.kind = vscode.CompletionItemKind.Field;
                waitForFileNotExistsTRIESCompletion.insertText = new vscode.SnippetString("TRIES = \"${1}\"");
                waitForFileNotExistsTRIESCompletion.documentation = new vscode.MarkdownString('Anzahl Versuche (ganzahlig), die nach der Datei gesucht werden soll.');
                items.push(waitForFileNotExistsTRIESCompletion);

                const waitForFileNotExistsWAIT_MILLISECONDS_BETWEEN_TRIESCompletion = new vscode.CompletionItem('WAIT_MILLISECONDS_BETWEEN_TRIES');
                waitForFileNotExistsWAIT_MILLISECONDS_BETWEEN_TRIESCompletion.kind = vscode.CompletionItemKind.Field;
                waitForFileNotExistsWAIT_MILLISECONDS_BETWEEN_TRIESCompletion.insertText = new vscode.SnippetString("WAIT_MILLISECONDS_BETWEEN_TRIES = \"${1}\"");
                waitForFileNotExistsWAIT_MILLISECONDS_BETWEEN_TRIESCompletion.documentation = new vscode.MarkdownString('Wartezeit, nachdem die Datei nicht gefunden wurde in Millisekunden.');
                items.push(waitForFileNotExistsWAIT_MILLISECONDS_BETWEEN_TRIESCompletion);
            }

            if (/.*\s*waitForImage\s*\(.*/.test(linePrefix)) {

                const waitForImageIMAGE_PATHCompletion = new vscode.CompletionItem('IMAGE_PATH');
                waitForImageIMAGE_PATHCompletion.kind = vscode.CompletionItemKind.Field;
                waitForImageIMAGE_PATHCompletion.insertText = new vscode.SnippetString("IMAGE_PATH = \"${1}\"");
                waitForImageIMAGE_PATHCompletion.documentation = new vscode.MarkdownString('Relativer Pfad zu dem Bild');
                items.push(waitForImageIMAGE_PATHCompletion);

                const waitForImageBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                waitForImageBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                waitForImageBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                waitForImageBASEDIRCompletion.documentation = new vscode.MarkdownString('Base Directory');
                items.push(waitForImageBASEDIRCompletion);

                const waitForImageSECONDSCompletion = new vscode.CompletionItem('SECONDS');
                waitForImageSECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                waitForImageSECONDSCompletion.insertText = new vscode.SnippetString("SECONDS = \"${1}\"");
                waitForImageSECONDSCompletion.documentation = new vscode.MarkdownString('Die Sekunden wie lange gewartet werden soll.');
                items.push(waitForImageSECONDSCompletion);

                const waitForImageTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                waitForImageTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                waitForImageTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                waitForImageTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Fenster-Text geschrieben werden soll.');
                items.push(waitForImageTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*waitForJava\s*\(.*/.test(linePrefix)) {

                const waitForJavaTARGETCompletion = new vscode.CompletionItem('TARGET');
                waitForJavaTARGETCompletion.kind = vscode.CompletionItemKind.Field;
                waitForJavaTARGETCompletion.insertText = new vscode.SnippetString("TARGET = \"${1}\"");
                waitForJavaTARGETCompletion.documentation = new vscode.MarkdownString('Ziel');
                items.push(waitForJavaTARGETCompletion);

                const waitForJavaWAIT_MILLISCompletion = new vscode.CompletionItem('WAIT_MILLIS');
                waitForJavaWAIT_MILLISCompletion.kind = vscode.CompletionItemKind.Field;
                waitForJavaWAIT_MILLISCompletion.insertText = new vscode.SnippetString("WAIT_MILLIS = \"${1}\"");
                waitForJavaWAIT_MILLISCompletion.documentation = new vscode.MarkdownString('Optionale Anzahl zu wartender Millisekunden bis das Element verf\u00FCgbar ist. Default 10000.');
                items.push(waitForJavaWAIT_MILLISCompletion);

                const waitForJavaBY_NAMECompletion = new vscode.CompletionItem('BY_NAME');
                waitForJavaBY_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                waitForJavaBY_NAMECompletion.insertText = new vscode.SnippetString("BY_NAME = \"${1}\"");
                waitForJavaBY_NAMECompletion.documentation = new vscode.MarkdownString('Flag, \u00FCber den gekennzeichnet werden kann, dass das Element \u00FCber den Namen und nicht den Identifier (z.B. JButton1) angesprochen wird.');
                items.push(waitForJavaBY_NAMECompletion);
            }

            if (/.*\s*waitForPictureToDisappearWin\s*\(.*/.test(linePrefix)) {

                const waitForPictureToDisappearWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                waitForPictureToDisappearWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                waitForPictureToDisappearWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                waitForPictureToDisappearWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(waitForPictureToDisappearWinWINDOW_NAMECompletion);

                const waitForPictureToDisappearWinRELATIVE_PATH_IMAGECompletion = new vscode.CompletionItem('RELATIVE_PATH_IMAGE');
                waitForPictureToDisappearWinRELATIVE_PATH_IMAGECompletion.kind = vscode.CompletionItemKind.Field;
                waitForPictureToDisappearWinRELATIVE_PATH_IMAGECompletion.insertText = new vscode.SnippetString("RELATIVE_PATH_IMAGE = \"${1}\"");
                waitForPictureToDisappearWinRELATIVE_PATH_IMAGECompletion.documentation = new vscode.MarkdownString('Pfad zum Bild ');
                items.push(waitForPictureToDisappearWinRELATIVE_PATH_IMAGECompletion);

                const waitForPictureToDisappearWinBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                waitForPictureToDisappearWinBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                waitForPictureToDisappearWinBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                waitForPictureToDisappearWinBASEDIRCompletion.documentation = new vscode.MarkdownString('Angabe des Basisverzeichnisses');
                items.push(waitForPictureToDisappearWinBASEDIRCompletion);

                const waitForPictureToDisappearWinWAIT_MILLISECONDSCompletion = new vscode.CompletionItem('WAIT_MILLISECONDS');
                waitForPictureToDisappearWinWAIT_MILLISECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                waitForPictureToDisappearWinWAIT_MILLISECONDSCompletion.insertText = new vscode.SnippetString("WAIT_MILLISECONDS = \"${1}\"");
                waitForPictureToDisappearWinWAIT_MILLISECONDSCompletion.documentation = new vscode.MarkdownString('Wartezeit, die akzeptabel ist. Danach wird ein Fehler gemeldet.');
                items.push(waitForPictureToDisappearWinWAIT_MILLISECONDSCompletion);

                const waitForPictureToDisappearWinMAX_RETRIESCompletion = new vscode.CompletionItem('MAX_RETRIES');
                waitForPictureToDisappearWinMAX_RETRIESCompletion.kind = vscode.CompletionItemKind.Field;
                waitForPictureToDisappearWinMAX_RETRIESCompletion.insertText = new vscode.SnippetString("MAX_RETRIES = \"${1}\"");
                waitForPictureToDisappearWinMAX_RETRIESCompletion.documentation = new vscode.MarkdownString('Maximale Anzahl Versuche');
                items.push(waitForPictureToDisappearWinMAX_RETRIESCompletion);

                const waitForPictureToDisappearWinX1Completion = new vscode.CompletionItem('X1');
                waitForPictureToDisappearWinX1Completion.kind = vscode.CompletionItemKind.Field;
                waitForPictureToDisappearWinX1Completion.insertText = new vscode.SnippetString("X1 = \"${1}\"");
                waitForPictureToDisappearWinX1Completion.documentation = new vscode.MarkdownString('Linke Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(waitForPictureToDisappearWinX1Completion);

                const waitForPictureToDisappearWinY1Completion = new vscode.CompletionItem('Y1');
                waitForPictureToDisappearWinY1Completion.kind = vscode.CompletionItemKind.Field;
                waitForPictureToDisappearWinY1Completion.insertText = new vscode.SnippetString("Y1 = \"${1}\"");
                waitForPictureToDisappearWinY1Completion.documentation = new vscode.MarkdownString('Obere Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(waitForPictureToDisappearWinY1Completion);

                const waitForPictureToDisappearWinX2Completion = new vscode.CompletionItem('X2');
                waitForPictureToDisappearWinX2Completion.kind = vscode.CompletionItemKind.Field;
                waitForPictureToDisappearWinX2Completion.insertText = new vscode.SnippetString("X2 = \"${1}\"");
                waitForPictureToDisappearWinX2Completion.documentation = new vscode.MarkdownString('Rechte Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(waitForPictureToDisappearWinX2Completion);

                const waitForPictureToDisappearWinY2Completion = new vscode.CompletionItem('Y2');
                waitForPictureToDisappearWinY2Completion.kind = vscode.CompletionItemKind.Field;
                waitForPictureToDisappearWinY2Completion.insertText = new vscode.SnippetString("Y2 = \"${1}\"");
                waitForPictureToDisappearWinY2Completion.documentation = new vscode.MarkdownString('Untere Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(waitForPictureToDisappearWinY2Completion);
            }

            if (/.*\s*waitForPictureWin\s*\(.*/.test(linePrefix)) {

                const waitForPictureWinWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                waitForPictureWinWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                waitForPictureWinWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                waitForPictureWinWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Fenstername');
                items.push(waitForPictureWinWINDOW_NAMECompletion);

                const waitForPictureWinRELATIVE_PATH_IMAGECompletion = new vscode.CompletionItem('RELATIVE_PATH_IMAGE');
                waitForPictureWinRELATIVE_PATH_IMAGECompletion.kind = vscode.CompletionItemKind.Field;
                waitForPictureWinRELATIVE_PATH_IMAGECompletion.insertText = new vscode.SnippetString("RELATIVE_PATH_IMAGE = \"${1}\"");
                waitForPictureWinRELATIVE_PATH_IMAGECompletion.documentation = new vscode.MarkdownString('Pfad zum Bild ');
                items.push(waitForPictureWinRELATIVE_PATH_IMAGECompletion);

                const waitForPictureWinBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                waitForPictureWinBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                waitForPictureWinBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                waitForPictureWinBASEDIRCompletion.documentation = new vscode.MarkdownString('Angabe des Basisverzeichnisses');
                items.push(waitForPictureWinBASEDIRCompletion);

                const waitForPictureWinWAIT_MILLISECONDSCompletion = new vscode.CompletionItem('WAIT_MILLISECONDS');
                waitForPictureWinWAIT_MILLISECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                waitForPictureWinWAIT_MILLISECONDSCompletion.insertText = new vscode.SnippetString("WAIT_MILLISECONDS = \"${1}\"");
                waitForPictureWinWAIT_MILLISECONDSCompletion.documentation = new vscode.MarkdownString('Wartezeit, die akzeptabel ist. Danach wird ein Fehler gemeldet.');
                items.push(waitForPictureWinWAIT_MILLISECONDSCompletion);

                const waitForPictureWinMAX_RETRIESCompletion = new vscode.CompletionItem('MAX_RETRIES');
                waitForPictureWinMAX_RETRIESCompletion.kind = vscode.CompletionItemKind.Field;
                waitForPictureWinMAX_RETRIESCompletion.insertText = new vscode.SnippetString("MAX_RETRIES = \"${1}\"");
                waitForPictureWinMAX_RETRIESCompletion.documentation = new vscode.MarkdownString('Maximale Anzahl Versuche');
                items.push(waitForPictureWinMAX_RETRIESCompletion);

                const waitForPictureWinX1Completion = new vscode.CompletionItem('X1');
                waitForPictureWinX1Completion.kind = vscode.CompletionItemKind.Field;
                waitForPictureWinX1Completion.insertText = new vscode.SnippetString("X1 = \"${1}\"");
                waitForPictureWinX1Completion.documentation = new vscode.MarkdownString('Linke Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(waitForPictureWinX1Completion);

                const waitForPictureWinY1Completion = new vscode.CompletionItem('Y1');
                waitForPictureWinY1Completion.kind = vscode.CompletionItemKind.Field;
                waitForPictureWinY1Completion.insertText = new vscode.SnippetString("Y1 = \"${1}\"");
                waitForPictureWinY1Completion.documentation = new vscode.MarkdownString('Obere Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(waitForPictureWinY1Completion);

                const waitForPictureWinX2Completion = new vscode.CompletionItem('X2');
                waitForPictureWinX2Completion.kind = vscode.CompletionItemKind.Field;
                waitForPictureWinX2Completion.insertText = new vscode.SnippetString("X2 = \"${1}\"");
                waitForPictureWinX2Completion.documentation = new vscode.MarkdownString('Rechte Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(waitForPictureWinX2Completion);

                const waitForPictureWinY2Completion = new vscode.CompletionItem('Y2');
                waitForPictureWinY2Completion.kind = vscode.CompletionItemKind.Field;
                waitForPictureWinY2Completion.insertText = new vscode.SnippetString("Y2 = \"${1}\"");
                waitForPictureWinY2Completion.documentation = new vscode.MarkdownString('Untere Begrenzung des Suchbereichs. Wert wird absolut zur linken, oberen Ecke des Fensters angegeben');
                items.push(waitForPictureWinY2Completion);
            }

            if (/.*\s*waitForTextJava\s*\(.*/.test(linePrefix)) {

                const waitForTextJavaTEXTCompletion = new vscode.CompletionItem('TEXT');
                waitForTextJavaTEXTCompletion.kind = vscode.CompletionItemKind.Field;
                waitForTextJavaTEXTCompletion.insertText = new vscode.SnippetString("TEXT = \"${1}\"");
                waitForTextJavaTEXTCompletion.documentation = new vscode.MarkdownString('Der angezeigte Text');
                items.push(waitForTextJavaTEXTCompletion);

                const waitForTextJavaCHECK_CONTAINSCompletion = new vscode.CompletionItem('CHECK_CONTAINS');
                waitForTextJavaCHECK_CONTAINSCompletion.kind = vscode.CompletionItemKind.Field;
                waitForTextJavaCHECK_CONTAINSCompletion.insertText = new vscode.SnippetString("CHECK_CONTAINS = \"${1}\"");
                waitForTextJavaCHECK_CONTAINSCompletion.documentation = new vscode.MarkdownString('Legt fest ob der Wert nur beinhaltet sein muss. Default: false');
                items.push(waitForTextJavaCHECK_CONTAINSCompletion);

                const waitForTextJavaWAIT_MILLISCompletion = new vscode.CompletionItem('WAIT_MILLIS');
                waitForTextJavaWAIT_MILLISCompletion.kind = vscode.CompletionItemKind.Field;
                waitForTextJavaWAIT_MILLISCompletion.insertText = new vscode.SnippetString("WAIT_MILLIS = \"${1}\"");
                waitForTextJavaWAIT_MILLISCompletion.documentation = new vscode.MarkdownString('Optionale Anzahl zu wartender Millisekunden bis das Element verf\u00FCgbar ist. Default 10000.');
                items.push(waitForTextJavaWAIT_MILLISCompletion);

                const waitForTextJavaBY_NAMECompletion = new vscode.CompletionItem('BY_NAME');
                waitForTextJavaBY_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                waitForTextJavaBY_NAMECompletion.insertText = new vscode.SnippetString("BY_NAME = \"${1}\"");
                waitForTextJavaBY_NAMECompletion.documentation = new vscode.MarkdownString('Flag, \u00FCber den gekennzeichnet werden kann, dass das Element \u00FCber den Namen und nicht den Identifier (z.B. JButton1) angesprochen wird.');
                items.push(waitForTextJavaBY_NAMECompletion);
            }

            if (/.*\s*waitMobile\s*\(.*/.test(linePrefix)) {

                const waitMobileBY_CRITERIACompletion = new vscode.CompletionItem('BY_CRITERIA');
                waitMobileBY_CRITERIACompletion.kind = vscode.CompletionItemKind.Field;
                waitMobileBY_CRITERIACompletion.insertText = new vscode.SnippetString("BY_CRITERIA = \"${1}\"");
                waitMobileBY_CRITERIACompletion.documentation = new vscode.MarkdownString('Kriterium, \u00FCber das das Element ermittelt werden soll (m\u00F6glich sind: id, name, xpath, class_name, tag_name, link_name, partial_link_name, css, accessability_id, ios_automation). Der Default-Wert ist \'name\'.');
                items.push(waitMobileBY_CRITERIACompletion);

                const waitMobileEXPRESSION_TEXTCompletion = new vscode.CompletionItem('EXPRESSION_TEXT');
                waitMobileEXPRESSION_TEXTCompletion.kind = vscode.CompletionItemKind.Field;
                waitMobileEXPRESSION_TEXTCompletion.insertText = new vscode.SnippetString("EXPRESSION_TEXT = \"${1}\"");
                waitMobileEXPRESSION_TEXTCompletion.documentation = new vscode.MarkdownString('Bezeichner des Elements abh\u00E4ngig vom Kriterium.');
                items.push(waitMobileEXPRESSION_TEXTCompletion);

                const waitMobileWAIT_SECONDSCompletion = new vscode.CompletionItem('WAIT_SECONDS');
                waitMobileWAIT_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                waitMobileWAIT_SECONDSCompletion.insertText = new vscode.SnippetString("WAIT_SECONDS = \"${1}\"");
                waitMobileWAIT_SECONDSCompletion.documentation = new vscode.MarkdownString('Optionaler Parameter, der angibt, wie lange auf die Verf\u00FCgbarkeit des Elements gewartet werden soll bis eine Warnung ausgegeben wird. Der Parameter muss als positive, ganze Zahl angegeben werden. Der Default-Wert ist \'1\'.');
                items.push(waitMobileWAIT_SECONDSCompletion);
            }

            if (/.*\s*warning\s*\(.*/.test(linePrefix)) {

                const warningMESSAGECompletion = new vscode.CompletionItem('MESSAGE');
                warningMESSAGECompletion.kind = vscode.CompletionItemKind.Field;
                warningMESSAGECompletion.insertText = new vscode.SnippetString("MESSAGE = \"${1}\"");
                warningMESSAGECompletion.documentation = new vscode.MarkdownString('Nachricht, die im Bericht angezeigt werden soll.');
                items.push(warningMESSAGECompletion);
            }

            if (/.*\s*watchForNewFile\s*\(.*/.test(linePrefix)) {

                const watchForNewFileDIRECTORYCompletion = new vscode.CompletionItem('DIRECTORY');
                watchForNewFileDIRECTORYCompletion.kind = vscode.CompletionItemKind.Field;
                watchForNewFileDIRECTORYCompletion.insertText = new vscode.SnippetString("DIRECTORY = \"${1}\"");
                watchForNewFileDIRECTORYCompletion.documentation = new vscode.MarkdownString('Absoluter Pfad des zu beobachtenden Verzeichnisses.');
                items.push(watchForNewFileDIRECTORYCompletion);

                const watchForNewFileFILE_EXTENSIONCompletion = new vscode.CompletionItem('FILE_EXTENSION');
                watchForNewFileFILE_EXTENSIONCompletion.kind = vscode.CompletionItemKind.Field;
                watchForNewFileFILE_EXTENSIONCompletion.insertText = new vscode.SnippetString("FILE_EXTENSION = \"${1}\"");
                watchForNewFileFILE_EXTENSIONCompletion.documentation = new vscode.MarkdownString('Komma-separierte Liste mit Dateiendungen (inklusive Punkt, z.B. \'.zip\'). Hat eine neue Datei eine dieser Endungen, wird auf sie reagiert. Ist diese Liste leer, so wird auf jede m\u00F6gliche neue Datei reagiert, die nicht eine der Dateiendungen haben, die in FILE_EXTENSIONS_TO_IGNORE definiert wurden. Beispielwert: \'.zip, .pdf\'');
                items.push(watchForNewFileFILE_EXTENSIONCompletion);

                const watchForNewFileFILE_EXTENSIONS_TO_IGNORECompletion = new vscode.CompletionItem('FILE_EXTENSIONS_TO_IGNORE');
                watchForNewFileFILE_EXTENSIONS_TO_IGNORECompletion.kind = vscode.CompletionItemKind.Field;
                watchForNewFileFILE_EXTENSIONS_TO_IGNORECompletion.insertText = new vscode.SnippetString("FILE_EXTENSIONS_TO_IGNORE = \"${1}\"");
                watchForNewFileFILE_EXTENSIONS_TO_IGNORECompletion.documentation = new vscode.MarkdownString('Komma-separierte Liste mit Dateiendungen (inklusive Punkt, z.B. \'.zip\'). Hat eine neue Datei eine dieser Endungen, so wird explizit nicht auf sie reagiert.Zum Beispiel kann hier \'.tmp, .crdownload\' \u00FCbergeben werden und der Parameter \'FILE_EXTENSION\' leer gelassen werden, um bei einem Download auf jede m\u00F6gliche neue Datei zu reagieren, au\u00DFer auf w\u00E4hrend des Downloads aufkommende tempor\u00E4re Dateien.');
                items.push(watchForNewFileFILE_EXTENSIONS_TO_IGNORECompletion);

                const watchForNewFileMAX_WAIT_MSCompletion = new vscode.CompletionItem('MAX_WAIT_MS');
                watchForNewFileMAX_WAIT_MSCompletion.kind = vscode.CompletionItemKind.Field;
                watchForNewFileMAX_WAIT_MSCompletion.insertText = new vscode.SnippetString("MAX_WAIT_MS = \"${1}\"");
                watchForNewFileMAX_WAIT_MSCompletion.documentation = new vscode.MarkdownString('Maximale Dauer in Millisekunden, \u00FCber die das Verzeichnis beobachtet wird. Wird diese Dauer \u00FCberschritten, ohne das eine Datei gefunden wurde, schl\u00E4gt das Kommando fehl. Standardwert: 120000');
                items.push(watchForNewFileMAX_WAIT_MSCompletion);

                const watchForNewFileTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                watchForNewFileTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                watchForNewFileTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                watchForNewFileTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel, unter dem der Dateiname der neuen Datei in den Storage geschrieben werden soll.');
                items.push(watchForNewFileTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*when\s*\(.*/.test(linePrefix)) {

                const whenACCEPTABLE_RESULT_LEVELSCompletion = new vscode.CompletionItem('ACCEPTABLE_RESULT_LEVELS');
                whenACCEPTABLE_RESULT_LEVELSCompletion.kind = vscode.CompletionItemKind.Field;
                whenACCEPTABLE_RESULT_LEVELSCompletion.insertText = new vscode.SnippetString("ACCEPTABLE_RESULT_LEVELS = \"${1}\"");
                whenACCEPTABLE_RESULT_LEVELSCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(whenACCEPTABLE_RESULT_LEVELSCompletion);
            }

            if (/.*\s*while\s*\(.*/.test(linePrefix)) {

                const whileMAX_ITERATIONSCompletion = new vscode.CompletionItem('MAX_ITERATIONS');
                whileMAX_ITERATIONSCompletion.kind = vscode.CompletionItemKind.Field;
                whileMAX_ITERATIONSCompletion.insertText = new vscode.SnippetString("MAX_ITERATIONS = \"${1}\"");
                whileMAX_ITERATIONSCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(whileMAX_ITERATIONSCompletion);

                const whileACCEPTABLE_RESULT_LEVELSCompletion = new vscode.CompletionItem('ACCEPTABLE_RESULT_LEVELS');
                whileACCEPTABLE_RESULT_LEVELSCompletion.kind = vscode.CompletionItemKind.Field;
                whileACCEPTABLE_RESULT_LEVELSCompletion.insertText = new vscode.SnippetString("ACCEPTABLE_RESULT_LEVELS = \"${1}\"");
                whileACCEPTABLE_RESULT_LEVELSCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(whileACCEPTABLE_RESULT_LEVELSCompletion);

                const whileINDEX_NAMECompletion = new vscode.CompletionItem('INDEX_NAME');
                whileINDEX_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                whileINDEX_NAMECompletion.insertText = new vscode.SnippetString("INDEX_NAME = \"${1}\"");
                whileINDEX_NAMECompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(whileINDEX_NAMECompletion);
            }

            if (/.*\s*whileNot\s*\(.*/.test(linePrefix)) {

                const whileNotMAX_ITERATIONSCompletion = new vscode.CompletionItem('MAX_ITERATIONS');
                whileNotMAX_ITERATIONSCompletion.kind = vscode.CompletionItemKind.Field;
                whileNotMAX_ITERATIONSCompletion.insertText = new vscode.SnippetString("MAX_ITERATIONS = \"${1}\"");
                whileNotMAX_ITERATIONSCompletion.documentation = new vscode.MarkdownString('Beschreibung ausstehend');
                items.push(whileNotMAX_ITERATIONSCompletion);
            }

            if (/.*\s*winActivate\s*\(.*/.test(linePrefix)) {

                const winActivateTITLECompletion = new vscode.CompletionItem('TITLE');
                winActivateTITLECompletion.kind = vscode.CompletionItemKind.Field;
                winActivateTITLECompletion.insertText = new vscode.SnippetString("TITLE = \"${1}\"");
                winActivateTITLECompletion.documentation = new vscode.MarkdownString('Titel des zu aktivierenden Fensters');
                items.push(winActivateTITLECompletion);
            }

            if (/.*\s*winCheckIfFileExists\s*\(.*/.test(linePrefix)) {

                const winCheckIfFileExistsFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                winCheckIfFileExistsFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                winCheckIfFileExistsFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                winCheckIfFileExistsFILENAMECompletion.documentation = new vscode.MarkdownString('Filepath der zu pr\u00FCfenden Datei');
                items.push(winCheckIfFileExistsFILENAMECompletion);

                const winCheckIfFileExistsMIN_SIZE_BYTESCompletion = new vscode.CompletionItem('MIN_SIZE_BYTES');
                winCheckIfFileExistsMIN_SIZE_BYTESCompletion.kind = vscode.CompletionItemKind.Field;
                winCheckIfFileExistsMIN_SIZE_BYTESCompletion.insertText = new vscode.SnippetString("MIN_SIZE_BYTES = \"${1}\"");
                winCheckIfFileExistsMIN_SIZE_BYTESCompletion.documentation = new vscode.MarkdownString('Mindestgr\u00F6\u00DFe in Bytes');
                items.push(winCheckIfFileExistsMIN_SIZE_BYTESCompletion);
            }

            if (/.*\s*winExists\s*\(.*/.test(linePrefix)) {

                const winExistsTITLECompletion = new vscode.CompletionItem('TITLE');
                winExistsTITLECompletion.kind = vscode.CompletionItemKind.Field;
                winExistsTITLECompletion.insertText = new vscode.SnippetString("TITLE = \"${1}\"");
                winExistsTITLECompletion.documentation = new vscode.MarkdownString('Titel des zu pr\u00FCfenden Fensters');
                items.push(winExistsTITLECompletion);
            }

            if (/.*\s*winGetActiveWindowTitle\s*\(.*/.test(linePrefix)) {

                const winGetActiveWindowTitleTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                winGetActiveWindowTitleTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                winGetActiveWindowTitleTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                winGetActiveWindowTitleTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Fenster-Text geschrieben werden soll.');
                items.push(winGetActiveWindowTitleTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*winGetAllWindowsTitles\s*\(.*/.test(linePrefix)) {

                const winGetAllWindowsTitlesTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                winGetAllWindowsTitlesTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                winGetAllWindowsTitlesTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                winGetAllWindowsTitlesTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Hier kann ein Schl\u00FCssel gesetzt werden, unter dem das Ergebnis dieser Operation gespeichert wird.');
                items.push(winGetAllWindowsTitlesTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*winGetControlinfoAtPosition\s*\(.*/.test(linePrefix)) {

                const winGetControlinfoAtPositionWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                winGetControlinfoAtPositionWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                winGetControlinfoAtPositionWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                winGetControlinfoAtPositionWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des Fensters');
                items.push(winGetControlinfoAtPositionWINDOW_NAMECompletion);

                const winGetControlinfoAtPositionCONTROLCompletion = new vscode.CompletionItem('CONTROL');
                winGetControlinfoAtPositionCONTROLCompletion.kind = vscode.CompletionItemKind.Field;
                winGetControlinfoAtPositionCONTROLCompletion.insertText = new vscode.SnippetString("CONTROL = \"${1}\"");
                winGetControlinfoAtPositionCONTROLCompletion.documentation = new vscode.MarkdownString('Control');
                items.push(winGetControlinfoAtPositionCONTROLCompletion);

                const winGetControlinfoAtPositionMOUSE_XCompletion = new vscode.CompletionItem('MOUSE_X');
                winGetControlinfoAtPositionMOUSE_XCompletion.kind = vscode.CompletionItemKind.Field;
                winGetControlinfoAtPositionMOUSE_XCompletion.insertText = new vscode.SnippetString("MOUSE_X = \"${1}\"");
                winGetControlinfoAtPositionMOUSE_XCompletion.documentation = new vscode.MarkdownString('X-Position der Maus');
                items.push(winGetControlinfoAtPositionMOUSE_XCompletion);

                const winGetControlinfoAtPositionMOUSE_YCompletion = new vscode.CompletionItem('MOUSE_Y');
                winGetControlinfoAtPositionMOUSE_YCompletion.kind = vscode.CompletionItemKind.Field;
                winGetControlinfoAtPositionMOUSE_YCompletion.insertText = new vscode.SnippetString("MOUSE_Y = \"${1}\"");
                winGetControlinfoAtPositionMOUSE_YCompletion.documentation = new vscode.MarkdownString('Y-Position der Maus');
                items.push(winGetControlinfoAtPositionMOUSE_YCompletion);
            }

            if (/.*\s*winGetText\s*\(.*/.test(linePrefix)) {

                const winGetTextTITLECompletion = new vscode.CompletionItem('TITLE');
                winGetTextTITLECompletion.kind = vscode.CompletionItemKind.Field;
                winGetTextTITLECompletion.insertText = new vscode.SnippetString("TITLE = \"${1}\"");
                winGetTextTITLECompletion.documentation = new vscode.MarkdownString('Titel des zu pr\u00FCfenden Fensters');
                items.push(winGetTextTITLECompletion);

                const winGetTextTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                winGetTextTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                winGetTextTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                winGetTextTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Fenster-Text geschrieben werden soll.');
                items.push(winGetTextTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*winGetWindowText\s*\(.*/.test(linePrefix)) {

                const winGetWindowTextWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                winGetWindowTextWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                winGetWindowTextWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                winGetWindowTextWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des Fensters');
                items.push(winGetWindowTextWINDOW_NAMECompletion);

                const winGetWindowTextMATCH_MODECompletion = new vscode.CompletionItem('MATCH_MODE');
                winGetWindowTextMATCH_MODECompletion.kind = vscode.CompletionItemKind.Field;
                winGetWindowTextMATCH_MODECompletion.insertText = new vscode.SnippetString("MATCH_MODE = \"${1}\"");
                winGetWindowTextMATCH_MODECompletion.documentation = new vscode.MarkdownString('M\u00F6gliche Werte sind eine der folgenden Ziffern oder das Wort \'RegEx\':\n       1 = Der Titel eines Fensters muss mit dem angegebenen WINDOW_NAME beginnen, um eine \u00DCbereinstimmung zu erzielen.\n       2 = Der Titel eines Fensters kann WINDOW_NAME an beliebiger Stelle enthalten, um eine \u00DCbereinstimmung zu erzielen.\n       3 = Der Titel eines Fensters muss genau mit WINDOW_NAME \u00FCbereinstimmen, um eine \u00DCbereinstimmung zu erzielen.\n       RegEx = WINDOW_NAME wird als regul\u00E4rer Ausdruck behandelt.');
                items.push(winGetWindowTextMATCH_MODECompletion);

                const winGetWindowTextTARGET_STORAGE_KEYCompletion = new vscode.CompletionItem('TARGET_STORAGE_KEY');
                winGetWindowTextTARGET_STORAGE_KEYCompletion.kind = vscode.CompletionItemKind.Field;
                winGetWindowTextTARGET_STORAGE_KEYCompletion.insertText = new vscode.SnippetString("TARGET_STORAGE_KEY = \"${1}\"");
                winGetWindowTextTARGET_STORAGE_KEYCompletion.documentation = new vscode.MarkdownString('Schl\u00FCssel f\u00FCr die Storage-Datei, in den der Fenster-Text geschrieben werden soll.');
                items.push(winGetWindowTextTARGET_STORAGE_KEYCompletion);
            }

            if (/.*\s*winMouseClickCursorFenster\s*\(.*/.test(linePrefix)) {

                const winMouseClickCursorFensterWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                winMouseClickCursorFensterWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                winMouseClickCursorFensterWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                winMouseClickCursorFensterWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des Fensters');
                items.push(winMouseClickCursorFensterWINDOW_NAMECompletion);

                const winMouseClickCursorFensterMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                winMouseClickCursorFensterMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                winMouseClickCursorFensterMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                winMouseClickCursorFensterMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('Mouse Button');
                items.push(winMouseClickCursorFensterMOUSE_BUTTONCompletion);
            }

            if (/.*\s*winMouseClickXY\s*\(.*/.test(linePrefix)) {

                const winMouseClickXYXCompletion = new vscode.CompletionItem('X');
                winMouseClickXYXCompletion.kind = vscode.CompletionItemKind.Field;
                winMouseClickXYXCompletion.insertText = new vscode.SnippetString("X = \"${1}\"");
                winMouseClickXYXCompletion.documentation = new vscode.MarkdownString('X-Koordinate');
                items.push(winMouseClickXYXCompletion);

                const winMouseClickXYYCompletion = new vscode.CompletionItem('Y');
                winMouseClickXYYCompletion.kind = vscode.CompletionItemKind.Field;
                winMouseClickXYYCompletion.insertText = new vscode.SnippetString("Y = \"${1}\"");
                winMouseClickXYYCompletion.documentation = new vscode.MarkdownString('Y-Koordinate');
                items.push(winMouseClickXYYCompletion);

                const winMouseClickXYMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                winMouseClickXYMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                winMouseClickXYMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                winMouseClickXYMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('Mouse Button');
                items.push(winMouseClickXYMOUSE_BUTTONCompletion);
            }

            if (/.*\s*winMouseClickXYFenster\s*\(.*/.test(linePrefix)) {

                const winMouseClickXYFensterWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                winMouseClickXYFensterWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                winMouseClickXYFensterWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                winMouseClickXYFensterWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des Fensters');
                items.push(winMouseClickXYFensterWINDOW_NAMECompletion);

                const winMouseClickXYFensterXCompletion = new vscode.CompletionItem('X');
                winMouseClickXYFensterXCompletion.kind = vscode.CompletionItemKind.Field;
                winMouseClickXYFensterXCompletion.insertText = new vscode.SnippetString("X = \"${1}\"");
                winMouseClickXYFensterXCompletion.documentation = new vscode.MarkdownString('X-Koordinate');
                items.push(winMouseClickXYFensterXCompletion);

                const winMouseClickXYFensterYCompletion = new vscode.CompletionItem('Y');
                winMouseClickXYFensterYCompletion.kind = vscode.CompletionItemKind.Field;
                winMouseClickXYFensterYCompletion.insertText = new vscode.SnippetString("Y = \"${1}\"");
                winMouseClickXYFensterYCompletion.documentation = new vscode.MarkdownString('Y-Koordinate');
                items.push(winMouseClickXYFensterYCompletion);

                const winMouseClickXYFensterMOUSE_BUTTONCompletion = new vscode.CompletionItem('MOUSE_BUTTON');
                winMouseClickXYFensterMOUSE_BUTTONCompletion.kind = vscode.CompletionItemKind.Field;
                winMouseClickXYFensterMOUSE_BUTTONCompletion.insertText = new vscode.SnippetString("MOUSE_BUTTON = \"${1}\"");
                winMouseClickXYFensterMOUSE_BUTTONCompletion.documentation = new vscode.MarkdownString('Mouse Button');
                items.push(winMouseClickXYFensterMOUSE_BUTTONCompletion);
            }

            if (/.*\s*winMouseDoubleClickXYFenster\s*\(.*/.test(linePrefix)) {

                const winMouseDoubleClickXYFensterWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                winMouseDoubleClickXYFensterWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                winMouseDoubleClickXYFensterWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                winMouseDoubleClickXYFensterWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des Fensters');
                items.push(winMouseDoubleClickXYFensterWINDOW_NAMECompletion);

                const winMouseDoubleClickXYFensterXCompletion = new vscode.CompletionItem('X');
                winMouseDoubleClickXYFensterXCompletion.kind = vscode.CompletionItemKind.Field;
                winMouseDoubleClickXYFensterXCompletion.insertText = new vscode.SnippetString("X = \"${1}\"");
                winMouseDoubleClickXYFensterXCompletion.documentation = new vscode.MarkdownString('X-Koordinate');
                items.push(winMouseDoubleClickXYFensterXCompletion);

                const winMouseDoubleClickXYFensterYCompletion = new vscode.CompletionItem('Y');
                winMouseDoubleClickXYFensterYCompletion.kind = vscode.CompletionItemKind.Field;
                winMouseDoubleClickXYFensterYCompletion.insertText = new vscode.SnippetString("Y = \"${1}\"");
                winMouseDoubleClickXYFensterYCompletion.documentation = new vscode.MarkdownString('Y-Koordinate');
                items.push(winMouseDoubleClickXYFensterYCompletion);
            }

            if (/.*\s*winMouseOn00\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*winOpenFileWithNotepad\s*\(.*/.test(linePrefix)) {

                const winOpenFileWithNotepadFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                winOpenFileWithNotepadFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                winOpenFileWithNotepadFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                winOpenFileWithNotepadFILENAMECompletion.documentation = new vscode.MarkdownString('Name der Datei');
                items.push(winOpenFileWithNotepadFILENAMECompletion);

                const winOpenFileWithNotepadBASEDIRCompletion = new vscode.CompletionItem('BASEDIR');
                winOpenFileWithNotepadBASEDIRCompletion.kind = vscode.CompletionItemKind.Field;
                winOpenFileWithNotepadBASEDIRCompletion.insertText = new vscode.SnippetString("BASEDIR = \"${1}\"");
                winOpenFileWithNotepadBASEDIRCompletion.documentation = new vscode.MarkdownString('Base Directory');
                items.push(winOpenFileWithNotepadBASEDIRCompletion);
            }

            if (/.*\s*winScrollMouseWheel\s*\(.*/.test(linePrefix)) {

                const winScrollMouseWheelWHEEL_DIRECTIONCompletion = new vscode.CompletionItem('WHEEL_DIRECTION');
                winScrollMouseWheelWHEEL_DIRECTIONCompletion.kind = vscode.CompletionItemKind.Field;
                winScrollMouseWheelWHEEL_DIRECTIONCompletion.insertText = new vscode.SnippetString("WHEEL_DIRECTION = \"${1}\"");
                winScrollMouseWheelWHEEL_DIRECTIONCompletion.documentation = new vscode.MarkdownString('Richtung des Mausrads');
                items.push(winScrollMouseWheelWHEEL_DIRECTIONCompletion);

                const winScrollMouseWheelNUMBER_OF_WHEEL_TURNSCompletion = new vscode.CompletionItem('NUMBER_OF_WHEEL_TURNS');
                winScrollMouseWheelNUMBER_OF_WHEEL_TURNSCompletion.kind = vscode.CompletionItemKind.Field;
                winScrollMouseWheelNUMBER_OF_WHEEL_TURNSCompletion.insertText = new vscode.SnippetString("NUMBER_OF_WHEEL_TURNS = \"${1}\"");
                winScrollMouseWheelNUMBER_OF_WHEEL_TURNSCompletion.documentation = new vscode.MarkdownString('Anzahl der Drehungen des Mausrads');
                items.push(winScrollMouseWheelNUMBER_OF_WHEEL_TURNSCompletion);
            }

            if (/.*\s*winSend\s*\(.*/.test(linePrefix)) {

                const winSendTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                winSendTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                winSendTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                winSendTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('Der zu sendende Text');
                items.push(winSendTEXT_TO_SENDCompletion);

                const winSendDELAYCompletion = new vscode.CompletionItem('DELAY');
                winSendDELAYCompletion.kind = vscode.CompletionItemKind.Field;
                winSendDELAYCompletion.insertText = new vscode.SnippetString("DELAY = \"${1}\"");
                winSendDELAYCompletion.documentation = new vscode.MarkdownString('Delay zwischen Tastenanschl\u00E4gen in Millisekunden (Default: 5)');
                items.push(winSendDELAYCompletion);
            }

            if (/.*\s*winSendTextByPaste\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*winSendWindow\s*\(.*/.test(linePrefix)) {

                const winSendWindowWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                winSendWindowWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                winSendWindowWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                winSendWindowWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des Fensters');
                items.push(winSendWindowWINDOW_NAMECompletion);

                const winSendWindowTEXT_TO_SENDCompletion = new vscode.CompletionItem('TEXT_TO_SEND');
                winSendWindowTEXT_TO_SENDCompletion.kind = vscode.CompletionItemKind.Field;
                winSendWindowTEXT_TO_SENDCompletion.insertText = new vscode.SnippetString("TEXT_TO_SEND = \"${1}\"");
                winSendWindowTEXT_TO_SENDCompletion.documentation = new vscode.MarkdownString('Der zu sendende Text');
                items.push(winSendWindowTEXT_TO_SENDCompletion);

                const winSendWindowDELAYCompletion = new vscode.CompletionItem('DELAY');
                winSendWindowDELAYCompletion.kind = vscode.CompletionItemKind.Field;
                winSendWindowDELAYCompletion.insertText = new vscode.SnippetString("DELAY = \"${1}\"");
                winSendWindowDELAYCompletion.documentation = new vscode.MarkdownString('Delay zwischen Tastenanschl\u00E4gen in Millisekunden (Default: 5)');
                items.push(winSendWindowDELAYCompletion);
            }

            if (/.*\s*winStatusbarText\s*\(.*/.test(linePrefix)) {

                const winStatusbarTextWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                winStatusbarTextWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                winStatusbarTextWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                winStatusbarTextWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des Fensters');
                items.push(winStatusbarTextWINDOW_NAMECompletion);
            }

            if (/.*\s*winWait\s*\(.*/.test(linePrefix)) {

                const winWaitTITLECompletion = new vscode.CompletionItem('TITLE');
                winWaitTITLECompletion.kind = vscode.CompletionItemKind.Field;
                winWaitTITLECompletion.insertText = new vscode.SnippetString("TITLE = \"${1}\"");
                winWaitTITLECompletion.documentation = new vscode.MarkdownString('Titel des zu pr\u00FCfenden Fensters');
                items.push(winWaitTITLECompletion);

                const winWaitTIMEOUT_IN_SECONDSCompletion = new vscode.CompletionItem('TIMEOUT_IN_SECONDS');
                winWaitTIMEOUT_IN_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                winWaitTIMEOUT_IN_SECONDSCompletion.insertText = new vscode.SnippetString("TIMEOUT_IN_SECONDS = \"${1}\"");
                winWaitTIMEOUT_IN_SECONDSCompletion.documentation = new vscode.MarkdownString('Timeout in Sekunden, wie lange h\u00F6chstens gewartet werden soll.');
                items.push(winWaitTIMEOUT_IN_SECONDSCompletion);
            }

            if (/.*\s*winWaitActive\s*\(.*/.test(linePrefix)) {

                const winWaitActiveTITLECompletion = new vscode.CompletionItem('TITLE');
                winWaitActiveTITLECompletion.kind = vscode.CompletionItemKind.Field;
                winWaitActiveTITLECompletion.insertText = new vscode.SnippetString("TITLE = \"${1}\"");
                winWaitActiveTITLECompletion.documentation = new vscode.MarkdownString('Titel des zu pr\u00FCfenden Fensters');
                items.push(winWaitActiveTITLECompletion);

                const winWaitActiveTIMEOUT_IN_SECONDSCompletion = new vscode.CompletionItem('TIMEOUT_IN_SECONDS');
                winWaitActiveTIMEOUT_IN_SECONDSCompletion.kind = vscode.CompletionItemKind.Field;
                winWaitActiveTIMEOUT_IN_SECONDSCompletion.insertText = new vscode.SnippetString("TIMEOUT_IN_SECONDS = \"${1}\"");
                winWaitActiveTIMEOUT_IN_SECONDSCompletion.documentation = new vscode.MarkdownString('Timeout in Sekunden, wie lange h\u00F6chstens gewartet werden soll.');
                items.push(winWaitActiveTIMEOUT_IN_SECONDSCompletion);
            }

            if (/.*\s*winWaitForWindowExists\s*\(.*/.test(linePrefix)) {

                const winWaitForWindowExistsWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                winWaitForWindowExistsWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                winWaitForWindowExistsWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                winWaitForWindowExistsWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des Fensters');
                items.push(winWaitForWindowExistsWINDOW_NAMECompletion);

                const winWaitForWindowExistsMATCH_MODECompletion = new vscode.CompletionItem('MATCH_MODE');
                winWaitForWindowExistsMATCH_MODECompletion.kind = vscode.CompletionItemKind.Field;
                winWaitForWindowExistsMATCH_MODECompletion.insertText = new vscode.SnippetString("MATCH_MODE = \"${1}\"");
                winWaitForWindowExistsMATCH_MODECompletion.documentation = new vscode.MarkdownString('M\u00F6gliche Werte sind eine der folgenden Ziffern oder das Wort \'RegEx\':\n       1 = Der Titel eines Fensters muss mit dem angegebenen WINDOW_NAME beginnen, um eine \u00DCbereinstimmung zu erzielen.\n       2 = Der Titel eines Fensters kann WINDOW_NAME an beliebiger Stelle enthalten, um eine \u00DCbereinstimmung zu erzielen.\n       3 = Der Titel eines Fensters muss genau mit WINDOW_NAME \u00FCbereinstimmen, um eine \u00DCbereinstimmung zu erzielen.\n       RegEx = WINDOW_NAME wird als regul\u00E4rer Ausdruck behandelt.');
                items.push(winWaitForWindowExistsMATCH_MODECompletion);
            }

            if (/.*\s*winWaitForWindowText\s*\(.*/.test(linePrefix)) {

                const winWaitForWindowTextWINDOW_NAMECompletion = new vscode.CompletionItem('WINDOW_NAME');
                winWaitForWindowTextWINDOW_NAMECompletion.kind = vscode.CompletionItemKind.Field;
                winWaitForWindowTextWINDOW_NAMECompletion.insertText = new vscode.SnippetString("WINDOW_NAME = \"${1}\"");
                winWaitForWindowTextWINDOW_NAMECompletion.documentation = new vscode.MarkdownString('Titel des Fensters');
                items.push(winWaitForWindowTextWINDOW_NAMECompletion);

                const winWaitForWindowTextTEXTCompletion = new vscode.CompletionItem('TEXT');
                winWaitForWindowTextTEXTCompletion.kind = vscode.CompletionItemKind.Field;
                winWaitForWindowTextTEXTCompletion.insertText = new vscode.SnippetString("TEXT = \"${1}\"");
                winWaitForWindowTextTEXTCompletion.documentation = new vscode.MarkdownString('Der zu erwartende Text');
                items.push(winWaitForWindowTextTEXTCompletion);
            }

            if (/.*\s*writePropertiesToStorage\s*\(.*/.test(linePrefix)) {
            }

            if (/.*\s*writeToFile\s*\(.*/.test(linePrefix)) {

                const writeToFileVALUECompletion = new vscode.CompletionItem('VALUE');
                writeToFileVALUECompletion.kind = vscode.CompletionItemKind.Field;
                writeToFileVALUECompletion.insertText = new vscode.SnippetString("VALUE = \"${1}\"");
                writeToFileVALUECompletion.documentation = new vscode.MarkdownString('Leerer Parameter');
                items.push(writeToFileVALUECompletion);

                const writeToFileFILENAMECompletion = new vscode.CompletionItem('FILENAME');
                writeToFileFILENAMECompletion.kind = vscode.CompletionItemKind.Field;
                writeToFileFILENAMECompletion.insertText = new vscode.SnippetString("FILENAME = \"${1}\"");
                writeToFileFILENAMECompletion.documentation = new vscode.MarkdownString('Dateiname der zu schreibenden Datei');
                items.push(writeToFileFILENAMECompletion);

                const writeToFileENCODINGCompletion = new vscode.CompletionItem('ENCODING');
                writeToFileENCODINGCompletion.kind = vscode.CompletionItemKind.Field;
                writeToFileENCODINGCompletion.insertText = new vscode.SnippetString("ENCODING = \"${1}\"");
                writeToFileENCODINGCompletion.documentation = new vscode.MarkdownString('Eindeutige Zuordnung von Schriftzeichen');
                items.push(writeToFileENCODINGCompletion);
            }

            if (/.*\s*xml2Cobol\s*\(.*/.test(linePrefix)) {

                const xml2CobolINPUT_XMLCompletion = new vscode.CompletionItem('INPUT_XML');
                xml2CobolINPUT_XMLCompletion.kind = vscode.CompletionItemKind.Field;
                xml2CobolINPUT_XMLCompletion.insertText = new vscode.SnippetString("INPUT_XML = \"${1}\"");
                xml2CobolINPUT_XMLCompletion.documentation = new vscode.MarkdownString('Zu verwendendes Eingangs-XML');
                items.push(xml2CobolINPUT_XMLCompletion);

                const xml2CobolCOPYBOOKCompletion = new vscode.CompletionItem('COPYBOOK');
                xml2CobolCOPYBOOKCompletion.kind = vscode.CompletionItemKind.Field;
                xml2CobolCOPYBOOKCompletion.insertText = new vscode.SnippetString("COPYBOOK = \"${1}\"");
                xml2CobolCOPYBOOKCompletion.documentation = new vscode.MarkdownString('Host Copybook');
                items.push(xml2CobolCOPYBOOKCompletion);

                const xml2CobolOUTPUT_BINCompletion = new vscode.CompletionItem('OUTPUT_BIN');
                xml2CobolOUTPUT_BINCompletion.kind = vscode.CompletionItemKind.Field;
                xml2CobolOUTPUT_BINCompletion.insertText = new vscode.SnippetString("OUTPUT_BIN = \"${1}\"");
                xml2CobolOUTPUT_BINCompletion.documentation = new vscode.MarkdownString('Zu erstellende Bin\u00E4r Datei');
                items.push(xml2CobolOUTPUT_BINCompletion);

                const xml2CobolFONTCompletion = new vscode.CompletionItem('FONT');
                xml2CobolFONTCompletion.kind = vscode.CompletionItemKind.Field;
                xml2CobolFONTCompletion.insertText = new vscode.SnippetString("FONT = \"${1}\"");
                xml2CobolFONTCompletion.documentation = new vscode.MarkdownString('Zu verwendendes Charset der Cobol Datei');
                items.push(xml2CobolFONTCompletion);
            }

            if (/.*\s*zipFiles\s*\(.*/.test(linePrefix)) {

                const zipFilesPATH_OF_FILESCompletion = new vscode.CompletionItem('PATH_OF_FILES');
                zipFilesPATH_OF_FILESCompletion.kind = vscode.CompletionItemKind.Field;
                zipFilesPATH_OF_FILESCompletion.insertText = new vscode.SnippetString("PATH_OF_FILES = \"${1}\"");
                zipFilesPATH_OF_FILESCompletion.documentation = new vscode.MarkdownString('Pfad der der Datei \/ der Dateien \/ des Ordners, die gezippt werden sollen');
                items.push(zipFilesPATH_OF_FILESCompletion);

                const zipFilesPATH_OF_ARCHIVECompletion = new vscode.CompletionItem('PATH_OF_ARCHIVE');
                zipFilesPATH_OF_ARCHIVECompletion.kind = vscode.CompletionItemKind.Field;
                zipFilesPATH_OF_ARCHIVECompletion.insertText = new vscode.SnippetString("PATH_OF_ARCHIVE = \"${1}\"");
                zipFilesPATH_OF_ARCHIVECompletion.documentation = new vscode.MarkdownString('Pfad, an welchem das Archive erstellt werden soll');
                items.push(zipFilesPATH_OF_ARCHIVECompletion);
            }

            if (/.*\s*zoomMobile\s*\(.*/.test(linePrefix)) {

                const zoomMobileX_POSITIONCompletion = new vscode.CompletionItem('X_POSITION');
                zoomMobileX_POSITIONCompletion.kind = vscode.CompletionItemKind.Field;
                zoomMobileX_POSITIONCompletion.insertText = new vscode.SnippetString("X_POSITION = \"${1}\"");
                zoomMobileX_POSITIONCompletion.documentation = new vscode.MarkdownString('Der Parameter gibt die X-Koordinate des Punktes in Pixeln an, auf den gezoomt werden soll. Der Parameter muss als positive, ganze Zahl angegeben werden.');
                items.push(zoomMobileX_POSITIONCompletion);

                const zoomMobileY_POSITIONCompletion = new vscode.CompletionItem('Y_POSITION');
                zoomMobileY_POSITIONCompletion.kind = vscode.CompletionItemKind.Field;
                zoomMobileY_POSITIONCompletion.insertText = new vscode.SnippetString("Y_POSITION = \"${1}\"");
                zoomMobileY_POSITIONCompletion.documentation = new vscode.MarkdownString('Der Parameter gibt die Y-Koordinate des Punktes in Pixeln an, auf den gezoomt werden soll. Der Parameter muss als positive, ganze Zahl angegeben werden.');
                items.push(zoomMobileY_POSITIONCompletion);
            }

            console.log("Items size: " + items.length);
            return items;
        }
    },
    '.' // triggered whenever a '.' is being typed
);